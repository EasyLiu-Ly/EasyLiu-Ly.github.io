<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>EasyLiu</title>
  
  <subtitle>welcome to my blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://easyliu.com/"/>
  <updated>2020-11-22T05:02:54.354Z</updated>
  <id>http://easyliu.com/</id>
  
  <author>
    <name>EasyLiu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>hexo插入音频和视频</title>
    <link href="http://easyliu.com/2020/11/22/hexo/insert_video/"/>
    <id>http://easyliu.com/2020/11/22/hexo/insert_video/</id>
    <published>2020-11-22T04:08:15.000Z</published>
    <updated>2020-11-22T05:02:54.354Z</updated>
    
    <content type="html"><![CDATA[<h2 id="音视频准备"><a href="#音视频准备" class="headerlink" title="音视频准备"></a>音视频准备</h2><h3 id="在线音视频"><a href="#在线音视频" class="headerlink" title="在线音视频"></a>在线音视频</h3><p>如果是在线音视频的话，只要有url就行</p><h3 id="本地音视频"><a href="#本地音视频" class="headerlink" title="本地音视频"></a>本地音视频</h3><p>在public文件夹下面新建一个resources目录，把视频和音频放在这个目录里面，这里我把视频放在video子目录下面，把音频放在audio子目录下面。</p><blockquote><p>为啥要把资源放在public？只有把资源放在public文件夹下面，网页才能访问！！最开始就是在这里卡了很久一直没法播放，原来是路径设置不对导致没法访问</p></blockquote><h2 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h2><p>安装aplayer以及dplayer:</p><blockquote><p>npm install hexo-tag-aplayer</p><p>npm install hexo-tag-dplayer</p><p>关于aplayer以及dplayer语法，参考：</p></blockquote><p><a href="https://github.com/MoePlayer/hexo-tag-aplayer" target="_blank" rel="noopener">hexo-tag-aplayer</a></p><p><a href="https://github.com/MoePlayer/hexo-tag-dplayer" target="_blank" rel="noopener">hexo-tag-dplayer</a></p><p><a href="https://www.jianshu.com/p/26a7fc7cc185" target="_blank" rel="noopener">Hexo博客中插入音乐/视频/</a></p><p><a href="https://github.com/DIYgod/DPlayer" target="_blank" rel="noopener">DPlayer</a></p><p><a href="http://dplayer.js.org/guide.html#quick-start" target="_blank" rel="noopener">http://dplayer.js.org/guide.html#quick-start</a></p><p>然后在md文件中插入如下代码，视频就正常加载起播了，这里播放的是本地视频！</p><div id="dplayer0" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer0"),"autoplay":true,"theme":"#FADFA3","loop":true,"video":{"url":"/resources/video/scenery.mp4","pic":"/resources/image/scenery_three.jpeg"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script><p>插入音频代码,音频就正常加载起播了，这里播放的是在线音频！</p><p>aplayer安装不了，先注释：</p>]]></content>
    
    <summary type="html">
    
      hexo插入音频和视频
    
    </summary>
    
      <category term="开发工具" scheme="http://easyliu.com/categories/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="hexo进阶" scheme="http://easyliu.com/tags/hexo%E8%BF%9B%E9%98%B6/"/>
    
  </entry>
  
  <entry>
    <title>厦门——2020.11.22-24</title>
    <link href="http://easyliu.com/2020/11/22/life/2020_11_22-24-xiamen/"/>
    <id>http://easyliu.com/2020/11/22/life/2020_11_22-24-xiamen/</id>
    <published>2020-11-22T02:39:18.000Z</published>
    <updated>2020-11-22T02:52:06.179Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2020/11/22/life/2020_11_22-24-xiamen/WechatIMG18.jpeg" alt="WechatIMG18"><br><img src="/2020/11/22/life/2020_11_22-24-xiamen/WechatIMG19.jpeg" alt="WechatIMG19"><br><img src="/2020/11/22/life/2020_11_22-24-xiamen/WechatIMG20.jpeg" alt="WechatIMG20"><br><img src="/2020/11/22/life/2020_11_22-24-xiamen/WechatIMG21.jpeg" alt="WechatIMG21"><br><img src="/2020/11/22/life/2020_11_22-24-xiamen/WechatIMG22.jpeg" alt="WechatIMG22"><br><img src="/2020/11/22/life/2020_11_22-24-xiamen/WechatIMG23.jpeg" alt="WechatIMG23"><br><img src="/2020/11/22/life/2020_11_22-24-xiamen/WechatIMG24.jpeg" alt="WechatIMG24"><br><img src="/2020/11/22/life/2020_11_22-24-xiamen/WechatIMG25.jpeg" alt="WechatIMG25"><br><img src="/2020/11/22/life/2020_11_22-24-xiamen/WechatIMG26.jpeg" alt="WechatIMG26"><br><img src="/2020/11/22/life/2020_11_22-24-xiamen/WechatIMG27.jpeg" alt="WechatIMG27"><br><img src="/2020/11/22/life/2020_11_22-24-xiamen/WechatIMG28.jpeg" alt="WechatIMG28"><br><img src="/2020/11/22/life/2020_11_22-24-xiamen/WechatIMG29.jpeg" alt="WechatIMG29"><br><img src="/2020/11/22/life/2020_11_22-24-xiamen/WechatIMG30.jpeg" alt="WechatIMG30"></p>]]></content>
    
    <summary type="html">
    
      厦门——2020.11.22-24
    
    </summary>
    
      <category term="旅游" scheme="http://easyliu.com/categories/%E6%97%85%E6%B8%B8/"/>
    
    
      <category term="日常生活" scheme="http://easyliu.com/tags/%E6%97%A5%E5%B8%B8%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>梧桐山——2020.11.21</title>
    <link href="http://easyliu.com/2020/11/22/life/2020_11_21_wutong_mountain/"/>
    <id>http://easyliu.com/2020/11/22/life/2020_11_21_wutong_mountain/</id>
    <published>2020-11-22T02:10:28.000Z</published>
    <updated>2020-11-22T02:31:26.377Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2020/11/22/life/2020_11_21_wutong_mountain/one.jpeg" alt="one"><br><img src="/2020/11/22/life/2020_11_21_wutong_mountain/two.jpeg" alt="two"><br><img src="/2020/11/22/life/2020_11_21_wutong_mountain/three.jpeg" alt="three"></p><h2 id="看我犀利的眼神"><a href="#看我犀利的眼神" class="headerlink" title="看我犀利的眼神"></a>看我犀利的眼神</h2><p><img src="/2020/11/22/life/2020_11_21_wutong_mountain/four.jpeg" alt="four"><br><img src="/2020/11/22/life/2020_11_21_wutong_mountain/five.jpeg" alt="five"><br><img src="/2020/11/22/life/2020_11_21_wutong_mountain/six.jpeg" alt="six"><br><img src="/2020/11/22/life/2020_11_21_wutong_mountain/seven.jpeg" alt="seven"><br><img src="/2020/11/22/life/2020_11_21_wutong_mountain/eight.jpeg" alt="eight"></p><h2 id="置身仙境"><a href="#置身仙境" class="headerlink" title="置身仙境"></a>置身仙境</h2><p><img src="/2020/11/22/life/2020_11_21_wutong_mountain/nine.jpeg" alt="nine"></p>]]></content>
    
    <summary type="html">
    
      梧桐山——2020.11.21
    
    </summary>
    
      <category term="周末活动" scheme="http://easyliu.com/categories/%E5%91%A8%E6%9C%AB%E6%B4%BB%E5%8A%A8/"/>
    
    
      <category term="日常生活" scheme="http://easyliu.com/tags/%E6%97%A5%E5%B8%B8%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>Android MVVM框架之Livedata以及ViewModel</title>
    <link href="http://easyliu.com/2020/11/07/android_jetpack/livedata/"/>
    <id>http://easyliu.com/2020/11/07/android_jetpack/livedata/</id>
    <published>2020-11-07T10:07:19.000Z</published>
    <updated>2020-11-15T08:26:46.598Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2>]]></content>
    
    <summary type="html">
    
      Android MVVM框架之Livedata以及ViewModel
    
    </summary>
    
      <category term="Android架构学习" scheme="http://easyliu.com/categories/Android%E6%9E%B6%E6%9E%84%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Android" scheme="http://easyliu.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>早起龙城公园爬山——2020.11.1</title>
    <link href="http://easyliu.com/2020/11/01/life/2020_11_1_longcheng_park/"/>
    <id>http://easyliu.com/2020/11/01/life/2020_11_1_longcheng_park/</id>
    <published>2020-11-01T08:59:16.000Z</published>
    <updated>2020-11-22T05:10:46.612Z</updated>
    
    <content type="html"><![CDATA[<h2 id="空气新鲜"><a href="#空气新鲜" class="headerlink" title="空气新鲜"></a>空气新鲜</h2><div id="dplayer1" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer1"),"autoplay":true,"theme":"#FADFA3","loop":true,"lang":"zh-cn","screenshot":true,"hotkey":true,"preload":"auto","volume":0.9,"mutex":true,"video":{"url":"/resources/video/scenery.mp4","pic":"/resources/image/scenery_three.jpeg"},"danmaku":{"id":"9E2E3368B56CDBB4","api":"https://api.prprpr.me/dplayer/","token":"tokendemo","maximum":1000,"addition":["['https://api.prprpr.me/dplayer/v3/bilibili?aid=4157142']"]}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script><p><img src="/2020/11/01/life/2020_11_1_longcheng_park/scenery_one.jpeg" alt="scenery_one"><br><img src="/2020/11/01/life/2020_11_1_longcheng_park/scenery_two.jpeg" alt="scenery_two"><br><img src="/2020/11/01/life/2020_11_1_longcheng_park/scenery_three.jpeg" alt="scenery_three"><br><img src="/2020/11/01/life/2020_11_1_longcheng_park/scenery_four.jpeg" alt="scenery_four"></p><h2 id="你大爷还是你大爷"><a href="#你大爷还是你大爷" class="headerlink" title="你大爷还是你大爷"></a>你大爷还是你大爷</h2><p><img src="/2020/11/01/life/2020_11_1_longcheng_park/uncle.jpeg" alt="uncle_one"><br><img src="/2020/11/01/life/2020_11_1_longcheng_park/uncle_two.jpeg" alt="uncle_two"></p>]]></content>
    
    <summary type="html">
    
      龙城公园爬山——2020.11.1
    
    </summary>
    
      <category term="周末活动" scheme="http://easyliu.com/categories/%E5%91%A8%E6%9C%AB%E6%B4%BB%E5%8A%A8/"/>
    
    
      <category term="日常生活" scheme="http://easyliu.com/tags/%E6%97%A5%E5%B8%B8%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>Android生命周期感应组件lifecycle</title>
    <link href="http://easyliu.com/2020/10/31/android_jetpack/lifecycle/"/>
    <id>http://easyliu.com/2020/10/31/android_jetpack/lifecycle/</id>
    <published>2020-10-31T08:34:04.000Z</published>
    <updated>2020-11-07T14:01:58.751Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>生命周期感知型组件可执行操作来响应另一个组件（如 Activity 和 Fragment）的生命周期状态的变化。这些组件有助于您写出更有条理且往往更精简的代码，这样的代码更易于维护。</p><p>一种常见的模式是在 Activity 和 Fragment 的生命周期方法中实现依赖组件的操作。但是，这种模式会导致代码条理性很差而且会扩散错误。通过使用生命周期感知型组件，您可以将依赖组件的代码从生命周期方法移入组件本身中。</p><p>androidx.lifecycle 软件包提供了可用于构建生命周期感知型组件的类和接口 - 这些组件可以根据 Activity 或 Fragment 的当前生命周期状态自动调整其行为。<br><a href="https://developer.android.com/jetpack/androidx/releases/lifecycle#java" target="_blank" rel="noopener">导入方法</a></p><p>在 Android 框架中定义的大多数应用组件都存在生命周期。生命周期由操作系统或进程中运行的框架代码管理。它们是 Android 运作方式的核心，应用必须遵循它们。如果不这样做，可能会引发内存泄露甚至应用崩溃。</p><p>假设我们有一个在屏幕上显示设备位置的 Activity。常见的实现可能如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyLocationListener</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyLocationListener</span><span class="params">(Context context, Callback callback)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// connect to system location service</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// disconnect from system location service</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> MyLocationListener myLocationListener;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(...)</span> </span>&#123;</span><br><span class="line">        myLocationListener = <span class="keyword">new</span> MyLocationListener(<span class="keyword">this</span>, (location) -&gt; &#123;</span><br><span class="line">            <span class="comment">// update UI</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStart</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onStart();</span><br><span class="line">        myLocationListener.start();</span><br><span class="line">        <span class="comment">// manage other components that need to respond</span></span><br><span class="line">        <span class="comment">// to the activity lifecycle</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onStop();</span><br><span class="line">        myLocationListener.stop();</span><br><span class="line">        <span class="comment">// manage other components that need to respond</span></span><br><span class="line">        <span class="comment">// to the activity lifecycle</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>虽然此示例看起来没问题，但在真实的应用中，最终会有太多管理界面和其他组件的调用，以响应生命周期的当前状态。管理多个组件会在生命周期方法（如 onStart() 和 onStop()）中放置大量的代码，这使得它们难以维护。</p><p>androidx.lifecycle 软件包提供的类和接口可帮助您以弹性和隔离的方式解决这些问题。</p><h2 id="Lifecycle"><a href="#Lifecycle" class="headerlink" title="Lifecycle"></a>Lifecycle</h2><p>Lifecycle 是一个类，用于存储有关组件（如 Activity 或 Fragment）的生命周期状态的信息，并允许其他对象观察此状态。</p><p>Lifecycle 使用两种主要枚举跟踪其关联组件的生命周期状态：</p><ul><li>事件<br>从框架和 Lifecycle 类分派的生命周期事件。这些事件映射到 Activity 和 Fragment 中的回调事件。</li><li>状态<br>由 Lifecycle 对象跟踪的组件的当前状态。</li></ul><p><img src="/2020/10/31/android_jetpack/lifecycle/lifecycle-state.png" alt="构成 Android Activity 生命周期的状态和事件"></p><p>Lifecycle源代码如下，可以看出下Lifecycle类主要是3个方法，分别是：添加observer、移除observer以及获取当前的状态，然后类里面有关于Event和State的定义：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Lifecycle</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Adds a LifecycleObserver that will be notified when the LifecycleOwner changes</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> observer The observer to notify.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@MainThread</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">addObserver</span><span class="params">(@NonNull LifecycleObserver observer)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Removes the given observer from the observers list.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> observer The observer to be removed.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@MainThread</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">removeObserver</span><span class="params">(@NonNull LifecycleObserver observer)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns the current state of the Lifecycle.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> The current state of the Lifecycle.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@MainThread</span></span><br><span class="line">    <span class="meta">@NonNull</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> State <span class="title">getCurrentState</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"WeakerAccess"</span>)</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">enum</span> Event &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Constant for onCreate event of the &#123;<span class="doctag">@link</span> LifecycleOwner&#125;.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        ON_CREATE,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Constant for onStart event of the &#123;<span class="doctag">@link</span> LifecycleOwner&#125;.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        ON_START,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Constant for onResume event of the &#123;<span class="doctag">@link</span> LifecycleOwner&#125;.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        ON_RESUME,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Constant for onPause event of the &#123;<span class="doctag">@link</span> LifecycleOwner&#125;.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        ON_PAUSE,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Constant for onStop event of the &#123;<span class="doctag">@link</span> LifecycleOwner&#125;.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        ON_STOP,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Constant for onDestroy event of the &#123;<span class="doctag">@link</span> LifecycleOwner&#125;.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        ON_DESTROY,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * An &#123;<span class="doctag">@link</span> Event Event&#125; constant that can be used to match all events.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        ON_ANY</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Lifecycle states. You can consider the states as the nodes in a graph and</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@link</span> Event&#125;s as the edges between these nodes.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"WeakerAccess"</span>)</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">enum</span> State &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Destroyed state for a LifecycleOwner. After this event, this Lifecycle will not dispatch</span></span><br><span class="line"><span class="comment">         * any more events. For instance, for an &#123;<span class="doctag">@link</span> android.app.Activity&#125;, this state is reached</span></span><br><span class="line"><span class="comment">         * &lt;b&gt;right before&lt;/b&gt; Activity's &#123;<span class="doctag">@link</span> android.app.Activity#onDestroy() onDestroy&#125; call.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        DESTROYED,</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Initialized state for a LifecycleOwner. For an &#123;<span class="doctag">@link</span> android.app.Activity&#125;, this is</span></span><br><span class="line"><span class="comment">         * the state when it is constructed but has not received</span></span><br><span class="line"><span class="comment">         * &#123;<span class="doctag">@link</span> android.app.Activity#onCreate(android.os.Bundle) onCreate&#125; yet.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        INITIALIZED,</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Created state for a LifecycleOwner. For an &#123;<span class="doctag">@link</span> android.app.Activity&#125;, this state</span></span><br><span class="line"><span class="comment">         * is reached in two cases:</span></span><br><span class="line"><span class="comment">         * &lt;ul&gt;</span></span><br><span class="line"><span class="comment">         *     &lt;li&gt;after &#123;<span class="doctag">@link</span> android.app.Activity#onCreate(android.os.Bundle) onCreate&#125; call;</span></span><br><span class="line"><span class="comment">         *     &lt;li&gt;&lt;b&gt;right before&lt;/b&gt; &#123;<span class="doctag">@link</span> android.app.Activity#onStop() onStop&#125; call.</span></span><br><span class="line"><span class="comment">         * &lt;/ul&gt;</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        CREATED,</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Started state for a LifecycleOwner. For an &#123;<span class="doctag">@link</span> android.app.Activity&#125;, this state</span></span><br><span class="line"><span class="comment">         * is reached in two cases:</span></span><br><span class="line"><span class="comment">         * &lt;ul&gt;</span></span><br><span class="line"><span class="comment">         *     &lt;li&gt;after &#123;<span class="doctag">@link</span> android.app.Activity#onStart() onStart&#125; call;</span></span><br><span class="line"><span class="comment">         *     &lt;li&gt;&lt;b&gt;right before&lt;/b&gt; &#123;<span class="doctag">@link</span> android.app.Activity#onPause() onPause&#125; call.</span></span><br><span class="line"><span class="comment">         * &lt;/ul&gt;</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        STARTED,</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Resumed state for a LifecycleOwner. For an &#123;<span class="doctag">@link</span> android.app.Activity&#125;, this state</span></span><br><span class="line"><span class="comment">         * is reached after &#123;<span class="doctag">@link</span> android.app.Activity#onResume() onResume&#125; is called.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        RESUMED;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Compares if this State is greater or equal to the given &#123;<span class="doctag">@code</span> state&#125;.</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> state State to compare with</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@return</span> true if this State is greater or equal to the given &#123;<span class="doctag">@code</span> state&#125;</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isAtLeast</span><span class="params">(@NonNull State state)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> compareTo(state) &gt;= <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>类可以通过向其方法添加注解来监控组件的生命周期状态。然后，可以通过调用 Lifecycle 类的 addObserver() 方法并传递观察者的实例来添加观察者，如以下示例中所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyObserver</span> <span class="keyword">implements</span> <span class="title">LifecycleObserver</span> </span>&#123;</span><br><span class="line">    <span class="meta">@OnLifecycleEvent</span>(Lifecycle.Event.ON_RESUME)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">connectListener</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@OnLifecycleEvent</span>(Lifecycle.Event.ON_PAUSE)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">disconnectListener</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">myLifecycleOwner.getLifecycle().addObserver(<span class="keyword">new</span> MyObserver());</span><br></pre></td></tr></table></figure><p>在上面的示例中，myLifecycleOwner 对象实现了 LifecycleOwner 接口 ,接下来讲一下LifecycleOwner接口：</p><h2 id="LifecycleOwner"><a href="#LifecycleOwner" class="headerlink" title="LifecycleOwner"></a>LifecycleOwner</h2><p>首先来看下LifecycleOwner接口的源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * A class that has an Android lifecycle. These events can be used by custom components to</span></span><br><span class="line"><span class="comment"> * handle lifecycle changes without implementing any code inside the Activity or the Fragment.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> Lifecycle</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SuppressWarnings</span>(&#123;<span class="string">"WeakerAccess"</span>, <span class="string">"unused"</span>&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">LifecycleOwner</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns the Lifecycle of the provider.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> The lifecycle of the provider.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@NonNull</span></span><br><span class="line">    <span class="function">Lifecycle <span class="title">getLifecycle</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Android源码中，Activity以及Fragment均实现了这个LifecycleOwner接口，这样使用就非常简单了，直接使用getLifecycle().addObserver(new MyObserver())就可以把Observer注册到Lifecycle上，自动感应生命周期了。</p><h2 id="生命周期自动感应原理解析"><a href="#生命周期自动感应原理解析" class="headerlink" title="生命周期自动感应原理解析"></a>生命周期自动感应原理解析</h2><p>那么问题来了，fragment或者activity是怎么把自身的生命周期分发给每一个Observer的呢？生命周期自动感应是怎么工作的呢？我们通过解析源码来找到答案。</p><p>查看SupportActivity的源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SupportActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> <span class="keyword">implements</span> <span class="title">LifecycleOwner</span>, <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> SimpleArrayMap&lt;Class&lt;? extends SupportActivity.ExtraData&gt;, </span><br><span class="line">    <span class="keyword">private</span> LifecycleRegistry mLifecycleRegistry = <span class="keyword">new</span> LifecycleRegistry(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SupportActivity</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(@Nullable Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        ReportFragment.injectIfNeededIn(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@CallSuper</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onSaveInstanceState</span><span class="params">(Bundle outState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mLifecycleRegistry.markState(State.CREATED);</span><br><span class="line">        <span class="keyword">super</span>.onSaveInstanceState(outState);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Lifecycle <span class="title">getLifecycle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.mLifecycleRegistry;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看出在activity的onCreate方法调用了一个方法： ReportFragment.injectIfNeededIn(activity)，接下来看下这个init做了什么事情：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReportFragment</span> <span class="keyword">extends</span> <span class="title">Fragment</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String REPORT_FRAGMENT_TAG = <span class="string">"android.arch.lifecycle"</span></span><br><span class="line">            + <span class="string">".LifecycleDispatcher.report_fragment_tag"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">injectIfNeededIn</span><span class="params">(Activity activity)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// ProcessLifecycleOwner should always correctly work and some activities may not extend</span></span><br><span class="line">        <span class="comment">// FragmentActivity from support lib, so we use framework fragments for activities</span></span><br><span class="line">        android.app.FragmentManager manager = activity.getFragmentManager();</span><br><span class="line">        <span class="keyword">if</span> (manager.findFragmentByTag(REPORT_FRAGMENT_TAG) == <span class="keyword">null</span>) &#123;</span><br><span class="line">            manager.beginTransaction().add(<span class="keyword">new</span> ReportFragment(), REPORT_FRAGMENT_TAG).commit();</span><br><span class="line">            <span class="comment">// Hopefully, we are the first to make a transaction.</span></span><br><span class="line">            manager.executePendingTransactions();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onActivityCreated</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onActivityCreated(savedInstanceState);</span><br><span class="line">        dispatchCreate(mProcessListener);</span><br><span class="line">        dispatch(Lifecycle.Event.ON_CREATE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStart</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onStart();</span><br><span class="line">        dispatchStart(mProcessListener);</span><br><span class="line">        dispatch(Lifecycle.Event.ON_START);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResume</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onResume();</span><br><span class="line">        dispatchResume(mProcessListener);</span><br><span class="line">        dispatch(Lifecycle.Event.ON_RESUME);</span><br><span class="line">    &#125;</span><br><span class="line">.....................</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onDestroy();</span><br><span class="line">        dispatch(Lifecycle.Event.ON_DESTROY);</span><br><span class="line">        <span class="comment">// just want to be sure that we won't leak reference to an activity</span></span><br><span class="line">        mProcessListener = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">dispatch</span><span class="params">(Lifecycle.Event event)</span> </span>&#123;</span><br><span class="line">        Activity activity = getActivity();</span><br><span class="line">        <span class="keyword">if</span> (activity <span class="keyword">instanceof</span> LifecycleRegistryOwner) &#123;</span><br><span class="line">            ((LifecycleRegistryOwner) activity).getLifecycle().handleLifecycleEvent(event);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (activity <span class="keyword">instanceof</span> LifecycleOwner) &#123;</span><br><span class="line">            Lifecycle lifecycle = ((LifecycleOwner) activity).getLifecycle();</span><br><span class="line">            <span class="keyword">if</span> (lifecycle <span class="keyword">instanceof</span> LifecycleRegistry) &#123;</span><br><span class="line">                ((LifecycleRegistry) lifecycle).handleLifecycleEvent(event);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个代码就比较清晰了：在activity上面挂了一个ReportFragment专门用来感应activity的生命周期，把activity的生命周期分发给activity里面的Lifecycle,其中activity里面的Lifecycle是一个LifecycleRegistry对象。通过这种方式就完成了activity生命周期到Lifecycle的转发。</p><blockquote><p>到这里大家可能会有一个疑问了：那么fragment的生命周期是怎么感应的呢？因为fragment的生命周期是可能比activity的生命周期要短的，这个我们从fragment源码中寻找答案：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">performStart</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ..........</span><br><span class="line">           <span class="keyword">this</span>.mLifecycleRegistry.handleLifecycleEvent(Event.ON_START);</span><br><span class="line">           <span class="keyword">if</span> (<span class="keyword">this</span>.mView != <span class="keyword">null</span>) &#123;</span><br><span class="line">               <span class="keyword">this</span>.mViewLifecycleRegistry.handleLifecycleEvent(Event.ON_START);</span><br><span class="line">           &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">performResume</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ..............</span><br><span class="line">           <span class="keyword">this</span>.mLifecycleRegistry.handleLifecycleEvent(Event.ON_RESUME);</span><br><span class="line">           <span class="keyword">if</span> (<span class="keyword">this</span>.mView != <span class="keyword">null</span>) &#123;</span><br><span class="line">               <span class="keyword">this</span>.mViewLifecycleRegistry.handleLifecycleEvent(Event.ON_RESUME);</span><br><span class="line">           &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>可以看出fragment中生命周期是主动转发的，主动调用LifecycleRegistry的方法进行转发。</p><p>至此，activity和fragment的生命周期转发机制已经了解清楚了，接下来我们看下LifecycleRegistry是怎么把生命周期进一步转发给LifecycleObserver的。</p><h3 id="LifecycleRegistry源码解析"><a href="#LifecycleRegistry源码解析" class="headerlink" title="LifecycleRegistry源码解析"></a>LifecycleRegistry源码解析</h3><p>上面说了activity和fragment里面都持有LifecycleRegistry,通过这个类来进行生命周期转发，接下来对LifecycleRegistry源码进行解析：</p><h4 id="添加观察者："><a href="#添加观察者：" class="headerlink" title="添加观察者："></a>添加观察者：</h4><p>添加观察者通过addObserver方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addObserver</span><span class="params">(@NonNull LifecycleObserver observer)</span> </span>&#123;</span><br><span class="line">    State initialState = mState == DESTROYED ? DESTROYED : INITIALIZED;</span><br><span class="line">    <span class="comment">//把传入的observer封装成一个ObserverWithState对象</span></span><br><span class="line">    ObserverWithState statefulObserver = <span class="keyword">new</span> ObserverWithState(observer, initialState);</span><br><span class="line">    ObserverWithState previous = mObserverMap.putIfAbsent(observer, statefulObserver);</span><br><span class="line">    <span class="comment">//如果之前已经有这个observer，就直接返回</span></span><br><span class="line">    <span class="keyword">if</span> (previous != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//获取到LifecycleOwner</span></span><br><span class="line">    LifecycleOwner lifecycleOwner = mLifecycleOwner.get();</span><br><span class="line">    <span class="keyword">if</span> (lifecycleOwner == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// it is null we should be destroyed. Fallback quickly</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**是否是可重入的，什么意思呢？这里有两个判断条件：</span></span><br><span class="line"><span class="comment">    1、mAddingObserverCounter ！=0，什么时候会满足这个条件呢，就是在下面的statefulObserver.dispatchEvent(lifecycleOwner, upEvent(statefulObserver.mState));方法里面可能又会调用addObserver,这次addObserver的时候这个mAddingObserverCounter就不为0了</span></span><br><span class="line"><span class="comment">    2、mHandlingEvent为true代表正在进行状态转移</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    isReentrance这个值主要是为了防止重复调用sync方法，在嵌套的情况下，保证只有最上层最后调用这个sync方法，这个下面也有注释说明</span></span><br><span class="line"><span class="comment">    **/</span></span><br><span class="line">    <span class="keyword">boolean</span> isReentrance = mAddingObserverCounter != <span class="number">0</span> || mHandlingEvent;</span><br><span class="line">    <span class="comment">//计算出目标的State</span></span><br><span class="line">    State targetState = calculateTargetState(observer);</span><br><span class="line">    mAddingObserverCounter++;</span><br><span class="line">    <span class="comment">//如果observer目前呢的state小于要转移的targetState,那么就要进行state转移，比如目前页面的state状态为CREATED,但是oberver.mState初始化的状态是INITIALIZED,那么就要把状态转移到CREATED</span></span><br><span class="line">    <span class="keyword">while</span> ((statefulObserver.mState.compareTo(targetState) &lt; <span class="number">0</span></span><br><span class="line">            &amp;&amp; mObserverMap.contains(observer))) &#123;</span><br><span class="line">        pushParentState(statefulObserver.mState);</span><br><span class="line">        <span class="comment">//upEvent方法就是把state转移到下一个生命周期Event，然后再把这个Event通知给oberver进行分发，然后在这个</span></span><br><span class="line">        <span class="comment">//statefulObserver内部会根据这个Event更新自己的mState</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//这里每次只能进行一个Event转移，就比如说现在页面的state状态为STARTED,那么就需要进行两次转移，也就是这个这个while循环会执行2次，相应的observer会先后收到ON_CREATE和ON_START回调</span></span><br><span class="line">        statefulObserver.dispatchEvent(lifecycleOwner, upEvent(statefulObserver.mState));</span><br><span class="line">        popParentState();</span><br><span class="line">        <span class="comment">//再次计算targetState,判断observer.mState是否达到了targetState,这里是一个while循环，直到达到了</span></span><br><span class="line">        <span class="comment">//targetState才会退出</span></span><br><span class="line">        targetState = calculateTargetState(observer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!isReentrance) &#123;</span><br><span class="line">        <span class="comment">// we do sync only on the top level.</span></span><br><span class="line">        <span class="comment">//把当前页面的state状态同步给所有的oberver</span></span><br><span class="line">        sync();</span><br><span class="line">    &#125;</span><br><span class="line">    mAddingObserverCounter--;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看出addObserver主要是分为几个步骤：</p><p>1、把传入的observer封装成一个ObserverWithState对象，保存到一个map里面，key值就是这个observer。我们来看下ObserverWithState的构造方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ObserverWithState</span> </span>&#123;</span><br><span class="line">    State mState;</span><br><span class="line">    GenericLifecycleObserver mLifecycleObserver;</span><br><span class="line"></span><br><span class="line">    ObserverWithState(LifecycleObserver observer, State initialState) &#123;</span><br><span class="line">        mLifecycleObserver = Lifecycling.getCallback(observer);</span><br><span class="line">        mState = initialState;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dispatchEvent</span><span class="params">(LifecycleOwner owner, Event event)</span> </span>&#123;</span><br><span class="line">        State newState = getStateAfter(event);</span><br><span class="line">        mState = min(mState, newState);</span><br><span class="line">        mLifecycleObserver.onStateChanged(owner, event);</span><br><span class="line">        mState = newState;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在构造方法里面会通过Lifecycling.getCallback(observer)方法把observer转换为一个GenericLifecycleObserver对象。刚刚上面说了类可以通过向其方法添加注解来监控组件的生命周期状态，这个Lifecycling.getCallback方法里面就是会去读取每个LifecycleObserver对象方法上面的注解，然后转换成对应的GenericLifecycleObserver：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> GenericLifecycleObserver <span class="title">getCallback</span><span class="params">(Object object)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (object <span class="keyword">instanceof</span> FullLifecycleObserver) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> FullLifecycleObserverAdapter((FullLifecycleObserver) object);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (object <span class="keyword">instanceof</span> GenericLifecycleObserver) &#123;</span><br><span class="line">        <span class="keyword">return</span> (GenericLifecycleObserver) object;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//根据注解生成对应的GenericLifecycleObserver ，一般不推荐这种方式</span></span><br><span class="line">    <span class="keyword">final</span> Class&lt;?&gt; klass = object.getClass();</span><br><span class="line">    <span class="keyword">int</span> type = getObserverConstructorType(klass);</span><br><span class="line">    <span class="keyword">if</span> (type == GENERATED_CALLBACK) &#123;</span><br><span class="line">        List&lt;Constructor&lt;? extends GeneratedAdapter&gt;&gt; constructors =</span><br><span class="line">                sClassToAdapters.get(klass);</span><br><span class="line">        <span class="keyword">if</span> (constructors.size() == <span class="number">1</span>) &#123;</span><br><span class="line">            GeneratedAdapter generatedAdapter = createGeneratedAdapter(</span><br><span class="line">                    constructors.get(<span class="number">0</span>), object);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> SingleGeneratedAdapterObserver(generatedAdapter);</span><br><span class="line">        &#125;</span><br><span class="line">        GeneratedAdapter[] adapters = <span class="keyword">new</span> GeneratedAdapter[constructors.size()];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; constructors.size(); i++) &#123;</span><br><span class="line">            adapters[i] = createGeneratedAdapter(constructors.get(i), object);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CompositeGeneratedAdaptersObserver(adapters);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ReflectiveGenericLifecycleObserver(object);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从上面代码也可以看出我们可以让我们自定义的LifecycleObserver直接实现FullLifecycleObserver或者GenericLifecycleObserver接口，如果没有实现这两个接口，继续往下走的话就是注解相关处理，然后包装生成对应的GenericLifecycleObserver子类，一般情况下不推荐这种方式，因为涉及到runtime反射，会有一定的性能开销。最佳操作是如果工程支持java8的话，可以实现DefaultLifecycleObserver接口,子类根据自身需求实现对应的方法（不得不说default真是个好东西啊～～）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DefaultLifecycleObserver</span> <span class="keyword">extends</span> <span class="title">FullLifecycleObserver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(@NonNull LifecycleOwner owner)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">onStart</span><span class="params">(@NonNull LifecycleOwner owner)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">onResume</span><span class="params">(@NonNull LifecycleOwner owner)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">onPause</span><span class="params">(@NonNull LifecycleOwner owner)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">onStop</span><span class="params">(@NonNull LifecycleOwner owner)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">(@NonNull LifecycleOwner owner)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ObserverWithState对象封装好了之后，继续往下走：</p><p>2、根据当前页面state对observer进行state转移，这里可能会涉及到多次转移</p><p>3、把当前页面的state状态同步给所有的oberver</p><h4 id="移除观察者"><a href="#移除观察者" class="headerlink" title="移除观察者"></a>移除观察者</h4><p>移除观察者通过removeObserver方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeObserver</span><span class="params">(@NonNull LifecycleObserver observer)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// we consciously decided not to send destruction events here in opposition to addObserver.</span></span><br><span class="line">    <span class="comment">// Our reasons for that:</span></span><br><span class="line">    <span class="comment">// 1. These events haven't yet happened at all. In contrast to events in addObservers, that</span></span><br><span class="line">    <span class="comment">// actually occurred but earlier.</span></span><br><span class="line">    <span class="comment">// 2. There are cases when removeObserver happens as a consequence of some kind of fatal</span></span><br><span class="line">    <span class="comment">// event. If removeObserver method sends destruction events, then a clean up routine becomes</span></span><br><span class="line">    <span class="comment">// more cumbersome. More specific example of that is: your LifecycleObserver listens for</span></span><br><span class="line">    <span class="comment">// a web connection, in the usual routine in OnStop method you report to a server that a</span></span><br><span class="line">    <span class="comment">// session has just ended and you close the connection. Now let's assume now that you</span></span><br><span class="line">    <span class="comment">// lost an internet and as a result you removed this observer. If you get destruction</span></span><br><span class="line">    <span class="comment">// events in removeObserver, you should have a special case in your onStop method that</span></span><br><span class="line">    <span class="comment">// checks if your web connection died and you shouldn't try to report anything to a server.</span></span><br><span class="line">    mObserverMap.remove(observer);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看出removeObserver只做了一件事，就是把observer从map里面移除。</p><h4 id="生命周期转发"><a href="#生命周期转发" class="headerlink" title="生命周期转发"></a>生命周期转发</h4><p>当生命周期发生改变的时候，会调用handleLifecycleEvent方法进行分发，里面调用moveToState方法进行状态转移，同步给所有的observer</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleLifecycleEvent</span><span class="params">(@NonNull Lifecycle.Event event)</span> </span>&#123;</span><br><span class="line">    State next = getStateAfter(event);</span><br><span class="line">    moveToState(next);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">moveToState</span><span class="params">(State next)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (mState == next) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    mState = next;</span><br><span class="line">    <span class="keyword">if</span> (mHandlingEvent || mAddingObserverCounter != <span class="number">0</span>) &#123;</span><br><span class="line">        mNewEventOccurred = <span class="keyword">true</span>;</span><br><span class="line">        <span class="comment">// we will figure out what to do on upper level.</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    mHandlingEvent = <span class="keyword">true</span>;</span><br><span class="line">    sync();</span><br><span class="line">    mHandlingEvent = <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过以上这3个方法就完成了生命周期-&gt;oberver的转发，实现了生命周期的自动监听实现。</p><h3 id="自定义LifecycleOwner"><a href="#自定义LifecycleOwner" class="headerlink" title="自定义LifecycleOwner"></a>自定义LifecycleOwner</h3><p>如果您有一个自定义类并希望使其成为 LifecycleOwner，您可以使用 LifecycleRegistry 类，但需要将事件转发到该类，如以下代码示例中所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> <span class="keyword">implements</span> <span class="title">LifecycleOwner</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> LifecycleRegistry lifecycleRegistry;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line"></span><br><span class="line">        lifecycleRegistry = <span class="keyword">new</span> LifecycleRegistry(<span class="keyword">this</span>);</span><br><span class="line">        lifecycleRegistry.markState(Lifecycle.State.CREATED);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStart</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onStart();</span><br><span class="line">        lifecycleRegistry.markState(Lifecycle.State.STARTED);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NonNull</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Lifecycle <span class="title">getLifecycle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> lifecycleRegistry;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>Lifecycle组件实际上就是对activity或者fragment的生命周期进行自动化监听，然后业务方根据自己的需求可以往Lifecycle组件里面在add或者remove监听，就是一种典型的观察者模式，去掉了以往需要直接在acivity和fragment的生命周期方法中显示调用组件对应方法的过程，让组件代码更有条理，也避免了activity和fragment的代码膨胀，提升代码的可维护性。</p>]]></content>
    
    <summary type="html">
    
      Android生命周期感应组件lifecycle
    
    </summary>
    
      <category term="Android架构学习" scheme="http://easyliu.com/categories/Android%E6%9E%B6%E6%9E%84%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Android" scheme="http://easyliu.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Android Jetpack简介</title>
    <link href="http://easyliu.com/2020/10/31/android_jetpack/jetpack_intro/"/>
    <id>http://easyliu.com/2020/10/31/android_jetpack/jetpack_intro/</id>
    <published>2020-10-31T07:31:26.000Z</published>
    <updated>2020-10-31T08:29:02.997Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Jetpack简介"><a href="#Jetpack简介" class="headerlink" title="Jetpack简介"></a>Jetpack简介</h2><p>Jetpack 是一个由多个库组成的套件，可帮助开发者遵循最佳做法，减少样板代码并编写可在各种 Android 版本和设备中一致运行的代码，让开发者精力集中编写重要的代码。</p><p>Jetpack 包含与平台 API 解除捆绑的 androidx.* 软件包库。这意味着，它可以提供向后兼容性，且比 Android 平台的更新频率更高，以此确保您始终可以获取最新且最好的 Jetpack 组件版本。</p><h2 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h2><h3 id="加速开发"><a href="#加速开发" class="headerlink" title="加速开发"></a>加速开发</h3><p>组件可以单独采用（不过这些组件是为协同工作而构建的），同时利用 Kotlin 语言功能帮助您提高工作效率。</p><h3 id="消除样板代码"><a href="#消除样板代码" class="headerlink" title="消除样板代码"></a>消除样板代码</h3><p>Android Jetpack 可管理繁琐的 Activity（如后台任务、导航和生命周期管理），以便您可以专注于如何让您的应用出类拔萃。</p><h3 id="构建高质量的强大应用"><a href="#构建高质量的强大应用" class="headerlink" title="构建高质量的强大应用"></a>构建高质量的强大应用</h3><p>Android Jetpack 组件围绕现代化设计实践构建而成，具有向后兼容性，可以减少崩溃和内存泄漏。</p><p>以下是jetpack包含的内容：<br><img src="/2020/10/31/android_jetpack/jetpack_intro/intro.png" alt="简介"></p><p><a href="https://developer.android.com/jetpack#foundation-components" target="_blank" rel="noopener">jetpack文档</a></p><p><a href="https://www.youtube.com/watch?v=LmkKFCfmnhQ&feature=youtu.be" target="_blank" rel="noopener">jetpack视频介绍</a></p><h2 id="Jetpack架构组件设计思路"><a href="#Jetpack架构组件设计思路" class="headerlink" title="Jetpack架构组件设计思路"></a>Jetpack架构组件设计思路</h2><p><a href="https://developer.android.com/jetpack/guide" target="_blank" rel="noopener">应用架构指南</a></p><h3 id="基于移动应用用户体验"><a href="#基于移动应用用户体验" class="headerlink" title="基于移动应用用户体验"></a>基于移动应用用户体验</h3><p>在大多数情况下，桌面应用会在桌面或程序启动器中有一个入口点，且作为一个单体式进程运行。Android 应用则不然，它们的结构要复杂得多。典型的 Android 应用包含多个应用组件，包括 Activity、Fragment、Service、内容提供程序和广播接收器。</p><p>您需要在应用清单中声明其中的大多数应用组件。Android 操作系统随后会使用此文件来决定如何将您的应用集成到设备的整体用户体验中。鉴于正确编写的 Android 应用包含多个组件，并且用户经常会在短时间内与多个应用进行互动，因此应用需要适应不同类型的用户驱动型工作流和任务。</p><p>例如，思考一下当您在自己喜欢的社交网络应用中分享照片时会发生什么：</p><ul><li><p>该应用将触发相机 intent。Android 操作系统随后会启动相机应用来处理请求。此时，用户已离开社交网络应用，但他们的体验仍然是无缝的。</p></li><li><p>相机应用可能会触发其他 intent（如启动文件选择器），而这可能会再启动一个应用。</p></li><li><p>最后，用户返回社交网络应用并分享照片。</p></li></ul><p>在此过程中，用户随时可能会被电话或通知打断。处理之后，用户希望能够返回并继续分享照片。这种应用跳跃行为在移动设备上很常见，因此您的应用必须正确处理这些流程。</p><p>请注意，移动设备的资源也很有限，因此操作系统可能会随时终止某些应用进程，以便为新的进程腾出空间。</p><p>鉴于这种环境条件，您的应用组件可以不按顺序地单独启动，并且操作系统或用户可以随时销毁它们。由于这些事件不受您的控制，因此您不应在应用组件中存储任何应用数据或状态，并且应用组件不应相互依赖。</p><h3 id="常见的架构原则"><a href="#常见的架构原则" class="headerlink" title="常见的架构原则"></a>常见的架构原则</h3><p>如果您不应使用应用组件存储应用数据和状态，那么您应该如何设计应用呢？</p><h3 id="关注分离点"><a href="#关注分离点" class="headerlink" title="关注分离点"></a>关注分离点</h3><p>要遵循的最重要的原则是分离关注点。一种常见的错误是在一个 Activity 或 Fragment 中编写所有代码。这些基于界面的类应仅包含处理界面和操作系统交互的逻辑。您应使这些类尽可能保持精简，这样可以避免许多与生命周期相关的问题。</p><p>请注意，您并非拥有 Activity 和 Fragment 的实现；它们只是表示 Android 操作系统与应用之间关系的粘合类。操作系统可能会根据用户互动或因内存不足等系统条件随时销毁它们。为了提供令人满意的用户体验和更易于管理的应用维护体验，您最好尽量减少对它们的依赖。</p><h3 id="通过模型驱动界面"><a href="#通过模型驱动界面" class="headerlink" title="通过模型驱动界面"></a>通过模型驱动界面</h3><p>另一个重要原则是您应该通过模型驱动界面（最好是持久性模型）。模型是负责处理应用数据的组件。它们独立于应用中的 View 对象和应用组件，因此不受应用的生命周期以及相关的关注点的影响。</p><p>持久性是理想之选，原因如下：</p><ul><li>如果 Android 操作系统销毁应用以释放资源，用户不会丢失数据。</li><li>当网络连接不稳定或不可用时，应用会继续工作。</li></ul><p>应用所基于的模型类应明确定义数据管理职责，这样将使应用更可测试且更一致。</p><p>基于以上讨论就演变出来了如何使用Jetpack架构组件构建应用，如下所示：<br><img src="/2020/10/31/android_jetpack/jetpack_intro/final-architecture.png" alt="推荐架构图"></p><p>请注意，每个组件仅依赖于其下一级的组件。例如，Activity 和 Fragment 仅依赖于视图模型。存储区是唯一依赖于其他多个类的类；在本例中，存储区依赖于持久性数据模型和远程后端数据源。</p><p>这种设计打造了一致且愉快的用户体验。无论用户上次使用应用是在几分钟前还是几天之前，现在回到应用时都会立即看到应用在本地保留的用户信息。如果此数据已过时，则应用的存储区模块将开始在后台更新数据。</p><h2 id="Jetpack架构组件介绍"><a href="#Jetpack架构组件介绍" class="headerlink" title="Jetpack架构组件介绍"></a>Jetpack架构组件介绍</h2><p><a href="https://developer.android.com/topic/libraries/architecture" target="_blank" rel="noopener">Jetpack架构组件</a></p><p>Android 架构组件是一组库，可帮助您设计稳健、可测试且易维护的应用。您可以从管理界面组件生命周期和处理数据持久性的类着手。</p><ul><li><p>通过应用架构指南，学习有关汇编稳健应用的基础知识。</p></li><li><p>管理应用的生命周期。新的生命周期感知型组件可帮助您管理 Activity 和 Fragment 的生命周期。在配置更改后继续有效、避免内存泄漏，以及轻松加载数据到界面中。</p></li><li><p>使用 LiveData 构建数据对象，在基础数据库改变时通知视图。</p></li><li><p>ViewModel 存储界面相关的数据，这些数据不会在应用轮转时销毁。</p></li><li><p>Room 是一个 SQLite 对象映射库。它可用来避免样板代码，并轻松地将 SQLite 表数据转换为 Java 对象。Room 提供 SQLite 语句的编译时检查，并且可以返回 RxJava、Flowable 和 LiveData 可观察对象。</p></li></ul><p>以上就是对Jetpack组件的介绍，接下来会对Jetpack里面的架构组件进行剖析讲解。</p>]]></content>
    
    <summary type="html">
    
      Android Jetpack简介
    
    </summary>
    
      <category term="Android架构学习" scheme="http://easyliu.com/categories/Android%E6%9E%B6%E6%9E%84%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Android" scheme="http://easyliu.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>android组件化</title>
    <link href="http://easyliu.com/2020/09/20/android_architecture/component/"/>
    <id>http://easyliu.com/2020/09/20/android_architecture/component/</id>
    <published>2020-09-19T16:21:14.000Z</published>
    <updated>2020-09-19T16:24:08.454Z</updated>
    
    <content type="html"><![CDATA[<h3 id="学习资料"><a href="#学习资料" class="headerlink" title="学习资料"></a>学习资料</h3><p><a href="https://www.jianshu.com/p/59822a7b2fad" target="_blank" rel="noopener">Android彻底组件化demo发布</a></p><p><a href="https://cloud.tencent.com/developer/article/1358359" target="_blank" rel="noopener">知乎 Android 客户端组件化实践</a></p><p><a href="https://mp.weixin.qq.com/s/6Q818XA5FaHd7jJMFBG60w" target="_blank" rel="noopener">微信Android模块化架构重构实践</a></p><h3 id="中心思想"><a href="#中心思想" class="headerlink" title="中心思想"></a>中心思想</h3><h5 id="1、代码解耦。如何将一个庞大的工程拆分成有机的整体？"><a href="#1、代码解耦。如何将一个庞大的工程拆分成有机的整体？" class="headerlink" title="1、代码解耦。如何将一个庞大的工程拆分成有机的整体？"></a>1、代码解耦。如何将一个庞大的工程拆分成有机的整体？</h5><h5 id="2、组件单独运行。每个组件都是一个完整的整体，如何让其单独运行和调试呢？"><a href="#2、组件单独运行。每个组件都是一个完整的整体，如何让其单独运行和调试呢？" class="headerlink" title="2、组件单独运行。每个组件都是一个完整的整体，如何让其单独运行和调试呢？"></a>2、组件单独运行。每个组件都是一个完整的整体，如何让其单独运行和调试呢？</h5><h5 id="3、数据传递。因为每个组件都会给其他组件提供的服务，那么主项目（Host）与组件、组件与组件之间如何传递数据？"><a href="#3、数据传递。因为每个组件都会给其他组件提供的服务，那么主项目（Host）与组件、组件与组件之间如何传递数据？" class="headerlink" title="3、数据传递。因为每个组件都会给其他组件提供的服务，那么主项目（Host）与组件、组件与组件之间如何传递数据？"></a>3、数据传递。因为每个组件都会给其他组件提供的服务，那么主项目（Host）与组件、组件与组件之间如何传递数据？</h5><h5 id="4、UI跳转。UI跳转可以认为是一种特殊的数据传递，在实现思路上有啥不同？"><a href="#4、UI跳转。UI跳转可以认为是一种特殊的数据传递，在实现思路上有啥不同？" class="headerlink" title="4、UI跳转。UI跳转可以认为是一种特殊的数据传递，在实现思路上有啥不同？"></a>4、UI跳转。UI跳转可以认为是一种特殊的数据传递，在实现思路上有啥不同？</h5><h5 id="5、组件的生命周期。我们的目标是可以做到对组件可以按需、动态的使用，因此就会涉及到组件加载、卸载和降维的生命周期。"><a href="#5、组件的生命周期。我们的目标是可以做到对组件可以按需、动态的使用，因此就会涉及到组件加载、卸载和降维的生命周期。" class="headerlink" title="5、组件的生命周期。我们的目标是可以做到对组件可以按需、动态的使用，因此就会涉及到组件加载、卸载和降维的生命周期。"></a>5、组件的生命周期。我们的目标是可以做到对组件可以按需、动态的使用，因此就会涉及到组件加载、卸载和降维的生命周期。</h5><h5 id="6、集成调试。在开发阶段如何做到按需的编译组件？一次调试中可能只有一两个组件参与集成，这样编译的时间就会大大降低，提高开发效率。"><a href="#6、集成调试。在开发阶段如何做到按需的编译组件？一次调试中可能只有一两个组件参与集成，这样编译的时间就会大大降低，提高开发效率。" class="headerlink" title="6、集成调试。在开发阶段如何做到按需的编译组件？一次调试中可能只有一两个组件参与集成，这样编译的时间就会大大降低，提高开发效率。"></a>6、集成调试。在开发阶段如何做到按需的编译组件？一次调试中可能只有一两个组件参与集成，这样编译的时间就会大大降低，提高开发效率。</h5><h5 id="7、代码隔离。组件之间的交互如果还是直接引用的话，那么组件之间根本没有做到解耦，如何从根本上避免组件之间的直接引用呢？也就是如何从根本上杜绝耦合的产生呢？只有做到这一点才是彻底的组件化。"><a href="#7、代码隔离。组件之间的交互如果还是直接引用的话，那么组件之间根本没有做到解耦，如何从根本上避免组件之间的直接引用呢？也就是如何从根本上杜绝耦合的产生呢？只有做到这一点才是彻底的组件化。" class="headerlink" title="7、代码隔离。组件之间的交互如果还是直接引用的话，那么组件之间根本没有做到解耦，如何从根本上避免组件之间的直接引用呢？也就是如何从根本上杜绝耦合的产生呢？只有做到这一点才是彻底的组件化。"></a>7、代码隔离。组件之间的交互如果还是直接引用的话，那么组件之间根本没有做到解耦，如何从根本上避免组件之间的直接引用呢？也就是如何从根本上杜绝耦合的产生呢？只有做到这一点才是彻底的组件化。</h5>]]></content>
    
    <summary type="html">
    
      android组件化
    
    </summary>
    
      <category term="Android架构学习" scheme="http://easyliu.com/categories/Android%E6%9E%B6%E6%9E%84%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Android" scheme="http://easyliu.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>2020.9-2020.12学习计划</title>
    <link href="http://easyliu.com/2020/09/20/study_plan/2020.9-2020.12/"/>
    <id>http://easyliu.com/2020/09/20/study_plan/2020.9-2020.12/</id>
    <published>2020-09-19T16:06:37.000Z</published>
    <updated>2020-11-01T14:25:19.658Z</updated>
    
    <content type="html"><![CDATA[<h2 id="学习计划"><a href="#学习计划" class="headerlink" title="学习计划"></a>学习计划</h2><p><img src="/2020/09/20/study_plan/2020.9-2020.12/study_plan.jpg" alt="study_plan"></p><h2 id="执行情况"><a href="#执行情况" class="headerlink" title="执行情况"></a>执行情况</h2><h3 id="组件化-已完成"><a href="#组件化-已完成" class="headerlink" title="组件化     已完成"></a>组件化     已完成</h3><h3 id="MVVM-学习中"><a href="#MVVM-学习中" class="headerlink" title="MVVM      学习中"></a>MVVM      <font color="Red">学习中</font></h3>]]></content>
    
    <summary type="html">
    
      2020.9-2020.12学习计划
    
    </summary>
    
      <category term="学习计划" scheme="http://easyliu.com/categories/%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/"/>
    
    
      <category term="学习计划" scheme="http://easyliu.com/tags/%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>学习路线</title>
    <link href="http://easyliu.com/2020/09/18/android/StudyPlan/"/>
    <id>http://easyliu.com/2020/09/18/android/StudyPlan/</id>
    <published>2020-09-18T03:38:59.000Z</published>
    <updated>2020-09-19T05:45:17.020Z</updated>
    
    <content type="html"><![CDATA[<h2 id="学习路线图"><a href="#学习路线图" class="headerlink" title="学习路线图"></a>学习路线图</h2><p><img src="/2020/09/18/android/StudyPlan/study_plan.png" alt="学习路线图"></p>]]></content>
    
    <summary type="html">
    
      学习路线
    
    </summary>
    
      <category term="学习计划" scheme="http://easyliu.com/categories/%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/"/>
    
    
      <category term="学习计划" scheme="http://easyliu.com/tags/%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>4、linkedList</title>
    <link href="http://easyliu.com/2020/07/12/algorithm/linkedList/"/>
    <id>http://easyliu.com/2020/07/12/algorithm/linkedList/</id>
    <published>2020-07-12T06:49:39.000Z</published>
    <updated>2020-07-18T10:02:34.864Z</updated>
    
    <content type="html"><![CDATA[<h2 id="链表结构体定义"><a href="#链表结构体定义" class="headerlink" title="链表结构体定义"></a>链表结构体定义</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ListNode</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    ListNode next;</span><br><span class="line"></span><br><span class="line">    ListNode(<span class="keyword">int</span> x) &#123;</span><br><span class="line">        val = x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> == o) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span> || getClass() != o.getClass()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ListNode listNode = (ListNode) o;</span><br><span class="line">        <span class="keyword">boolean</span> valueEqual = val == listNode.val;</span><br><span class="line">        <span class="keyword">boolean</span> nextEqual = (next == <span class="keyword">null</span> &amp;&amp; listNode.next == <span class="keyword">null</span>) || (next != <span class="keyword">null</span> &amp;&amp; next.equals(listNode.next));</span><br><span class="line">        <span class="keyword">return</span> valueEqual &amp;&amp; nextEqual;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Objects.hash(val, next);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="链表相关操作"><a href="#链表相关操作" class="headerlink" title="链表相关操作"></a>链表相关操作</h2><h3 id="创建链表"><a href="#创建链表" class="headerlink" title="创建链表"></a>创建链表</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 创建链表</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ListNode <span class="title">createList</span><span class="params">(<span class="keyword">int</span>[] arrays)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (arrays == <span class="keyword">null</span> || arrays.length &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ListNode head = <span class="keyword">null</span>;</span><br><span class="line">    ListNode cur = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> val : arrays) &#123;</span><br><span class="line">        ListNode newNode = <span class="keyword">new</span> ListNode(val);</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="keyword">null</span>) &#123;</span><br><span class="line">            head = newNode;</span><br><span class="line">            cur = head;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            cur.next = newNode;</span><br><span class="line">            cur = cur.next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="找到链表的最后一个节点"><a href="#找到链表的最后一个节点" class="headerlink" title="找到链表的最后一个节点"></a>找到链表的最后一个节点</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 找到最后一个节点</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ListNode <span class="title">findLastNode</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (head == <span class="keyword">null</span> || head.next == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">    ListNode lastNode = head;</span><br><span class="line">    <span class="keyword">while</span> (lastNode.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">        lastNode = lastNode.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> lastNode;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="删除一个节点"><a href="#删除一个节点" class="headerlink" title="删除一个节点"></a>删除一个节点</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 删除一个节点</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ListNode <span class="title">deleteNode</span><span class="params">(ListNode head, ListNode toDelete)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (toDelete == <span class="keyword">null</span> || head == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ListNode tmp;</span><br><span class="line">    <span class="keyword">if</span> (head.val == toDelete.val) &#123;</span><br><span class="line">        tmp = head;</span><br><span class="line">        head = head.next;</span><br><span class="line">        tmp.next = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">    ListNode cur = head;</span><br><span class="line">    <span class="keyword">while</span> (cur != <span class="keyword">null</span> &amp;&amp; cur.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (cur.next.val == toDelete.val) &#123;</span><br><span class="line">            tmp = cur.next;</span><br><span class="line">            cur.next = cur.next.next;</span><br><span class="line">            tmp.next = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cur = cur.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="插入链表"><a href="#插入链表" class="headerlink" title="插入链表"></a>插入链表</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 插入一个节点或者链表</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ListNode <span class="title">insertNode</span><span class="params">(ListNode head, ListNode toInsert, <span class="keyword">int</span> pos)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (pos &lt; <span class="number">0</span> || head == <span class="keyword">null</span> || toInsert == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    ListNode curNode = head;</span><br><span class="line">    <span class="keyword">if</span> (pos &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">while</span> (curNode.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">            curNode = curNode.next;</span><br><span class="line">            count++;</span><br><span class="line">            <span class="keyword">if</span> (count == pos) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (count == pos) &#123;</span><br><span class="line">        ListNode tmp = curNode.next;</span><br><span class="line">        curNode.next = toInsert;</span><br><span class="line">        <span class="comment">//找到insertNode的最后一个节点指向tmp</span></span><br><span class="line">        ListNode lastNodeOfInsertNode = findLastNode(toInsert);</span><br><span class="line">        lastNodeOfInsertNode.next = tmp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="反转链表"><a href="#反转链表" class="headerlink" title="反转链表"></a>反转链表</h3><h4 id="使用stack实现"><a href="#使用stack实现" class="headerlink" title="使用stack实现"></a>使用stack实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 反转链表，使用stack实现</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ListNode <span class="title">reverseListWithStack</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (head == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Stack&lt;ListNode&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">    stack.push(head);</span><br><span class="line">    <span class="keyword">while</span> (head.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">        stack.push(head.next);</span><br><span class="line">        head.next = head.next.next;</span><br><span class="line">    &#125;</span><br><span class="line">    ListNode newHead = stack.pop();</span><br><span class="line">    ListNode pNode = newHead;</span><br><span class="line">    <span class="keyword">while</span> (!stack.isEmpty()) &#123;</span><br><span class="line">        ListNode curNode = stack.pop();</span><br><span class="line">        pNode.next = curNode;</span><br><span class="line">        pNode = curNode;</span><br><span class="line">    &#125;</span><br><span class="line">    pNode.next = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">return</span> newHead;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="使用双向指针实现"><a href="#使用双向指针实现" class="headerlink" title="使用双向指针实现"></a>使用双向指针实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 反转链表，使用双指针实现</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ListNode <span class="title">reverseListWithDoublePointer</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">    ListNode tmp;</span><br><span class="line">    ListNode pre = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">while</span> (head != <span class="keyword">null</span>) &#123;</span><br><span class="line">        tmp = head.next;</span><br><span class="line">        head.next = pre;</span><br><span class="line">        pre = head;</span><br><span class="line">        head = tmp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> pre;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h2><h3 id="删除节点"><a href="#删除节点" class="headerlink" title="删除节点"></a>删除节点</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.easyliu.test.linklist;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Assert;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeleteNodeTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 自测用例：</span></span><br><span class="line"><span class="comment">     * 1、head为null</span></span><br><span class="line"><span class="comment">     * 2、要删除的节点为null</span></span><br><span class="line"><span class="comment">     * 3、删除头部的节点</span></span><br><span class="line"><span class="comment">     * 4、删除尾部的节点</span></span><br><span class="line"><span class="comment">     * 5、删除中间节点</span></span><br><span class="line"><span class="comment">     * 6、有多个val一样的节点，删除第一个相等的节点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testNullHead</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//arrange</span></span><br><span class="line">        <span class="comment">//act</span></span><br><span class="line">        ListNode result = ListOperate.deleteNode(<span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">        <span class="comment">//verify</span></span><br><span class="line">        Assert.assertNull(result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testNulToDeleteNode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//arrange</span></span><br><span class="line">        ListNode listNode = ListOperate.createList(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>, <span class="number">2</span>&#125;);</span><br><span class="line">        <span class="comment">//act</span></span><br><span class="line">        ListNode result = ListOperate.deleteNode(listNode, <span class="keyword">null</span>);</span><br><span class="line">        <span class="comment">//verify</span></span><br><span class="line">        Assert.assertNull(result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDeleteHeadNode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//arrange</span></span><br><span class="line">        ListNode head = ListOperate.createList(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>, <span class="number">2</span>&#125;);</span><br><span class="line">        ListNode toDeleteNode = ListOperate.createList(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>&#125;);</span><br><span class="line">        ListNode expectList = ListOperate.createList(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">2</span>&#125;);</span><br><span class="line">        <span class="comment">//act</span></span><br><span class="line">        ListNode result = ListOperate.deleteNode(head, toDeleteNode);</span><br><span class="line">        <span class="comment">//verify</span></span><br><span class="line">        Assert.assertEquals(expectList, result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDeleteTailNode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//arrange</span></span><br><span class="line">        ListNode head = ListOperate.createList(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>, <span class="number">2</span>&#125;);</span><br><span class="line">        ListNode toDeleteNode = ListOperate.createList(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">2</span>&#125;);</span><br><span class="line">        ListNode expectList = ListOperate.createList(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>&#125;);</span><br><span class="line">        <span class="comment">//act</span></span><br><span class="line">        ListNode result = ListOperate.deleteNode(head, toDeleteNode);</span><br><span class="line">        <span class="comment">//verify</span></span><br><span class="line">        Assert.assertEquals(expectList, result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDeleteMiddleNode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//arrange</span></span><br><span class="line">        ListNode head = ListOperate.createList(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;);</span><br><span class="line">        ListNode toDeleteNode = ListOperate.createList(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">2</span>&#125;);</span><br><span class="line">        ListNode expectList = ListOperate.createList(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>, <span class="number">3</span>&#125;);</span><br><span class="line">        <span class="comment">//act</span></span><br><span class="line">        ListNode result = ListOperate.deleteNode(head, toDeleteNode);</span><br><span class="line">        <span class="comment">//verify</span></span><br><span class="line">        Assert.assertEquals(expectList, result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDeleteRepeatNode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//arrange</span></span><br><span class="line">        ListNode head = ListOperate.createList(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>&#125;);</span><br><span class="line">        ListNode toDeleteNode = ListOperate.createList(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">2</span>&#125;);</span><br><span class="line">        ListNode expectList = ListOperate.createList(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;);</span><br><span class="line">        <span class="comment">//act</span></span><br><span class="line">        ListNode result = ListOperate.deleteNode(head, toDeleteNode);</span><br><span class="line">        <span class="comment">//verify</span></span><br><span class="line">        Assert.assertEquals(expectList, result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="插入节点"><a href="#插入节点" class="headerlink" title="插入节点"></a>插入节点</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.easyliu.test.linklist;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Assert;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InsertNodeTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 自测用例</span></span><br><span class="line"><span class="comment">     * 1、pos小于0</span></span><br><span class="line"><span class="comment">     * 2、head为null</span></span><br><span class="line"><span class="comment">     * 3、toInsertNode为null</span></span><br><span class="line"><span class="comment">     * 4、pos=0</span></span><br><span class="line"><span class="comment">     * 5、pos为size-1</span></span><br><span class="line"><span class="comment">     * 6、pos&gt;0&amp;&amp;pos&lt;size-1</span></span><br><span class="line"><span class="comment">     * 7、toInsert有多个节点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testNullHead</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//arrange</span></span><br><span class="line">        <span class="comment">//act</span></span><br><span class="line">        ListNode result = ListOperate.insertNode(<span class="keyword">null</span>, <span class="keyword">null</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="comment">//verify</span></span><br><span class="line">        Assert.assertNull(result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testNegativePos</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//arrange</span></span><br><span class="line">        ListNode listNode = ListOperate.createList(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;);</span><br><span class="line">        <span class="comment">//act</span></span><br><span class="line">        ListNode result = ListOperate.insertNode(listNode, <span class="keyword">null</span>, -<span class="number">1</span>);</span><br><span class="line">        <span class="comment">//verify</span></span><br><span class="line">        Assert.assertEquals(listNode, result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testNullInsertNode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//arrange</span></span><br><span class="line">        ListNode listNode = ListOperate.createList(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;);</span><br><span class="line">        <span class="comment">//act</span></span><br><span class="line">        ListNode result = ListOperate.insertNode(listNode, <span class="keyword">null</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="comment">//verify</span></span><br><span class="line">        Assert.assertEquals(listNode, result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testZeroPos</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//arrange</span></span><br><span class="line">        ListNode listNode = ListOperate.createList(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;);</span><br><span class="line">        ListNode insertNode = ListOperate.createList(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>&#125;);</span><br><span class="line">        ListNode expectList = ListOperate.createList(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;);</span><br><span class="line">        <span class="comment">//act</span></span><br><span class="line">        ListNode result = ListOperate.insertNode(listNode, insertNode, <span class="number">0</span>);</span><br><span class="line">        <span class="comment">//verify</span></span><br><span class="line">        Assert.assertEquals(expectList, result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testMaxPos</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//arrange</span></span><br><span class="line">        ListNode listNode = ListOperate.createList(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;);</span><br><span class="line">        ListNode insertNode = ListOperate.createList(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>&#125;);</span><br><span class="line">        ListNode expectList = ListOperate.createList(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>&#125;);</span><br><span class="line">        <span class="comment">//act</span></span><br><span class="line">        ListNode result = ListOperate.insertNode(listNode, insertNode, <span class="number">2</span>);</span><br><span class="line">        <span class="comment">//verify</span></span><br><span class="line">        Assert.assertEquals(expectList, result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testMiddlePos</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//arrange</span></span><br><span class="line">        ListNode listNode = ListOperate.createList(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;);</span><br><span class="line">        ListNode insertNode = ListOperate.createList(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>&#125;);</span><br><span class="line">        ListNode expectList = ListOperate.createList(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>&#125;);</span><br><span class="line">        <span class="comment">//act</span></span><br><span class="line">        ListNode result = ListOperate.insertNode(listNode, insertNode, <span class="number">1</span>);</span><br><span class="line">        <span class="comment">//verify</span></span><br><span class="line">        Assert.assertEquals(expectList, result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testMultiNodeOfInsert</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//arrange</span></span><br><span class="line">        ListNode listNode = ListOperate.createList(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;);</span><br><span class="line">        ListNode insertNode = ListOperate.createList(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>&#125;);</span><br><span class="line">        ListNode expectList = ListOperate.createList(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">3</span>&#125;);</span><br><span class="line">        <span class="comment">//act</span></span><br><span class="line">        ListNode result = ListOperate.insertNode(listNode, insertNode, <span class="number">1</span>);</span><br><span class="line">        <span class="comment">//verify</span></span><br><span class="line">        Assert.assertEquals(expectList, result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="反转链表-1"><a href="#反转链表-1" class="headerlink" title="反转链表"></a>反转链表</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.easyliu.test.linklist;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Assert;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReverseListTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testNullInput</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//arrange</span></span><br><span class="line">        ListNode head = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">//act</span></span><br><span class="line">        ListNode result = ListOperate.reverseListWithStack(head);</span><br><span class="line">        ListNode doubleResult = ListOperate.reverseListWithDoublePointer(head);</span><br><span class="line">        <span class="comment">//verify</span></span><br><span class="line">        Assert.assertNull(result);</span><br><span class="line">        Assert.assertNull(doubleResult);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSingleNodeNormal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//arrange</span></span><br><span class="line">        ListNode listOne = ListOperate.createList(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>&#125;);</span><br><span class="line">        ListNode listTwo = ListOperate.createList(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>&#125;);</span><br><span class="line">        <span class="comment">//act</span></span><br><span class="line">        ListNode result = ListOperate.reverseListWithStack(listOne);</span><br><span class="line">        ListNode doubleResult = ListOperate.reverseListWithDoublePointer(listTwo);</span><br><span class="line">        <span class="comment">//verify</span></span><br><span class="line">        ListNode expect = ListOperate.createList(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>&#125;);</span><br><span class="line">        Assert.assertEquals(expect, result);</span><br><span class="line">        Assert.assertEquals(expect, doubleResult);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testNormal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//arrange</span></span><br><span class="line">        ListNode listOne = ListOperate.createList(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;);</span><br><span class="line">        ListNode listTwo = ListOperate.createList(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;);</span><br><span class="line">        <span class="comment">//act</span></span><br><span class="line">        ListNode result = ListOperate.reverseListWithStack(listOne);</span><br><span class="line">        ListNode doubleResult = ListOperate.reverseListWithDoublePointer(listTwo);</span><br><span class="line">        <span class="comment">//verify</span></span><br><span class="line">        ListNode expect = ListOperate.createList(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>&#125;);</span><br><span class="line">        Assert.assertEquals(expect, result);</span><br><span class="line">        Assert.assertEquals(expect, doubleResult);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      链表相关操作
    
    </summary>
    
      <category term="刷题" scheme="http://easyliu.com/categories/%E5%88%B7%E9%A2%98/"/>
    
    
      <category term="算法" scheme="http://easyliu.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>3、SecondArrayFind</title>
    <link href="http://easyliu.com/2020/06/18/algorithm/SecondArrayFind/"/>
    <id>http://easyliu.com/2020/06/18/algorithm/SecondArrayFind/</id>
    <published>2020-06-18T03:40:08.000Z</published>
    <updated>2020-07-12T07:02:12.659Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>在一个二维数组中（每个一维数组的长度相同），每一行都按照从左到右递增的顺序排序，<br>每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。</p><h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h3><p>int[][] inputArray = { {1, 2, 3}, {4, 5, 6}, {7, 8, 9} };<br>int target = 6;</p><h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><p>true</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecondArrayFind</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">secondArrayFindTarget</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span>[][] inputArray, <span class="keyword">final</span> <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (inputArray == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (inputArray[<span class="number">0</span>] == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> rowSize = inputArray.length;</span><br><span class="line">        <span class="keyword">int</span> columnSize = inputArray[<span class="number">0</span>].length;</span><br><span class="line">        <span class="keyword">int</span> row = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> column = columnSize - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (column &gt;= <span class="number">0</span> &amp;&amp; row &lt; rowSize) &#123;</span><br><span class="line">            <span class="keyword">int</span> curValue = inputArray[row][column];</span><br><span class="line">            <span class="keyword">if</span> (curValue &lt; target) &#123;</span><br><span class="line">                row++;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (curValue &gt; target) &#123;</span><br><span class="line">                column--;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> column &gt;= <span class="number">0</span> &amp;&amp; row &lt; rowSize;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecondArrayFindTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testNullInput</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Assert.assertFalse(SecondArrayFind.secondArrayFindTarget(<span class="keyword">null</span>, <span class="number">100</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testNormalFound</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[][] inputArray = &#123;&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;, &#123;<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;, &#123;<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>&#125;&#125;;</span><br><span class="line">        <span class="keyword">int</span> target = <span class="number">6</span>;</span><br><span class="line">        Assert.assertTrue(SecondArrayFind.secondArrayFindTarget(inputArray, target));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testNormalNotFound</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[][] inputArray = &#123;&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;, &#123;<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>&#125;, &#123;<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>&#125;&#125;;</span><br><span class="line">        <span class="keyword">int</span> target = <span class="number">5</span>;</span><br><span class="line">        Assert.assertFalse(SecondArrayFind.secondArrayFindTarget(inputArray, target));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      二维排序数组中查找对应的数字
    
    </summary>
    
      <category term="刷题" scheme="http://easyliu.com/categories/%E5%88%B7%E9%A2%98/"/>
    
    
      <category term="算法" scheme="http://easyliu.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>2、findFirstOneTimeChar</title>
    <link href="http://easyliu.com/2020/06/10/algorithm/findFirstOneTimeChar/"/>
    <id>http://easyliu.com/2020/06/10/algorithm/findFirstOneTimeChar/</id>
    <published>2020-06-10T03:00:22.000Z</published>
    <updated>2020-07-12T07:01:57.441Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>请实现一个函数，输入一个字符串，找出第一个只出现一次的字符。</p><h5 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h5><p>“asdfasdfo”</p><h5 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h5><p>‘o’</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">char</span> <span class="title">findFirstOneTimeChar</span><span class="params">(String input)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (input == <span class="keyword">null</span> || input.length() &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">char</span>[] chars = input.toCharArray();</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span>[] numArray = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">256</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">char</span> curChar : chars) &#123;</span><br><span class="line">        numArray[curChar]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">char</span> curChar : chars) &#123;</span><br><span class="line">        <span class="keyword">if</span> (numArray[curChar] == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> curChar;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FindFirstOneTimeCharTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testNulInput</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Assert.assertEquals(FindFirstOneTimeChar.findFirstOneTimeChar(<span class="keyword">null</span>), <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testEmptyInput</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Assert.assertEquals(FindFirstOneTimeChar.findFirstOneTimeChar(<span class="string">""</span>), <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSpaceInput</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Assert.assertEquals(FindFirstOneTimeChar.findFirstOneTimeChar(<span class="string">" "</span>), <span class="string">' '</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testNormalInput</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String input = <span class="string">"asdfasdfo"</span>;</span><br><span class="line">        <span class="keyword">char</span> expect = <span class="string">'o'</span>;</span><br><span class="line">        <span class="keyword">char</span> result = FindFirstOneTimeChar.findFirstOneTimeChar(input);</span><br><span class="line">        Assert.assertEquals(expect, result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      找到第一个只出现一次的字符
    
    </summary>
    
      <category term="刷题" scheme="http://easyliu.com/categories/%E5%88%B7%E9%A2%98/"/>
    
    
      <category term="算法" scheme="http://easyliu.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>1、replaceSpace</title>
    <link href="http://easyliu.com/2020/06/07/algorithm/repalceSpace/"/>
    <id>http://easyliu.com/2020/06/07/algorithm/repalceSpace/</id>
    <published>2020-06-07T07:37:57.000Z</published>
    <updated>2020-07-12T07:01:48.844Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>请实现一个函数，把字符串中的每个空格替换为”%20”。</p><h5 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h5><p>“We are happy”</p><h5 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h5><p>“We%20are%20happy”</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">replaceSpace</span><span class="params">(String input)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (input == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="string">""</span>.equals(input)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//计算空格的个数</span></span><br><span class="line">    <span class="keyword">char</span>[] chars = input.toCharArray();</span><br><span class="line">    <span class="keyword">int</span> numOfSpace = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">char</span> curChar : chars) &#123;</span><br><span class="line">        <span class="keyword">if</span> (curChar == <span class="string">' '</span>) &#123;</span><br><span class="line">            numOfSpace++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//创建一个新的字符数组</span></span><br><span class="line">    <span class="keyword">char</span>[] newChars = <span class="keyword">new</span> <span class="keyword">char</span>[chars.length + numOfSpace * <span class="number">2</span>];</span><br><span class="line">    <span class="keyword">int</span> indexOfNewChar = -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">char</span> curChar : chars) &#123;</span><br><span class="line">        <span class="keyword">if</span> (curChar != <span class="string">' '</span>) &#123;</span><br><span class="line">            newChars[++indexOfNewChar] = curChar;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            newChars[++indexOfNewChar] = <span class="string">'%'</span>;</span><br><span class="line">            newChars[++indexOfNewChar] = <span class="string">'2'</span>;</span><br><span class="line">            newChars[++indexOfNewChar] = <span class="string">'0'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> String.valueOf(newChars);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.easyliu.test.replace_space;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Assert;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReplaceSpaceTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testNullInput</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Assert.assertNull(ReplaceSpace.replaceSpace(<span class="keyword">null</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testEmptyInput</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Assert.assertNull(ReplaceSpace.replaceSpace(<span class="string">""</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testNormalSpace</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String expect = <span class="string">"we%20are%20happy"</span>;</span><br><span class="line">        String result = ReplaceSpace.replaceSpace(<span class="string">"we are happy"</span>);</span><br><span class="line">        Assert.assertEquals(expect, result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testMultiSpace</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String expect = <span class="string">"we%20%20are%20%20happy"</span>;</span><br><span class="line">        String result = ReplaceSpace.replaceSpace(<span class="string">"we  are  happy"</span>);</span><br><span class="line">        Assert.assertEquals(expect, result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSingleSpace</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String expect = <span class="string">"%20"</span>;</span><br><span class="line">        String result = ReplaceSpace.replaceSpace(<span class="string">" "</span>);</span><br><span class="line">        Assert.assertEquals(expect, result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testNoSpace</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String expect = <span class="string">"we"</span>;</span><br><span class="line">        String result = ReplaceSpace.replaceSpace(<span class="string">"we"</span>);</span><br><span class="line">        Assert.assertEquals(expect, result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      替换空格
    
    </summary>
    
      <category term="刷题" scheme="http://easyliu.com/categories/%E5%88%B7%E9%A2%98/"/>
    
    
      <category term="算法" scheme="http://easyliu.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Android studio 快捷键</title>
    <link href="http://easyliu.com/2020/05/30/android/as_shortcut/"/>
    <id>http://easyliu.com/2020/05/30/android/as_shortcut/</id>
    <published>2020-05-30T03:38:43.000Z</published>
    <updated>2020-05-30T04:33:49.100Z</updated>
    
    <content type="html"><![CDATA[<h2 id="重构快捷键"><a href="#重构快捷键" class="headerlink" title="重构快捷键"></a>重构快捷键</h2><p>shift+alt+M 选中抽取方法<br>ctrl+alt+c 抽取常量</p>]]></content>
    
    <summary type="html">
    
      Android studio 快捷键
    
    </summary>
    
      <category term="开发工具" scheme="http://easyliu.com/categories/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="android" scheme="http://easyliu.com/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>java代码规范</title>
    <link href="http://easyliu.com/2020/05/26/code/java_code_style/"/>
    <id>http://easyliu.com/2020/05/26/code/java_code_style/</id>
    <published>2020-05-26T13:31:58.000Z</published>
    <updated>2020-05-30T04:27:58.837Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1、减少嵌套层级，提前返回"><a href="#1、减少嵌套层级，提前返回" class="headerlink" title="1、减少嵌套层级，提前返回"></a>1、减少嵌套层级，提前返回</h3><h3 id="2、一行不大于100个字符"><a href="#2、一行不大于100个字符" class="headerlink" title="2、一行不大于100个字符"></a>2、一行不大于100个字符</h3><h3 id="3、函数参数个数不宜过多，太多了考虑抽象成类"><a href="#3、函数参数个数不宜过多，太多了考虑抽象成类" class="headerlink" title="3、函数参数个数不宜过多，太多了考虑抽象成类"></a>3、函数参数个数不宜过多，太多了考虑抽象成类</h3><h3 id="4、private成员变量以m为前缀"><a href="#4、private成员变量以m为前缀" class="headerlink" title="4、private成员变量以m为前缀"></a>4、private成员变量以m为前缀</h3><h3 id="5、常量为全大写，以下划线拼接"><a href="#5、常量为全大写，以下划线拼接" class="headerlink" title="5、常量为全大写，以下划线拼接"></a>5、常量为全大写，以下划线拼接</h3><h3 id="6、静态成员变量以s为前缀"><a href="#6、静态成员变量以s为前缀" class="headerlink" title="6、静态成员变量以s为前缀"></a>6、静态成员变量以s为前缀</h3><h3 id="7、单个函数行数不宜过多，超过20-line就考虑抽取函数"><a href="#7、单个函数行数不宜过多，超过20-line就考虑抽取函数" class="headerlink" title="7、单个函数行数不宜过多，超过20 line就考虑抽取函数"></a>7、单个函数行数不宜过多，超过20 line就考虑抽取函数</h3><h3 id="8、经常进行重构"><a href="#8、经常进行重构" class="headerlink" title="8、经常进行重构"></a>8、经常进行重构</h3><h3 id="9、时常考虑抽象、封装、多态"><a href="#9、时常考虑抽象、封装、多态" class="headerlink" title="9、时常考虑抽象、封装、多态"></a>9、时常考虑抽象、封装、多态</h3><h3 id="10、命名规则：精简但能清楚表达语义"><a href="#10、命名规则：精简但能清楚表达语义" class="headerlink" title="10、命名规则：精简但能清楚表达语义"></a>10、命名规则：精简但能清楚表达语义</h3><h3 id="11、写函数的时候从方便单测的角度进行考虑，进行单测覆盖"><a href="#11、写函数的时候从方便单测的角度进行考虑，进行单测覆盖" class="headerlink" title="11、写函数的时候从方便单测的角度进行考虑，进行单测覆盖"></a>11、写函数的时候从方便单测的角度进行考虑，进行单测覆盖</h3>]]></content>
    
    <summary type="html">
    
      java代码规范
    
    </summary>
    
      <category term="代码规范" scheme="http://easyliu.com/categories/%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83/"/>
    
    
      <category term="代码规范" scheme="http://easyliu.com/tags/%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83/"/>
    
  </entry>
  
  <entry>
    <title>xcode快捷键</title>
    <link href="http://easyliu.com/2020/05/17/ios/xcode_shortcut/"/>
    <id>http://easyliu.com/2020/05/17/ios/xcode_shortcut/</id>
    <published>2020-05-17T09:34:22.000Z</published>
    <updated>2020-05-30T05:15:02.829Z</updated>
    
    <content type="html"><![CDATA[<p>1、cmd+shift+j  在左边文件管理区定位到当前文件</p><p>2、cmd+shift+o 快速查找某个类，对应Android studio开发的话是shift+shift</p><p>3、ctrl+cmd+往左箭头或者往右箭头  光标返回到上一个选中的位置或者下一个选中的位置</p>]]></content>
    
    <summary type="html">
    
      xcode快捷键
    
    </summary>
    
      <category term="ios开发" scheme="http://easyliu.com/categories/ios%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="ios开发" scheme="http://easyliu.com/tags/ios%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>PowerMockIo单元测试基础语法</title>
    <link href="http://easyliu.com/2020/05/17/unit_test/unit_test/"/>
    <id>http://easyliu.com/2020/05/17/unit_test/unit_test/</id>
    <published>2020-05-17T09:05:17.000Z</published>
    <updated>2020-05-17T09:14:52.356Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1、使用verifyPrivate来验证私有方法被调用"><a href="#1、使用verifyPrivate来验证私有方法被调用" class="headerlink" title="1、使用verifyPrivate来验证私有方法被调用"></a>1、使用verifyPrivate来验证私有方法被调用</h3><p>//arrange<br>SeeVideoBoardTopStartVM fakeVm = PowerMockito.mock(SeeVideoBoardTopStartVM.class);<br>Whitebox.setInternalState(mTestVm, “mSeeVideoBoardTopVM”, fakeVm);<br>//act<br>Whitebox.invokeMethod(mTestVm, “resetPlayer”);<br>//assert<br>PowerMockito.verifyPrivate(mTestVm).invoke(“setPlayStatus”, IUpdatePlayStatus.BEFORE);<br>PowerMockito.verifyPrivate(fakeVm).invoke(“onUnbindView”);</p><h3 id="2、PowerMockIo来mock静态方法："><a href="#2、PowerMockIo来mock静态方法：" class="headerlink" title="2、PowerMockIo来mock静态方法："></a>2、PowerMockIo来mock静态方法：</h3><p>PowerMockito.mockStatic(AdaptiveUI.class);<br>PowerMockito.when(AdaptiveUI.getCurUISizeType(Mockito.any(Context.class))).thenReturn(UISizeType.REGULAR);</p><h3 id="3、调用private方法"><a href="#3、调用private方法" class="headerlink" title="3、调用private方法"></a>3、调用private方法</h3><p>boolean result = Whitebox.invokeMethod(mBasePBSectionController, MOCK_METHOD, section);<br>Assert.assertFalse(result);</p><h3 id="4、模拟私有方法"><a href="#4、模拟私有方法" class="headerlink" title="4、模拟私有方法"></a>4、模拟私有方法</h3><p>PowerMockito.when(mockPrivateClass, “privateFunc”).thenReturn(“test”);</p><h3 id="5、mock公有方法"><a href="#5、mock公有方法" class="headerlink" title="5、mock公有方法"></a>5、mock公有方法</h3><p>PowerMockito.when(mTestVm.getTextViewWidth()).thenReturn(FAKE_TEXT_WIDTH);</p><h3 id="6、设置私有成员变量"><a href="#6、设置私有成员变量" class="headerlink" title="6、设置私有成员变量"></a>6、设置私有成员变量</h3><p>Whitebox.setInternalState(mTestVm, “mSeeVideoBoardTopVM”, fakeVm);</p><h3 id="7、当你需要使用PowerMock强大功能（Mock静态、final、私有方法等）的时候，就需要加注解-PrepareForTest"><a href="#7、当你需要使用PowerMock强大功能（Mock静态、final、私有方法等）的时候，就需要加注解-PrepareForTest" class="headerlink" title="7、当你需要使用PowerMock强大功能（Mock静态、final、私有方法等）的时候，就需要加注解@PrepareForTest"></a>7、当你需要使用PowerMock强大功能（Mock静态、final、私有方法等）的时候，就需要加注解@PrepareForTest</h3><h3 id="8、如果一个对象，只希望mock它的部分方法，而其他方法希望和真实对象的行为一眼，可以使用PowerMockito-spy-Class-clazz-代替PowerMockito-mock-Class-clazz-方法，"><a href="#8、如果一个对象，只希望mock它的部分方法，而其他方法希望和真实对象的行为一眼，可以使用PowerMockito-spy-Class-clazz-代替PowerMockito-mock-Class-clazz-方法，" class="headerlink" title="8、如果一个对象，只希望mock它的部分方法，而其他方法希望和真实对象的行为一眼，可以使用PowerMockito.spy(Class clazz)代替PowerMockito.mock(Class clazz)方法，"></a>8、如果一个对象，只希望mock它的部分方法，而其他方法希望和真实对象的行为一眼，可以使用PowerMockito.spy(Class<t> clazz)代替PowerMockito.mock(Class<t> clazz)方法，</t></t></h3><p>其后的设置依旧，这时，没有通过when设置过的方法，测试调用时，行为和真实对象一样</p>]]></content>
    
    <summary type="html">
    
      PowerMockIo单元测试基础语法
    
    </summary>
    
      <category term="单元测试" scheme="http://easyliu.com/categories/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="单元测试" scheme="http://easyliu.com/tags/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>Gradle基础之Grovy语法</title>
    <link href="http://easyliu.com/2018/02/11/android/Gradle%E5%9F%BA%E7%A1%80%E4%B9%8BGrovy%E8%AF%AD%E6%B3%95/"/>
    <id>http://easyliu.com/2018/02/11/android/Gradle基础之Grovy语法/</id>
    <published>2018-02-11T15:56:14.000Z</published>
    <updated>2018-02-11T16:37:38.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Gradle基础之Groovy语法"><a href="#Gradle基础之Groovy语法" class="headerlink" title="Gradle基础之Groovy语法"></a>Gradle基础之Groovy语法</h3><p>在使用Android Studio开发app的过程中，都会接触到Gradle配置，而Gradle的配置是基于Grovvy语法的。因此，要想熟练的使用Gradle进行配置，就必须熟悉Groovy语法，下面开始讲解下Groovy的基本语法。</p><p>Groovy可以看作是java的加强版，扩展了java的语法，拥有自己的一些特性。</p><p><a href="http://www.groovy-lang.org/syntax.html" target="_blank" rel="noopener">Groovy语法官方文档</a></p><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><h4 id="单行注释"><a href="#单行注释" class="headerlink" title="单行注释"></a>单行注释</h4><p>单行注释如下所示，跟java一样：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// a standalone single line comment</span></span><br><span class="line">println <span class="string">"hello"</span> <span class="comment">// a comment till the end of the line</span></span><br></pre></td></tr></table></figure><h4 id="多行注释"><a href="#多行注释" class="headerlink" title="多行注释"></a>多行注释</h4><p>多行注释如下所示，跟java一样：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* a standalone multiline comment</span></span><br><span class="line"><span class="comment">   spanning two lines */</span></span><br><span class="line">println <span class="string">"hello"</span> <span class="comment">/* a multiline comment starting</span></span><br><span class="line"><span class="comment">                   at the end of a statement */</span></span><br><span class="line">println <span class="number">1</span> <span class="comment">/* one */</span> + <span class="number">2</span> <span class="comment">/* two */</span></span><br></pre></td></tr></table></figure><h4 id="GroovyDoc-注释"><a href="#GroovyDoc-注释" class="headerlink" title="GroovyDoc 注释"></a>GroovyDoc 注释</h4><p>GroovyDoc跟javaDoc语法也是一样的，如下所示：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * A Class description</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> &#123;</span></span><br><span class="line">    <span class="comment">/** the name of the person */</span></span><br><span class="line">    String name</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Creates a greeting method for a certain person.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> otherPerson the person to greet</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> a greeting message</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    String greet(String otherPerson) &#123;</span><br><span class="line">       <span class="string">"Hello $&#123;otherPerson&#125;"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Shebang-line"><a href="#Shebang-line" class="headerlink" title="Shebang line"></a>Shebang line</h4><p>除了单行注释，还有一种特殊的单行注释，如下所示，叫做Shebang line（各位可以自行去翻译）。这行注释主要是便于unix理解，有了这行注释就可以直接在命令行运行groovy脚本文件啦。当然前提是电脑上要安装了Groovy，且要把Groovy加入path环境变量，注意这种注释中#必须是第一个字符，否则会报编译错误。</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env groovy</span></span><br><span class="line">println <span class="string">"Hello from the shebang line"</span></span><br></pre></td></tr></table></figure><h3 id="Groovy关键字"><a href="#Groovy关键字" class="headerlink" title="Groovy关键字"></a>Groovy关键字</h3><p>Groovy语法的关键字如下所示：</p><table><thead><tr><th>as</th><th align="center">assert</th><th align="center">break</th><th align="center">finally</th><th align="center">implements</th><th align="center">new</th><th align="center">switch</th><th align="right">trait</th></tr></thead><tbody><tr><td>case</td><td align="center">catch</td><td align="center">class</td><td align="center">false</td><td align="center">import</td><td align="center">null符号</td><td align="center">switch</td><td align="right">true</td></tr><tr><td>const</td><td align="center">continue</td><td align="center">def</td><td align="center">for</td><td align="center">in</td><td align="center">package</td><td align="center">this</td><td align="right">try</td></tr><tr><td>default</td><td align="center">do</td><td align="center">else</td><td align="center">goto</td><td align="center">instanceof</td><td align="center">return</td><td align="center">throw</td><td align="right">while</td></tr><tr><td>enum</td><td align="center">enum</td><td align="center">extends</td><td align="center">if</td><td align="center">interface</td><td align="center">super</td><td align="center">throws</td><td align="right"></td></tr><tr><td>### 标识符</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="right"></td></tr><tr><td>#### 正常的标识符</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="right"></td></tr><tr><td>标识符可以由字母、美元符号以及下划线开头，不能以数字开头。</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="right"></td></tr><tr><td>字符的范围如下：</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="right"></td></tr><tr><td>* ‘a’ to ‘z’ (lowercase ascii letter)</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="right"></td></tr><tr><td>* ‘A’ to ‘Z’ (uppercase ascii letter)</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="right"></td></tr><tr><td>* ‘\u00C0’ to ‘\u00D6’</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="right"></td></tr><tr><td>* ‘\u00D8’ to ‘\u00F6’</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="right"></td></tr><tr><td>* ‘\u00F8’ to ‘\u00FF’</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="right"></td></tr><tr><td>* ‘\u0100’ to ‘\uFFFE’</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="right"></td></tr></tbody></table><p>如下为有效的标识符：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> name</span><br><span class="line"><span class="keyword">def</span> item3</span><br><span class="line"><span class="keyword">def</span> with_underscore</span><br><span class="line"><span class="keyword">def</span> $dollarStart</span><br></pre></td></tr></table></figure><p>如下的标识符就是非法的：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="number">3</span>tier</span><br><span class="line"><span class="keyword">def</span> a+b</span><br><span class="line">def a#b</span><br></pre></td></tr></table></figure><p>所有的关键字如果跟在一个dot后面也都是合法的标识符：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">foo.<span class="keyword">as</span></span><br><span class="line">foo.<span class="keyword">assert</span></span><br><span class="line">foo.<span class="keyword">break</span></span><br><span class="line">foo.<span class="keyword">case</span></span><br><span class="line">foo.<span class="keyword">catch</span></span><br></pre></td></tr></table></figure><h4 id="引用标识符"><a href="#引用标识符" class="headerlink" title="引用标识符"></a>引用标识符</h4><p>引用标识符出现在一个打点运算符之后，如下所示：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> map= [:]</span><br><span class="line">map.<span class="string">"an identifier with a space and double quotes"</span> = <span class="string">"ALLOWED"</span></span><br><span class="line">map.<span class="string">'with-dash-signs-and-single-quotes'</span> = <span class="string">"ALLOWED"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> map.<span class="string">"an identifier with a space and double quotes"</span> == <span class="string">"ALLOWED"</span></span><br><span class="line"><span class="keyword">assert</span> map.<span class="string">'with-dash-signs-and-single-quotes'</span> == <span class="string">"ALLOWED"</span></span><br></pre></td></tr></table></figure><p>Groovy允许多种类型的字符串，后面会讲到。这些字符串都可以出现在打点运算符之后，如下所示：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">map.<span class="string">'single quote'</span></span><br><span class="line">map.<span class="string">"double quote"</span></span><br><span class="line">map.<span class="string">'''triple single quote'''</span></span><br><span class="line">map.<span class="string">"""triple double quote"""</span></span><br><span class="line">map.<span class="regexp">/slashy string/</span></span><br><span class="line">map.<span class="string">$/dollar slashy string/$</span></span><br></pre></td></tr></table></figure><p>有一种特殊的Groovy GStrings，也叫做插值字符串，如下所示：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> firstname = <span class="string">"Homer"</span></span><br><span class="line">map.<span class="string">"Simpson-$&#123;firstname&#125;"</span> = <span class="string">"Homer Simpson"</span> <span class="comment">//被插值为Simpson-Homer</span></span><br><span class="line"><span class="keyword">assert</span> map.<span class="string">'Simpson-Homer'</span> == <span class="string">"Homer Simpson"</span></span><br></pre></td></tr></table></figure><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><p>Groovy支持两种字符串，一种是java原生的java.lang.String，一种是groovy.lang.GString，叫做插值字符串。</p><h4 id="单引号字符串"><a href="#单引号字符串" class="headerlink" title="单引号字符串"></a>单引号字符串</h4><p>单引号字符串就是java.lang.String，不支持插值，如下所示：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'a single quoted string'</span></span><br></pre></td></tr></table></figure><h4 id="字符串连接"><a href="#字符串连接" class="headerlink" title="字符串连接"></a>字符串连接</h4><p>所有的Groovy字符串均支持+操作，如下所示：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">assert</span> <span class="string">'ab'</span> == <span class="string">'a'</span> + <span class="string">'b'</span></span><br></pre></td></tr></table></figure><h4 id="三单引号字符串"><a href="#三单引号字符串" class="headerlink" title="三单引号字符串"></a>三单引号字符串</h4><p>三单引号字符串如下所示：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''a triple single quoted string'''</span></span><br></pre></td></tr></table></figure><p>三单引号支持多行，也是java.lang.String类型，不支持插值，如下所示：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> aMultilineString = <span class="string">'''line one</span></span><br><span class="line"><span class="string">line two</span></span><br><span class="line"><span class="string">line three'''</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> startingAndEndingWithANewline = <span class="string">'''</span></span><br><span class="line"><span class="string">line one</span></span><br><span class="line"><span class="string">line two</span></span><br><span class="line"><span class="string">line three</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> strippedFirstNewline = <span class="string">'''\</span></span><br><span class="line"><span class="string">line one</span></span><br><span class="line"><span class="string">line two</span></span><br><span class="line"><span class="string">line three</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> !strippedFirstNewline.startsWith(<span class="string">'\n'</span>)</span><br></pre></td></tr></table></figure><h5 id="转义特殊字符"><a href="#转义特殊字符" class="headerlink" title="转义特殊字符"></a>转义特殊字符</h5><p>可以使用反斜杠字符转义单引号字符，这样就可以避免字符串的终止：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'an escaped single quote: \' needs a backslash'</span></span><br></pre></td></tr></table></figure><p>可以使用双重反斜杠转义反斜杠，如下所示：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'an escaped escape character: \\ needs a double backslash'</span></span><br></pre></td></tr></table></figure><p>如下所示为转义字符对照表：<br><img src="/2018/02/11/android/Gradle基础之Grovy语法/%E8%BD%AC%E4%B9%89%E5%AD%97%E7%AC%A6%E5%AF%B9%E7%85%A7%E8%A1%A8.png" alt="转义字符对照表"></p><h5 id="Unicode转义序列"><a href="#Unicode转义序列" class="headerlink" title="Unicode转义序列"></a>Unicode转义序列</h5><p>对于键盘上没有出现的字符，可以使用一个反斜杠+’u’+四个十六进制数字表示。例如欧元符号可以使用一下方式表示：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'The Euro currency symbol: \u20AC'</span></span><br></pre></td></tr></table></figure><h4 id="双引用字符串"><a href="#双引用字符串" class="headerlink" title="双引用字符串"></a>双引用字符串</h4><p>双引用字符串如下所示：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"a double quoted string"</span></span><br></pre></td></tr></table></figure><p>对于双引用字符串来说，如果其中没有插值表达式那就是java.lang.String类型，否则就是groovy.lang.GString类型。</p><h5 id="字符串插值"><a href="#字符串插值" class="headerlink" title="字符串插值"></a>字符串插值</h5><p>在Groovy所有的字符串字面量表示中，除了单引用和三引用字符串，其他的均支持插值。所谓字符串插值：就是将占位表达式的值替换到字符串中相应的位置当中，如下所示：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> name = <span class="string">'Guillaume'</span> <span class="comment">// a plain string</span></span><br><span class="line"><span class="keyword">def</span> greeting = <span class="string">"Hello $&#123;name&#125;"</span> <span class="comment">//把name插入到greeting当中</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> greeting.toString() == <span class="string">'Hello Guillaume'</span></span><br></pre></td></tr></table></figure><p>还支持算数运算符：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> sum = <span class="string">"The sum of 2 and 3 equals $&#123;2 + 3&#125;"</span></span><br><span class="line"><span class="keyword">assert</span> sum.toString() == <span class="string">'The sum of 2 and 3 equals 5'</span></span><br></pre></td></tr></table></figure><p>在${}当中还支持表达式，如下所示：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"The sum of 1 and 2 is equal to $&#123;def a = 1; def b = 2; a + b&#125;"</span></span><br></pre></td></tr></table></figure><p>还支持$占位符，当使用点号表达式时：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> person = [<span class="string">name:</span> <span class="string">'Guillaume'</span>, <span class="string">age:</span> <span class="number">36</span>]</span><br><span class="line"><span class="keyword">assert</span> <span class="string">"$person.name is $person.age years old"</span> == <span class="string">'Guillaume is 36 years old'</span></span><br></pre></td></tr></table></figure><p>如下是非法的，会抛出groovy.lang.MissingPropertyException异常，因为系统会认为你在获取一个number的toString属性，从而报错。</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> number = <span class="number">3.14</span></span><br><span class="line">shouldFail(MissingPropertyException) &#123;</span><br><span class="line">    println <span class="string">"$number.toString()"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果你想去掉GString中的插值，只需要一个反斜杠即可：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">assert</span> <span class="string">'$&#123;name&#125;'</span> == <span class="string">"\$&#123;name&#125;"</span> <span class="comment">//"\$&#123;name&#125;"就和普通的'$&#123;name&#125;'相等了，因为去掉了插值</span></span><br></pre></td></tr></table></figure><h5 id="插值闭包表达式"><a href="#插值闭包表达式" class="headerlink" title="插值闭包表达式"></a>插值闭包表达式</h5><p>插值占位符还支持闭包表达式，如下所示：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> sParameterLessClosure = <span class="string">"1 + 2 == $&#123;-&gt; 3&#125;"</span> <span class="comment">//这个闭包表达式没有参数</span></span><br><span class="line"><span class="keyword">assert</span> sParameterLessClosure == <span class="string">'1 + 2 == 3'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> sOneParamClosure = <span class="string">"1 + 2 == $&#123; w -&gt; w &lt;&lt; 3&#125;"</span> <span class="comment">//这个闭包表达式有一个java.io.StringWriter类型的参数</span></span><br><span class="line"><span class="keyword">assert</span> sOneParamClosure == <span class="string">'1 + 2 == 3'</span></span><br></pre></td></tr></table></figure><p>闭包的一个最大的好处是<strong>惰性求值lazy evaluation</strong>，如下所示：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> number = <span class="number">1</span></span><br><span class="line"><span class="keyword">def</span> eagerGString = <span class="string">"value == $&#123;number&#125;"</span></span><br><span class="line"><span class="keyword">def</span> lazyGString = <span class="string">"value == $&#123; -&gt; number &#125;"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> eagerGString == <span class="string">"value == 1"</span></span><br><span class="line"><span class="keyword">assert</span> lazyGString ==  <span class="string">"value == 1"</span></span><br><span class="line"></span><br><span class="line">number = <span class="number">2</span></span><br><span class="line"><span class="keyword">assert</span> eagerGString == <span class="string">"value == 1"</span> <span class="comment">//eagerGString的值已经被固定了</span></span><br><span class="line"><span class="keyword">assert</span> lazyGString ==  <span class="string">"value == 2"</span> <span class="comment">//lazyGString的值被重新计算</span></span><br></pre></td></tr></table></figure><h5 id="和java进行交互"><a href="#和java进行交互" class="headerlink" title="和java进行交互"></a>和java进行交互</h5><p>当一个方法需要java.lang.String参数，传入的却是一个GString类型的参数，这个参数的toString()方法就会被自动调用，看起来像我们可以直接将一个GString赋值给一个String变量一样：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">String takeString(String message) &#123;         </span><br><span class="line">    <span class="keyword">assert</span> message <span class="keyword">instanceof</span> String        </span><br><span class="line">    <span class="keyword">return</span> message</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> message = <span class="string">"The message is $&#123;'hello'&#125;"</span>   </span><br><span class="line"><span class="keyword">assert</span> message <span class="keyword">instanceof</span> GString           </span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> result = takeString(message)            </span><br><span class="line"><span class="keyword">assert</span> result <span class="keyword">instanceof</span> String</span><br><span class="line"><span class="keyword">assert</span> result == <span class="string">'The message is hello'</span></span><br></pre></td></tr></table></figure><h5 id="GString和String的hashCode"><a href="#GString和String的hashCode" class="headerlink" title="GString和String的hashCode"></a>GString和String的hashCode</h5><p>GString和String的hashCode是不一样的，即便他们的最终结果是一样：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">assert</span> <span class="string">"one: $&#123;1&#125;"</span>.hashCode() != <span class="string">"one: 1"</span>.hashCode()</span><br></pre></td></tr></table></figure><p>因此在Map当中不能不能使用GString作为Key值，如下所示：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">defkey= <span class="string">"a"</span></span><br><span class="line"><span class="keyword">def</span> m = [<span class="string">"$&#123;key&#125;"</span>: <span class="string">"letter $&#123;key&#125;"</span>]    <span class="comment">// key类型是一个GString</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> m[<span class="string">"a"</span>] == <span class="literal">null</span>                <span class="comment">// 用一个普通String类型的key去取值,会找不到这个key,因此就会取不到值</span></span><br></pre></td></tr></table></figure><h4 id="三双引号字符串"><a href="#三双引号字符串" class="headerlink" title="三双引号字符串"></a>三双引号字符串</h4><p>三双引号字符串类似于双引号字符串，但是是多行的，因此又类似于三引号字符串：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> name = <span class="string">'Groovy'</span></span><br><span class="line"><span class="keyword">def</span> template = <span class="string">"""</span></span><br><span class="line"><span class="string">    Dear Mr $&#123;name&#125;,</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    You're the winner of the lottery!</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Yours sincerly,</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Dave</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> template.toString().contains(<span class="string">'Groovy'</span>)</span><br></pre></td></tr></table></figure><h4 id="斜线字符串"><a href="#斜线字符串" class="headerlink" title="斜线字符串"></a>斜线字符串</h4><p>除了使用引号来括住字符串，还可以使用/，斜线字符串一般用来定义正则表达式：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> fooPattern = <span class="regexp">/.*foo.*/</span></span><br><span class="line"><span class="keyword">assert</span> fooPattern == <span class="string">'.*foo.*'</span></span><br></pre></td></tr></table></figure><p>只有正斜线需要用反斜线转义：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> escapeSlash = <span class="regexp">/The character \/</span> is a forward slash/</span><br><span class="line"><span class="keyword">assert</span> escapeSlash == <span class="string">'The character / is a forward slash'</span></span><br></pre></td></tr></table></figure><p>斜线字符串是多行的：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> escapeSlash = <span class="regexp">/The character \/</span> is a forward slash/</span><br><span class="line"><span class="keyword">assert</span> escapeSlash == <span class="string">'The character / is a forward slash'</span></span><br></pre></td></tr></table></figure><p>斜线字符串也可以被插值：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">defcolor= <span class="string">'blue'</span></span><br><span class="line"><span class="keyword">def</span> interpolatedSlashy = <span class="regexp">/a $&#123;color&#125; car/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> interpolatedSlashy == <span class="string">'a blue car'</span></span><br></pre></td></tr></table></figure><p>注意：一个空的斜线字符串不能使用两个正斜线表示，因为Groovy会把其理解为注释。因此，下面的断言不会被编译，因为这个是一个非终止的语句：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">assert</span> <span class="string">''</span> == <span class="comment">//</span></span><br></pre></td></tr></table></figure><h4 id="美元斜线字符串"><a href="#美元斜线字符串" class="headerlink" title="美元斜线字符串"></a>美元斜线字符串</h4><p>这种字符串使用$/开始，使用/$结束，其中的转义字符为$：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> name = <span class="string">"Guillaume"</span></span><br><span class="line"><span class="keyword">def</span> date = <span class="string">"April, 1st"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> dollarSlashy = <span class="string">$/</span></span><br><span class="line"><span class="string">    Hello $name,</span></span><br><span class="line"><span class="string">    today we're $&#123;date&#125;.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    $ dollar sign</span></span><br><span class="line"><span class="string">    $$ escaped dollar sign</span></span><br><span class="line"><span class="string">    \ backslash</span></span><br><span class="line"><span class="string">    / forward slash</span></span><br><span class="line"><span class="string">    $/ escaped forward slash</span></span><br><span class="line"><span class="string">    $$$/ escaped opening dollar slashy</span></span><br><span class="line"><span class="string">    $/$</span>$ escaped closing dollar slashy</span><br><span class="line">/$</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> [</span><br><span class="line">    <span class="string">'Guillaume'</span>,</span><br><span class="line">    <span class="string">'April, 1st'</span>,</span><br><span class="line">    <span class="string">'$ dollar sign'</span>,</span><br><span class="line">    <span class="string">'$ escaped dollar sign'</span>,</span><br><span class="line">    <span class="string">'\\ backslash'</span>,</span><br><span class="line">    <span class="string">'/ forward slash'</span>,</span><br><span class="line">    <span class="string">'/ escaped forward slash'</span>,</span><br><span class="line">    <span class="string">'$/ escaped opening dollar slashy'</span>,</span><br><span class="line">    <span class="string">'/$ escaped closing dollar slashy'</span></span><br><span class="line">].every &#123; dollarSlashy.contains(it) &#125;</span><br></pre></td></tr></table></figure><h4 id="字符串总结"><a href="#字符串总结" class="headerlink" title="字符串总结"></a>字符串总结</h4><p><img src="/2018/02/11/android/Gradle基础之Grovy语法/%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%80%BB%E7%BB%93.png" alt="字符串总结"></p><h4 id="字符"><a href="#字符" class="headerlink" title="字符"></a>字符</h4><p>Groovy当中并没有明确的字符字面量，需要明确指明：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> c1 = <span class="string">'A'</span></span><br><span class="line"><span class="keyword">assert</span> c1 <span class="keyword">instanceof</span> Character</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> c2 = <span class="string">'B'</span> <span class="keyword">as</span> <span class="keyword">char</span></span><br><span class="line"><span class="keyword">assert</span> c2 <span class="keyword">instanceof</span> Character</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> c3 = (<span class="keyword">char</span>)<span class="string">'C'</span></span><br><span class="line"><span class="keyword">assert</span> c3 <span class="keyword">instanceof</span> Character</span><br></pre></td></tr></table></figure><h3 id="数字"><a href="#数字" class="headerlink" title="数字"></a>数字</h3><p>Groovy支持不同类型的整型字面量和小数字面量。</p><h4 id="整型字面量"><a href="#整型字面量" class="headerlink" title="整型字面量"></a>整型字面量</h4><p>支持的整型字面量和java是一样的：</p><ul><li>byte</li><li>char</li><li>short</li><li>int</li><li>long</li><li>java.lang.BigInteger</li></ul><p>如下所示：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// primitive types</span></span><br><span class="line"><span class="keyword">byte</span>  b = <span class="number">1</span></span><br><span class="line"><span class="keyword">char</span>  c = <span class="number">2</span></span><br><span class="line"><span class="keyword">short</span> s = <span class="number">3</span></span><br><span class="line"><span class="keyword">int</span>   i = <span class="number">4</span></span><br><span class="line"><span class="keyword">long</span>  l = <span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// infinite precision</span></span><br><span class="line">BigInteger bi =  <span class="number">6</span></span><br></pre></td></tr></table></figure><p>当使用def指明整数字面量时，变量的类型会根据数字的大小自动调整:</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> a = <span class="number">1</span></span><br><span class="line"><span class="keyword">assert</span> a <span class="keyword">instanceof</span> Integer</span><br><span class="line"></span><br><span class="line"><span class="comment">// Integer.MAX_VALUE</span></span><br><span class="line"><span class="keyword">def</span> b = <span class="number">2147483647</span></span><br><span class="line"><span class="keyword">assert</span> b <span class="keyword">instanceof</span> Integer</span><br><span class="line"></span><br><span class="line"><span class="comment">// Integer.MAX_VALUE + 1</span></span><br><span class="line"><span class="keyword">def</span> c = <span class="number">2147483648</span></span><br><span class="line"><span class="keyword">assert</span> c <span class="keyword">instanceof</span> Long</span><br><span class="line"></span><br><span class="line"><span class="comment">// Long.MAX_VALUE</span></span><br><span class="line"><span class="keyword">def</span> d = <span class="number">9223372036854775807</span></span><br><span class="line"><span class="keyword">assert</span> d <span class="keyword">instanceof</span> Long</span><br><span class="line"></span><br><span class="line"><span class="comment">// Long.MAX_VALUE + 1</span></span><br><span class="line"><span class="keyword">def</span> e = <span class="number">9223372036854775808</span></span><br><span class="line"><span class="keyword">assert</span> e <span class="keyword">instanceof</span> BigInteger</span><br></pre></td></tr></table></figure><p>对于负数也是如此：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> na = <span class="number">-1</span></span><br><span class="line"><span class="keyword">assert</span> na <span class="keyword">instanceof</span> Integer</span><br><span class="line"></span><br><span class="line"><span class="comment">// Integer.MIN_VALUE</span></span><br><span class="line"><span class="keyword">def</span> nb = <span class="number">-2147483648</span></span><br><span class="line"><span class="keyword">assert</span> nb <span class="keyword">instanceof</span> Integer</span><br><span class="line"></span><br><span class="line"><span class="comment">// Integer.MIN_VALUE - 1</span></span><br><span class="line"><span class="keyword">def</span> nc = <span class="number">-2147483649</span></span><br><span class="line"><span class="keyword">assert</span> nc <span class="keyword">instanceof</span> Long</span><br><span class="line"></span><br><span class="line"><span class="comment">// Long.MIN_VALUE</span></span><br><span class="line"><span class="keyword">def</span> nd = <span class="number">-9223372036854775808</span></span><br><span class="line"><span class="keyword">assert</span> nd <span class="keyword">instanceof</span> Long</span><br><span class="line"></span><br><span class="line"><span class="comment">// Long.MIN_VALUE - 1</span></span><br><span class="line"><span class="keyword">def</span> ne = <span class="number">-9223372036854775809</span></span><br><span class="line"><span class="keyword">assert</span> ne <span class="keyword">instanceof</span> BigInteger</span><br></pre></td></tr></table></figure><h5 id="数字的非十进制表示"><a href="#数字的非十进制表示" class="headerlink" title="数字的非十进制表示"></a>数字的非十进制表示</h5><p>数字可以用二进制、八进制、16进制以及小数表示。<br>数字二进制表示如下，以ob开头：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> xInt = <span class="number">0b10101111</span></span><br><span class="line"><span class="keyword">assert</span> xInt == <span class="number">175</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">short</span> xShort = <span class="number">0b11001001</span></span><br><span class="line"><span class="keyword">assert</span> xShort == <span class="number">201</span> <span class="keyword">as</span> <span class="keyword">short</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">byte</span> xByte = <span class="number">0b11</span></span><br><span class="line"><span class="keyword">assert</span> xByte == <span class="number">3</span> <span class="keyword">as</span> <span class="keyword">byte</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> xLong = <span class="number">0b101101101101</span></span><br><span class="line"><span class="keyword">assert</span> xLong == <span class="number">2925</span>l</span><br><span class="line"></span><br><span class="line">BigInteger xBigInteger = <span class="number">0b111100100001</span></span><br><span class="line"><span class="keyword">assert</span> xBigInteger == <span class="number">3873</span>g</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> xNegativeInt = <span class="number">-0</span>b10101111</span><br><span class="line"><span class="keyword">assert</span> xNegativeInt == <span class="number">-175</span></span><br></pre></td></tr></table></figure><p>数字的八进制表示如下,以0开头：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> xInt = <span class="number">077</span></span><br><span class="line"><span class="keyword">assert</span> xInt == <span class="number">63</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">short</span> xShort = <span class="number">011</span></span><br><span class="line"><span class="keyword">assert</span> xShort == <span class="number">9</span> <span class="keyword">as</span> <span class="keyword">short</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">byte</span> xByte = <span class="number">032</span></span><br><span class="line"><span class="keyword">assert</span> xByte == <span class="number">26</span> <span class="keyword">as</span> <span class="keyword">byte</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> xLong = <span class="number">0246</span></span><br><span class="line"><span class="keyword">assert</span> xLong == <span class="number">166</span>l</span><br><span class="line"></span><br><span class="line">BigInteger xBigInteger = <span class="number">01111</span></span><br><span class="line"><span class="keyword">assert</span> xBigInteger == <span class="number">585</span>g</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> xNegativeInt = <span class="number">-077</span></span><br><span class="line"><span class="keyword">assert</span> xNegativeInt == <span class="number">-63</span></span><br></pre></td></tr></table></figure><p>数字的16进制表示如下，以0x开头：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> xInt = <span class="number">0x77</span></span><br><span class="line"><span class="keyword">assert</span> xInt == <span class="number">119</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">short</span> xShort = <span class="number">0xaa</span></span><br><span class="line"><span class="keyword">assert</span> xShort == <span class="number">170</span> <span class="keyword">as</span> <span class="keyword">short</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">byte</span> xByte = <span class="number">0x3a</span></span><br><span class="line"><span class="keyword">assert</span> xByte == <span class="number">58</span> <span class="keyword">as</span> <span class="keyword">byte</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> xLong = <span class="number">0xffff</span></span><br><span class="line"><span class="keyword">assert</span> xLong == <span class="number">65535</span>l</span><br><span class="line"></span><br><span class="line">BigInteger xBigInteger = <span class="number">0xaaaa</span></span><br><span class="line"><span class="keyword">assert</span> xBigInteger == <span class="number">43690</span>g</span><br><span class="line"></span><br><span class="line">Double xDouble = <span class="keyword">new</span> Double(<span class="string">'0x1.0p0'</span>)</span><br><span class="line"><span class="keyword">assert</span> xDouble == <span class="number">1.0</span>d</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> xNegativeInt = <span class="number">-0x77</span></span><br><span class="line"><span class="keyword">assert</span> xNegativeInt == <span class="number">-119</span></span><br></pre></td></tr></table></figure><h4 id="小数字面量"><a href="#小数字面量" class="headerlink" title="小数字面量"></a>小数字面量</h4><p>小数字面量也跟java是一样的：</p><ul><li>float</li><li>double</li><li>java.lang.BigDemical</li></ul><p>如下所示：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// primitive types</span></span><br><span class="line"><span class="keyword">float</span>  f = <span class="number">1.234</span></span><br><span class="line"><span class="keyword">double</span> d = <span class="number">2.345</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// infinite precision</span></span><br><span class="line">BigDecimal bd =  <span class="number">3.456</span></span><br></pre></td></tr></table></figure><p>小数还支持科学计数法：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">assert</span> <span class="number">1e3</span>  ==  <span class="number">1</span>_000<span class="number">.0</span></span><br><span class="line"><span class="keyword">assert</span> <span class="number">2E4</span>  == <span class="number">20</span>_000<span class="number">.0</span></span><br><span class="line"><span class="keyword">assert</span> <span class="number">3e+1</span> ==     <span class="number">30.0</span></span><br><span class="line"><span class="keyword">assert</span> <span class="number">4E-2</span> ==      <span class="number">0.04</span></span><br><span class="line"><span class="keyword">assert</span> <span class="number">5e-1</span> ==      <span class="number">0.5</span></span><br></pre></td></tr></table></figure><p>为了精确的计算小数，groovy选择java.lang.BigDecimal作为其小数类型。此外，float和double也是支持的小数类型，但是这俩类型需要一个显式类型声明、强制类型转换或后缀声明。</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> decimal = <span class="number">123.456</span></span><br><span class="line">println decimal.getClass() <span class="comment">// class java.lang.BigDecimal</span></span><br></pre></td></tr></table></figure><h4 id="字面中的下划线"><a href="#字面中的下划线" class="headerlink" title="字面中的下划线"></a>字面中的下划线</h4><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">long</span> creditCardNumber = <span class="number">1234</span>_5678_9012_3456L</span><br><span class="line"><span class="keyword">long</span> socialSecurityNumbers = <span class="number">999</span>_99_9999L</span><br><span class="line"><span class="keyword">double</span> monetaryAmount = <span class="number">12</span>_345_132<span class="number">.12</span></span><br><span class="line"><span class="keyword">long</span> hexBytes = <span class="number">0xFF</span>_EC_DE_5E</span><br><span class="line"><span class="keyword">long</span> hexWords = <span class="number">0xFFEC</span>_DE5E</span><br><span class="line"><span class="keyword">long</span> maxLong = <span class="number">0x7fff</span>_ffff_ffff_ffffL</span><br><span class="line"><span class="keyword">long</span> alsoMaxLong = <span class="number">9</span>_223_372_036_854_775_807L</span><br><span class="line"><span class="keyword">long</span> bytes = <span class="number">0b11010010</span>_01101001_10010100_10010010</span><br></pre></td></tr></table></figure><h4 id="数字类型后缀"><a href="#数字类型后缀" class="headerlink" title="数字类型后缀"></a>数字类型后缀</h4><p>可以给一个数字加入后缀把其转换为指定类型，如下所示：<br>Type|Suffix<br>—|—<br>BigInteger|G or g<br>Long|L or l<br>Integer|I or i<br>BigDecimal|G or g<br>Double|D or d<br>Float|F or f</p><p>如下所示：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">assert</span> <span class="number">42</span>I == <span class="keyword">new</span> Integer(<span class="string">'42'</span>)</span><br><span class="line"><span class="keyword">assert</span> <span class="number">42</span>i == <span class="keyword">new</span> Integer(<span class="string">'42'</span>) <span class="comment">// lowercase i more readable</span></span><br><span class="line"><span class="keyword">assert</span> <span class="number">123</span>L == <span class="keyword">new</span> Long(<span class="string">"123"</span>) <span class="comment">// uppercase L more readable</span></span><br><span class="line"><span class="keyword">assert</span> <span class="number">2147483648</span> == <span class="keyword">new</span> Long(<span class="string">'2147483648'</span>) <span class="comment">// Long type used, value too large for an Integer</span></span><br><span class="line"><span class="keyword">assert</span> <span class="number">456</span>G == <span class="keyword">new</span> BigInteger(<span class="string">'456'</span>)</span><br><span class="line"><span class="keyword">assert</span> <span class="number">456</span>g == <span class="keyword">new</span> BigInteger(<span class="string">'456'</span>)</span><br><span class="line"><span class="keyword">assert</span> <span class="number">123.45</span> == <span class="keyword">new</span> BigDecimal(<span class="string">'123.45'</span>) <span class="comment">// default BigDecimal type used</span></span><br><span class="line"><span class="keyword">assert</span> <span class="number">1.200065</span>D == <span class="keyword">new</span> Double(<span class="string">'1.200065'</span>)</span><br><span class="line"><span class="keyword">assert</span> <span class="number">1.234</span>F == <span class="keyword">new</span> Float(<span class="string">'1.234'</span>)</span><br><span class="line"><span class="keyword">assert</span> <span class="number">1.23E23</span>D == <span class="keyword">new</span> Double(<span class="string">'1.23E23'</span>)</span><br><span class="line"><span class="keyword">assert</span> <span class="number">0b1111</span>L<span class="class">.<span class="keyword">class</span> == <span class="title">Long</span> // <span class="title">binary</span></span></span><br><span class="line"><span class="class"><span class="title">assert</span> 0<span class="title">xFFi</span>.<span class="title">class</span> == <span class="title">Integer</span> // <span class="title">hexadecimal</span></span></span><br><span class="line"><span class="class"><span class="title">assert</span> 034<span class="title">G</span>.<span class="title">class</span> == <span class="title">BigInteger</span> // <span class="title">octal</span></span></span><br></pre></td></tr></table></figure><h4 id="数学运算"><a href="#数学运算" class="headerlink" title="数学运算"></a>数学运算</h4><p>以下是数学运算表（除法运算和指数运算例外）：<br><img src="/2018/02/11/android/Gradle基础之Grovy语法/%E6%95%B0%E5%AD%A6%E8%BF%90%E7%AE%97.png" alt="数学运算"></p><h5 id="除法运算"><a href="#除法运算" class="headerlink" title="除法运算"></a>除法运算</h5><p>如果两个数中其中有一个是float或double类型，那么除法运算/或者/=得到的结果就是double类型，否则就是BigDemical类型。</p><h5 id="指数运算"><a href="#指数运算" class="headerlink" title="指数运算"></a>指数运算</h5><p>运算表如下所示：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// base and exponent are ints and the result can be represented by an Integer</span></span><br><span class="line"><span class="keyword">assert</span>    <span class="number">2</span>    **   <span class="number">3</span>    <span class="keyword">instanceof</span> Integer    <span class="comment">//  8</span></span><br><span class="line"><span class="keyword">assert</span>   <span class="number">10</span>    **   <span class="number">9</span>    <span class="keyword">instanceof</span> Integer    <span class="comment">//  1_000_000_000</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// the base is a long, so fit the result in a Long</span></span><br><span class="line"><span class="comment">// (although it could have fit in an Integer)</span></span><br><span class="line"><span class="keyword">assert</span>    <span class="number">5</span>L   **   <span class="number">2</span>    <span class="keyword">instanceof</span> Long       <span class="comment">//  25</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// the result can't be represented as an Integer or Long, so return a BigInteger</span></span><br><span class="line"><span class="keyword">assert</span>  <span class="number">100</span>    **  <span class="number">10</span>    <span class="keyword">instanceof</span> BigInteger <span class="comment">//  10e20</span></span><br><span class="line"><span class="keyword">assert</span> <span class="number">1234</span>    ** <span class="number">123</span>    <span class="keyword">instanceof</span> BigInteger <span class="comment">//  170515806212727042875...</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// the base is a BigDecimal and the exponent a negative int</span></span><br><span class="line"><span class="comment">// but the result can be represented as an Integer</span></span><br><span class="line"><span class="keyword">assert</span>    <span class="number">0.5</span>  **  <span class="number">-2</span>    <span class="keyword">instanceof</span> Integer    <span class="comment">//  4</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// the base is an int, and the exponent a negative float</span></span><br><span class="line"><span class="comment">// but again, the result can be represented as an Integer</span></span><br><span class="line"><span class="keyword">assert</span>    <span class="number">1</span>    **  <span class="number">-0.3</span>f <span class="keyword">instanceof</span> Integer    <span class="comment">//  1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// the base is an int, and the exponent a negative int</span></span><br><span class="line"><span class="comment">// but the result will be calculated as a Double</span></span><br><span class="line"><span class="comment">// (both base and exponent are actually converted to doubles)</span></span><br><span class="line"><span class="keyword">assert</span>   <span class="number">10</span>    **  <span class="number">-1</span>    <span class="keyword">instanceof</span> Double     <span class="comment">//  0.1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// the base is a BigDecimal, and the exponent is an int, so return a BigDecimal</span></span><br><span class="line"><span class="keyword">assert</span>    <span class="number">1.2</span>  **  <span class="number">10</span>    <span class="keyword">instanceof</span> BigDecimal <span class="comment">//  6.1917364224</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// the base is a float or double, and the exponent is an int</span></span><br><span class="line"><span class="comment">// but the result can only be represented as a Double value</span></span><br><span class="line"><span class="keyword">assert</span>    <span class="number">3.4</span>f **   <span class="number">5</span>    <span class="keyword">instanceof</span> Double     <span class="comment">//  454.35430372146965</span></span><br><span class="line"><span class="keyword">assert</span>    <span class="number">5.6</span>d **   <span class="number">2</span>    <span class="keyword">instanceof</span> Double     <span class="comment">//  31.359999999999996</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// the exponent is a decimal value</span></span><br><span class="line"><span class="comment">// and the result can only be represented as a Double value</span></span><br><span class="line"><span class="keyword">assert</span>    <span class="number">7.8</span>  **   <span class="number">1.9</span>  <span class="keyword">instanceof</span> Double     <span class="comment">//  49.542708423868476</span></span><br><span class="line"><span class="keyword">assert</span>    <span class="number">2</span>    **   <span class="number">0.1</span>f <span class="keyword">instanceof</span> Double     <span class="comment">//  1.0717734636432956</span></span><br></pre></td></tr></table></figure><h3 id="布尔型"><a href="#布尔型" class="headerlink" title="布尔型"></a>布尔型</h3><p>如下所示：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> myBooleanVariable = <span class="literal">true</span></span><br><span class="line"><span class="keyword">boolean</span> untypedBooleanVar = <span class="literal">false</span></span><br><span class="line"><span class="keyword">boolean</span> Field = <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>true和false只是两个基础的布尔值，关于更复杂的boolean操作，参考：<br><a href="http://www.groovy-lang.org/syntax.html#_bitwise_and_logical_operators" target="_blank" rel="noopener">logical operators.</a><br><a href="http://docs.groovy-lang.org/latest/html/documentation/core-semantics.html#Groovy-Truth" target="_blank" rel="noopener">special rules</a></p><h3 id="列表List"><a href="#列表List" class="headerlink" title="列表List"></a>列表List</h3><p>Groovy列表就是java.util.List，默认的子类就是java.util.ArrayList，如下所示：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]         </span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> numbers <span class="keyword">instanceof</span> List  </span><br><span class="line"><span class="keyword">assert</span> numbers.size() == <span class="number">3</span></span><br></pre></td></tr></table></figure><p>列表中可以支持各种类型：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> heterogeneous = [<span class="number">1</span>, <span class="string">"a"</span>, <span class="literal">true</span>]</span><br></pre></td></tr></table></figure><p>还可以定义各种类型的List，默认是ArrayList:</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> arrayList = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="keyword">assert</span> arrayList <span class="keyword">instanceof</span> java.util.ArrayList</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> linkedList = [<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>] <span class="keyword">as</span> LinkedList    </span><br><span class="line"><span class="keyword">assert</span> linkedList <span class="keyword">instanceof</span> java.util.LinkedList</span><br><span class="line"></span><br><span class="line">LinkedList otherLinked = [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]          </span><br><span class="line"><span class="keyword">assert</span> otherLinked <span class="keyword">instanceof</span> java.util.LinkedList</span><br></pre></td></tr></table></figure><p>可以通过[]运算来获取列表的元素以及设置列表元素的值，下标可以是<strong>正数、负数、范围</strong>，还可以使用&lt;&lt;运算符来给list追加元素，如下所示：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> letters = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> letters[<span class="number">0</span>] == <span class="string">'a'</span>     </span><br><span class="line"><span class="keyword">assert</span> letters[<span class="number">1</span>] == <span class="string">'b'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> letters[<span class="number">-1</span>] == <span class="string">'d'</span>   <span class="comment">//获取最后一个元素，-1是从数组末尾开始的第一个元素</span></span><br><span class="line"><span class="keyword">assert</span> letters[<span class="number">-2</span>] == <span class="string">'c'</span></span><br><span class="line"></span><br><span class="line">letters[<span class="number">2</span>] = <span class="string">'C'</span>        <span class="comment">//赋值     </span></span><br><span class="line"><span class="keyword">assert</span> letters[<span class="number">2</span>] == <span class="string">'C'</span></span><br><span class="line"></span><br><span class="line">letters &lt;&lt; <span class="string">'e'</span>        <span class="comment">//在末尾追加一个元素       </span></span><br><span class="line"><span class="keyword">assert</span> letters[ <span class="number">4</span>] == <span class="string">'e'</span></span><br><span class="line"><span class="keyword">assert</span> letters[<span class="number">-1</span>] == <span class="string">'e'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> letters[<span class="number">1</span>, <span class="number">3</span>] == [<span class="string">'b'</span>, <span class="string">'d'</span>]   <span class="comment">// 一次性获取两个元素，返回一个新的List     </span></span><br><span class="line"><span class="keyword">assert</span> letters[<span class="number">2.</span><span class="number">.4</span>] == [<span class="string">'C'</span>, <span class="string">'d'</span>, <span class="string">'e'</span>]    <span class="comment">//使用一个范围获取范围内的元素，返回一个新的List</span></span><br></pre></td></tr></table></figure><p>还可以组成多维List：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> multi = [[<span class="number">0</span>, <span class="number">1</span>], [<span class="number">2</span>, <span class="number">3</span>]]     </span><br><span class="line"><span class="keyword">assert</span> multi[<span class="number">1</span>][<span class="number">0</span>] == <span class="number">2</span></span><br></pre></td></tr></table></figure><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><p>数组需要显式定义数组的类型：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">String[] arrStr = [<span class="string">'Ananas'</span>, <span class="string">'Banana'</span>, <span class="string">'Kiwi'</span>]  </span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> arrStr <span class="keyword">instanceof</span> String[]    </span><br><span class="line"><span class="keyword">assert</span> !(arrStr <span class="keyword">instanceof</span> List)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> numArr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>] <span class="keyword">as</span> <span class="keyword">int</span>[]      </span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> numArr <span class="keyword">instanceof</span> <span class="keyword">int</span>[]       </span><br><span class="line"><span class="keyword">assert</span> numArr.size() == <span class="number">3</span></span><br></pre></td></tr></table></figure><p>可以定义多维数组：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> matrix3 = <span class="keyword">new</span> Integer[<span class="number">3</span>][<span class="number">3</span>]         </span><br><span class="line"><span class="keyword">assert</span> matrix3.size() == <span class="number">3</span></span><br><span class="line"></span><br><span class="line">Integer[][] matrix2                     </span><br><span class="line">matrix2 = [[<span class="number">1</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>]]</span><br><span class="line"><span class="keyword">assert</span> matrix2 <span class="keyword">instanceof</span> Integer[][]</span><br></pre></td></tr></table></figure><p>获取数组元素的方式跟List一样：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">String[] names = [<span class="string">'Cédric'</span>, <span class="string">'Guillaume'</span>, <span class="string">'Jochen'</span>, <span class="string">'Paul'</span>]</span><br><span class="line"><span class="keyword">assert</span> names[<span class="number">0</span>] == <span class="string">'Cédric'</span>     </span><br><span class="line"></span><br><span class="line">names[<span class="number">2</span>] = <span class="string">'Blackdrag'</span>          </span><br><span class="line"><span class="keyword">assert</span> names[<span class="number">2</span>] == <span class="string">'Blackdrag'</span></span><br></pre></td></tr></table></figure><h3 id="映射表Maps"><a href="#映射表Maps" class="headerlink" title="映射表Maps"></a>映射表Maps</h3><p>如下所示：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> colors = [<span class="string">red:</span> <span class="string">'#FF0000'</span>, <span class="string">green:</span> <span class="string">'#00FF00'</span>, <span class="string">blue:</span> <span class="string">'#0000FF'</span>]   </span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> colors[<span class="string">'red'</span>] == <span class="string">'#FF0000'</span>    </span><br><span class="line"><span class="keyword">assert</span> colors.green  == <span class="string">'#00FF00'</span>    </span><br><span class="line"></span><br><span class="line">colors[<span class="string">'pink'</span>] = <span class="string">'#FF00FF'</span>           </span><br><span class="line">colors.yellow  = <span class="string">'#FFFF00'</span>           </span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> colors.pink == <span class="string">'#FF00FF'</span></span><br><span class="line"><span class="keyword">assert</span> colors[<span class="string">'yellow'</span>] == <span class="string">'#FFFF00'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> colors <span class="keyword">instanceof</span> java.util.LinkedHashMap <span class="comment">//默认是LinkedHashMap类型</span></span><br></pre></td></tr></table></figure><p>当获取一个map中不存在的key，会返回null:</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">assert</span> colors.unknown == <span class="literal">null</span></span><br></pre></td></tr></table></figure><p>除了使用string类型的key，还可以使用其他类型的key:</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> numbers = [<span class="number">1</span>: <span class="string">'one'</span>, <span class="number">2</span>: <span class="string">'two'</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> numbers[<span class="number">1</span>] == <span class="string">'one'</span></span><br></pre></td></tr></table></figure><p>如果key是一个变量，如下所示：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> key = <span class="string">'name'</span></span><br><span class="line"><span class="keyword">def</span> person = [<span class="string">key:</span> <span class="string">'Guillaume'</span>]  <span class="comment">//'Guilaume'对应的key为"key"，而不是变量key所关联的值    </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> !person.containsKey(<span class="string">'name'</span>)   <span class="comment">//不包含'name'这个key</span></span><br><span class="line"><span class="keyword">assert</span> person.containsKey(<span class="string">'key'</span>)     <span class="comment">//包含'key'这个key</span></span><br></pre></td></tr></table></figure><p>要想解决上述问题，可以如下所示：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> key = <span class="string">'name'</span></span><br><span class="line">person = [(key): <span class="string">'Guillaume'</span>]  <span class="comment">//此时'Guilaume'对应的key就是变量key所对应的值      </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> person.containsKey(<span class="string">'name'</span>)    </span><br><span class="line"><span class="keyword">assert</span> !person.containsKey(<span class="string">'key'</span>)</span><br></pre></td></tr></table></figure><p>以上就是Groovy的基本语法，关于Groovy的语法特性，还包含一下几个方面，直接看官方文档即可，有兴趣的可以了解下。<br><a href="http://www.groovy-lang.org/operators.html" target="_blank" rel="noopener">运算符 Operators</a><br><a href="http://www.groovy-lang.org/structure.html" target="_blank" rel="noopener">程序结构 Program structure</a><br><a href="http://www.groovy-lang.org/objectorientation.html" target="_blank" rel="noopener">Groovy 面向对象语法 Object orientation </a><br><a href="http://www.groovy-lang.org/closures.html" target="_blank" rel="noopener">闭包 Closures</a><br><a href="http://www.groovy-lang.org/semantics.html" target="_blank" rel="noopener">Groovy 语义 Semantics</a></p>]]></content>
    
    <summary type="html">
    
      Gradle基础之Grovy语法
    
    </summary>
    
      <category term="Gradle相关" scheme="http://easyliu.com/categories/Gradle%E7%9B%B8%E5%85%B3/"/>
    
    
      <category term="Android" scheme="http://easyliu.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>SimpleSlidingMenu</title>
    <link href="http://easyliu.com/2017/05/14/android/SimpleSlidingMenu/"/>
    <id>http://easyliu.com/2017/05/14/android/SimpleSlidingMenu/</id>
    <published>2017-05-14T03:26:19.000Z</published>
    <updated>2017-06-01T15:59:40.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>一个简单的Android侧滑菜单，支持left, right,left_right三种菜单模式，支持edge,all两种滑动模式，支持设置菜单的宽度，支持滑动动画</p><h2 id="效果如下"><a href="#效果如下" class="headerlink" title="效果如下"></a>效果如下</h2><p>每个Fragment里面是一个RecyclerView，解决了滑动冲突问题，包含滑动动画</p><p><img src="/2017/05/14/android/SimpleSlidingMenu/simpleSlidingMenu.gif" alt="菜单滑动效果"></p><h2 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> SlidingMenuLayout mSlideMenuLayout;</span><br><span class="line"></span><br><span class="line"> <span class="meta">@Override</span> <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">   mSlideMenuLayout = <span class="keyword">new</span> SlidingMenuLayout(<span class="keyword">this</span>);</span><br><span class="line">   setContentView(mSlideMenuLayout);</span><br><span class="line">   initSlideMenuLayout();</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initSlideMenuLayout</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       getSupportFragmentManager().beginTransaction()</span><br><span class="line">               .replace(SlidingMenuLayout.LEFT_TAG, ItemFragment.newInstance(<span class="number">1</span>))</span><br><span class="line">               .commit();</span><br><span class="line">       getSupportFragmentManager().beginTransaction()</span><br><span class="line">               .replace(SlidingMenuLayout.MIDDLE_TAG, ItemFragment.newInstance(<span class="number">1</span>))</span><br><span class="line">               .commit();</span><br><span class="line">       getSupportFragmentManager().beginTransaction()</span><br><span class="line">               .replace(SlidingMenuLayout.RIGHT_TAG, ItemFragment.newInstance(<span class="number">1</span>))</span><br><span class="line">               .commit();</span><br><span class="line">       mSlideMenuLayout.setBackgroundColor(Color.parseColor(<span class="string">"#4876FF"</span>));</span><br><span class="line">       mSlideMenuLayout.setMenuMode(SlidingMenuLayout.MenuMode.LEFT_RIGHT);</span><br><span class="line">       mSlideMenuLayout.setSlidingMode(SlidingMenuLayout.SlidingMode.ALL);</span><br><span class="line">       mSlideMenuLayout.setSlideEnable(<span class="keyword">true</span>);</span><br><span class="line">       mSlideMenuLayout.setMenuContentWidthRation(<span class="number">0.75f</span>);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><ul><li>把SlidingMenuLayout作为根布局</li><li>左侧，中间，以及右侧菜单布局都会有一个tag，通过给每一个布局设置一个fragment即可！</li><li>具体参考代码中的：MainActivity.java</li></ul><h2 id="关于滑动动画"><a href="#关于滑动动画" class="headerlink" title="关于滑动动画"></a>关于滑动动画</h2><p>滑动动画主要是给SlideMenuLayout设置IOnMenuOpenListener接口，在接口里面对菜单以及中间视图进行一些缩放、透明度以及平移操作，从而达到动画效果，如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">mSlideMenuLayout.setOnMenuOpenListener(<span class="keyword">new</span> SlidingMenuLayout.IOnMenuOpenListener() &#123;</span><br><span class="line">           <span class="meta">@Override</span></span><br><span class="line">           <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">menuOpen</span><span class="params">(View menuView, View middleView, <span class="keyword">float</span> openPercent, <span class="keyword">boolean</span> isLeftMenu)</span> </span>&#123;</span><br><span class="line">               <span class="keyword">float</span> menuScale = (<span class="keyword">float</span>) (<span class="number">0.8</span> + <span class="number">0.2</span> * openPercent);<span class="comment">//0.8到1</span></span><br><span class="line">               <span class="keyword">float</span> contentScale = (<span class="keyword">float</span>) (<span class="number">1</span> - <span class="number">0.2</span> * openPercent);<span class="comment">//1到0.8</span></span><br><span class="line">               <span class="keyword">float</span> translationXScale = <span class="number">0</span>;</span><br><span class="line">               <span class="keyword">if</span> (isLeftMenu) &#123;</span><br><span class="line">                   translationXScale = (<span class="number">1</span> - openPercent) * <span class="number">0.6f</span>;<span class="comment">//范围是0.6到0</span></span><br><span class="line">               &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                   translationXScale = -(<span class="number">1</span> - openPercent) * <span class="number">0.6f</span>;<span class="comment">//范围是-0.6到0</span></span><br><span class="line">               &#125;</span><br><span class="line">               menuView.setScaleX(menuScale);</span><br><span class="line">               menuView.setScaleY(menuScale);</span><br><span class="line">               menuView.setAlpha(openPercent);</span><br><span class="line">               menuView.setTranslationX(menuView.getWidth() * translationXScale);</span><br><span class="line">               middleView.setScaleX(contentScale);</span><br><span class="line">               middleView.setScaleY(contentScale);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;);</span><br></pre></td></tr></table></figure><p>代码地址：<a href="https://github.com/EasyLiu-Ly/SimpleSlidingMenu.git" target="_blank" rel="noopener">https://github.com/EasyLiu-Ly/SimpleSlidingMenu.git</a></p>]]></content>
    
    <summary type="html">
    
      SimpleSlidingMenu
    
    </summary>
    
      <category term="Android自定义控件" scheme="http://easyliu.com/categories/Android%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%A7%E4%BB%B6/"/>
    
    
      <category term="Android" scheme="http://easyliu.com/tags/Android/"/>
    
  </entry>
  
</feed>
