<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>EasyLiu</title>
  
  <subtitle>welcome to my blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://easyliu.com/"/>
  <updated>2021-01-09T14:32:52.609Z</updated>
  <id>http://easyliu.com/</id>
  
  <author>
    <name>EasyLiu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>2020年终总结</title>
    <link href="http://easyliu.com/2021/01/05/life/2020_summary/"/>
    <id>http://easyliu.com/2021/01/05/life/2020_summary/</id>
    <published>2021-01-05T12:24:22.000Z</published>
    <updated>2021-01-09T14:32:52.609Z</updated>
    
    <content type="html"><![CDATA[<p>一转眼，2020年已接近尾声，感觉这一年过的太快了，是时候该做一个年终总结了。今年由于疫情的原因，从年初开始口罩就没摘下来过，目前来看国外疫情依然严峻，国内也有零星散散病例出现，抗疫工作依旧是接下来2021年全球各国的重点工作。希望2021年疫情能尽快好转，早日摘掉口罩，恢复到正常生活吧。</p><h2 id="工作"><a href="#工作" class="headerlink" title="工作"></a>工作</h2><p>今年在工作方面的话，主要还是focus在日常需求开发上面，中途也参与了组件中台化的建设，总结下来主要分为以下几个部分：</p><h3 id="1、学会了单测编写"><a href="#1、学会了单测编写" class="headerlink" title="1、学会了单测编写"></a>1、学会了单测编写</h3><p>写代码的时候会有意识的考虑到代码的可测性，写单测虽然会占用一定的开发时间，但是在写单测的过程中会重新审视自己写的代码，从中会发现自己代码存在问题及bug，及时纠正。单测覆盖率虽然是日常开发中的一个考核指标，但是也不能完全从覆盖率出发，得写有意义的单测</p><h3 id="2、更加注重代码质量"><a href="#2、更加注重代码质量" class="headerlink" title="2、更加注重代码质量"></a>2、更加注重代码质量</h3><p>今年由于整个部门开始注重代码风格、代码质量，在代码合入到主分支之前都会进行相应的checkstyle检查，主要包括圈复杂度、一行最大字符数等等，因此在平时写代码的时候会更加有意识的培养自己这方面的习惯；代码cr的时候也会更加注重代码质量这一块</p><h3 id="3、答辩通过"><a href="#3、答辩通过" class="headerlink" title="3、答辩通过"></a>3、答辩通过</h3><p>在9月份的时候经历了一次升级答辩，虽然中间经历波折，但是最终侥幸过了。对于这次答辩，前期也准备了个把月吧，包括实验数据以及PPT编写，周末在家里的时候也当着媳妇的面演练了几次PPT，尽量把整个PPT串起来。事实证明，前期准备真的很重要，特别是需要对自己做的东西能够了然于胸，然后PPT前期尽量多演练几遍，保证真正答辩的时候能够流畅的把PPT讲完不卡壳，这个也很关键。当然，通过这次答辩，也发现了不少的问题。主要是实验数据偏少，前期没有在关键地方做对应的埋点上报，导致数据缺乏一定的可信度。这个也是后期项目开发中需要注意的地方，在日常项目开发中要注重各种性能数据的采集、上报、优化及对比，这些材料都是后续答辩的关键证据，也是个人能力的一个体现</p><h3 id="4、日常需求开发及bug修复"><a href="#4、日常需求开发及bug修复" class="headerlink" title="4、日常需求开发及bug修复"></a>4、日常需求开发及bug修复</h3><p>总结下来，在这一年中也开发了几个大需求，需求排期也还算合理，不会像之前一样总想着尽快完成需求就把排期排的很紧，合理排期还是挺重要的，毕竟思考以及看代码的时间要多于写代码的时间，只有思路清晰了，写代码就是水到渠成的事情了</p><p>写代码的时候，会开始有意识的考虑设计模式的应用，避免变成if_else工程师；会思考代码的后续可扩展性，避免把代码写死</p><p>看了下这一年前前后后也fix了不少bug，对于自己写的bug来说，主要还是分为粗心、边界case以及自测不到位导致，这个后续还是要多注意的。在解bug之前可以分析一下造成这个bug的主要原因，怎么避免后续自己不会踩到同样的坑，这个才是解决bug的意义所在</p><h3 id="5、重新开始捣鼓博客"><a href="#5、重新开始捣鼓博客" class="headerlink" title="5、重新开始捣鼓博客"></a>5、重新开始捣鼓博客</h3><p>又开始重新捣鼓hexo博客了，看了下距离上次写博客已经过去两年多了，这个爱好不能丢，得长期坚持。虽然日常工作开发任务挺繁重的，但是做为程序员还是得有点自己的追求的，博客还是得督促自己长期写下去</p><h3 id="6、开始真正执行每周学习计划"><a href="#6、开始真正执行每周学习计划" class="headerlink" title="6、开始真正执行每周学习计划"></a>6、开始真正执行每周学习计划</h3><p>经过这一年的需求开发迭代，反思下来发现自己好多东西都不会了，对于很多技术就算知道有这么回事，但是对于底层原理是一概不知，这个对于一个程序员来说是十分可怕的。但是平时工作又很忙，很难有一大片的时候来进行学习，咋办呢？为了督促自己学习，我制定了一个每周学习计划，每周都强迫自己学习一门自己陌生的技术，比如分析Leakcanary底层实现原理、Lifecycle底层实现原理等等。一般情况下是周一到周五进行素材积累、源码阅读，然后周末抽时间整理成文章发表到个人博客上面。俗话说得好，不积硅步无以至千，只有每天进步一点点，长期积累下来，才能实现量变到质变的转变～</p><h2 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h2><p>年初的时候搬进了新家，终于在深圳有了自己的新家，虽然远了点，但还是挺幸福的，小区环境还是挺不错的，容积率也比较低</p><p>平时也偶尔开始开车上班了，中途6月份以及国庆的时候也和媳妇一起开车回了两趟老家，一趟来回1600km～</p><p>这一年车子也出了几次险，总结下来还是自己开车太快或者分神导致的，这个还是要引以为戒，后续不要再犯了</p><p>考虑到媳妇平时上班太远了，12月初的时候在媳妇公司附近租了一个房子，这样早上上班可以晚点起，一天也不至于这么来回折腾。我上班也差不多近了一半的路径，早上可以睡到8:20然后坐地铁来公司上班了</p><p>本来想着把现在的房子卖了换一个近一点的，但是目前的房子卖不到一个好的价钱，还是再等等吧，等明年房子价格起来了，再考虑置换吧</p><p>这一年也开始进行理财了，包括基金以及定期理财，这个也得长期坚持下去，在自己风险承受范围之内可以多投入一些</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>希望2021年能够继续保持初心，持续学习，继续执行每周的学习计划，继续理财，更好的工作，更好的生活</p>]]></content>
    
    <summary type="html">
    
      2020年终总结
    
    </summary>
    
      <category term="年终总结" scheme="http://easyliu.com/categories/%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="规划总结" scheme="http://easyliu.com/tags/%E8%A7%84%E5%88%92%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>LeakCanary源码解析之——dump堆栈</title>
    <link href="http://easyliu.com/2020/12/26/android_source_analysis/leakcanary_dump/"/>
    <id>http://easyliu.com/2020/12/26/android_source_analysis/leakcanary_dump/</id>
    <published>2020-12-26T02:11:07.000Z</published>
    <updated>2020-12-28T03:14:10.022Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在前一篇文章<a href="https://easyliu-ly.github.io/2020/12/19/android_source_analysis/leakcanary/" target="_blank" rel="noopener">LeakCanary源码解析之——内存泄漏监测</a>当中从源码的角度对Leakcanary中内存泄漏监测原理进行了剖析。既然监测到了内存泄漏，那么接下来就是要把堆栈给dump出来，进行堆栈分析，最终以图形化的方式展示内存泄漏堆栈。本篇文章就从源码的角度分析一下dump堆栈的过程。</p><p>本次分析的源码基于：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">dependencies</span> &#123;</span><br><span class="line">  debugImplementation <span class="string">'com.squareup.leakcanary:leakcanary-android:2.5'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="InternalLeakCanary"><a href="#InternalLeakCanary" class="headerlink" title="InternalLeakCanary"></a>InternalLeakCanary</h2><p>在前一篇文章<a href="https://easyliu-ly.github.io/2020/12/19/android_source_analysis/leakcanary/" target="_blank" rel="noopener">LeakCanary源码解析之——内存泄漏监测</a>当中我们分析到，当发现可能有内存泄漏之后，就会通过OnObjectRetainedListener接口通知出去，那么我们看下谁实现了这个接口：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">internal</span> <span class="keyword">object</span> InternalLeakCanary : (Application) -&gt; <span class="built_in">Unit</span>, OnObjectRetainedListener &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">lateinit</span> <span class="keyword">var</span> heapDumpTrigger: HeapDumpTrigger</span><br><span class="line"></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">invoke</span><span class="params">(application: <span class="type">Application</span>)</span></span> &#123;</span><br><span class="line">    _application = application</span><br><span class="line"></span><br><span class="line">    checkRunningInDebuggableBuild()</span><br><span class="line"></span><br><span class="line">    AppWatcher.objectWatcher.addOnObjectRetainedListener(<span class="keyword">this</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> heapDumper = AndroidHeapDumper(application, createLeakDirectoryProvider(application))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> gcTrigger = GcTrigger.Default</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> configProvider = &#123; LeakCanary.config &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> handlerThread = HandlerThread(LEAK_CANARY_THREAD_NAME)</span><br><span class="line">    handlerThread.start()</span><br><span class="line">    <span class="keyword">val</span> backgroundHandler = Handler(handlerThread.looper)</span><br><span class="line"></span><br><span class="line">    heapDumpTrigger = HeapDumpTrigger(</span><br><span class="line">      application, backgroundHandler, AppWatcher.objectWatcher, gcTrigger, heapDumper,</span><br><span class="line">      configProvider</span><br><span class="line">    )</span><br><span class="line">    application.registerVisibilityListener &#123; applicationVisible -&gt;</span><br><span class="line">      <span class="keyword">this</span>.applicationVisible = applicationVisible</span><br><span class="line">      heapDumpTrigger.onApplicationVisibilityChanged(applicationVisible)</span><br><span class="line">    &#125;</span><br><span class="line">    registerResumedActivityListener(application)</span><br><span class="line">    <span class="comment">//添加桌面快捷方式</span></span><br><span class="line">    addDynamicShortcut(application)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// We post so that the log happens after Application.onCreate()</span></span><br><span class="line">    Handler().post &#123;</span><br><span class="line">      <span class="comment">// https://github.com/square/leakcanary/issues/1981</span></span><br><span class="line">      <span class="comment">// We post to a background handler because HeapDumpControl.iCanHasHeap() checks a shared pref</span></span><br><span class="line">      <span class="comment">// which blocks until loaded and that creates a StrictMode violation.</span></span><br><span class="line">      backgroundHandler.post &#123;</span><br><span class="line">        SharkLog.d &#123;</span><br><span class="line">          <span class="keyword">when</span> (<span class="keyword">val</span> iCanHasHeap = HeapDumpControl.iCanHasHeap()) &#123;</span><br><span class="line">            <span class="keyword">is</span> Yup -&gt; application.getString(R.string.leak_canary_heap_dump_enabled_text)</span><br><span class="line">            <span class="keyword">is</span> Nope -&gt; application.getString(</span><br><span class="line">              R.string.leak_canary_heap_dump_disabled_text, iCanHasHeap.reason()</span><br><span class="line">            )</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Suppress(<span class="meta-string">"ReturnCount"</span>)</span></span><br><span class="line">  <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">addDynamicShortcut</span><span class="params">(application: <span class="type">Application</span>)</span></span> &#123;</span><br><span class="line">    <span class="comment">//...........省略</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      shortcutManager.addDynamicShortcuts(listOf(shortcut))</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ignored: Throwable) &#123;</span><br><span class="line">      SharkLog.d(ignored) &#123;</span><br><span class="line">        <span class="string">"Could not add dynamic shortcut. "</span> +</span><br><span class="line">          <span class="string">"shortcutCount=<span class="variable">$shortcutCount</span>, "</span> +</span><br><span class="line">          <span class="string">"maxShortcutCountPerActivity=<span class="subst">$&#123;shortcutManager.maxShortcutCountPerActivity&#125;</span>"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onObjectRetained</span><span class="params">()</span></span> = scheduleRetainedObjectCheck()</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">fun</span> <span class="title">scheduleRetainedObjectCheck</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>::heapDumpTrigger.isInitialized) &#123;</span><br><span class="line">      heapDumpTrigger.scheduleRetainedObjectCheck()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>发现是一个内部类InternalLeakCanary实现了这个接口，是通过在invoke方法里面通过AppWatcher.objectWatcher.addOnObjectRetainedListener(this)方式实现的这个接口，在这个invoke方法里面还初始化了一个HeapDumpTrigger对象，当收到OnObjectRetainedListener接口的onObjectRetained回调的时候，会调用scheduleRetainedObjectCheck方法，在这个方法里面会调用heapDumpTrigger.scheduleRetainedObjectCheck方法，那么可以看出这个heapDumpTrigger肯定是用于dump堆栈的（从名字也可以很明显看出来）。</p><p>到这里大家可能会抛出一个疑问：这个InternalLeakCanary是一个internal内部类，那么它的invoke方法是谁调用的呢？</p><p>在InternalAppWatcher类的init方法里面有如下一段代码：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">internal</span> <span class="keyword">object</span> InternalAppWatcher &#123;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">val</span> onAppWatcherInstalled: (Application) -&gt; <span class="built_in">Unit</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">init</span> &#123;</span><br><span class="line">    <span class="keyword">val</span> internalLeakCanary = <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">val</span> leakCanaryListener = Class.forName(<span class="string">"leakcanary.internal.InternalLeakCanary"</span>)</span><br><span class="line">      leakCanaryListener.getDeclaredField(<span class="string">"INSTANCE"</span>)</span><br><span class="line">        .<span class="keyword">get</span>(<span class="literal">null</span>)</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ignored: Throwable) &#123;</span><br><span class="line">      NoLeakCanary</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@kotlin</span>.Suppress(<span class="string">"UNCHECKED_CAST"</span>)</span><br><span class="line">    onAppWatcherInstalled = internalLeakCanary <span class="keyword">as</span> (Application) -&gt; <span class="built_in">Unit</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为InternalLeakCanary是一个单例，可以看出，在InternalAppWatcher的初始化方法里面，先通过反射获取到了InternalLeakCanary对象，然后我们可以看到InternalLeakCanary是实现了一个函数类型接口的：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">InternalLeakCanary : (Application) -&gt; <span class="built_in">Unit</span></span><br></pre></td></tr></table></figure><p>关于什么是：函数类型，参考:<a href="https://www.kotlincn.net/docs/reference/lambdas.html#函数类型" target="_blank" rel="noopener">https://www.kotlincn.net/docs/reference/lambdas.html#函数类型</a>。然后把internalLeakCanary强转为(Application) -&gt; Unit，保存为onAppWatcherInstalled变量。最后在InternalAppWatcher的install方法的最后面会执行这个函数类型实例调用：onAppWatcherInstalled(application)，也就会调用InternalLeakCanary的fun invoke(application: Application) 方法。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">install</span><span class="params">(application: <span class="type">Application</span>)</span></span> &#123;</span><br><span class="line">  <span class="comment">//省略</span></span><br><span class="line">  onAppWatcherInstalled(application)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>刚刚上面也说了，当收到OnObjectRetainedListener接口的onObjectRetained回调的时候，会调用scheduleRetainedObjectCheck方法，在这个方法里面会调用heapDumpTrigger.scheduleRetainedObjectCheck方法</p><h2 id="heapDumpTrigger-scheduleRetainedObjectCheck"><a href="#heapDumpTrigger-scheduleRetainedObjectCheck" class="headerlink" title="heapDumpTrigger.scheduleRetainedObjectCheck"></a>heapDumpTrigger.scheduleRetainedObjectCheck</h2><p>接下来看下scheduleRetainedObjectCheck方法：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">scheduleRetainedObjectCheck</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">  delayMillis: <span class="type">Long</span> = <span class="number">0</span>L</span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span> &#123;</span><br><span class="line">  <span class="keyword">val</span> checkCurrentlyScheduledAt = checkScheduledAt</span><br><span class="line">  <span class="keyword">if</span> (checkCurrentlyScheduledAt &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  checkScheduledAt = SystemClock.uptimeMillis() + delayMillis</span><br><span class="line">  backgroundHandler.postDelayed(&#123;</span><br><span class="line">    checkScheduledAt = <span class="number">0</span></span><br><span class="line">    checkRetainedObjects()</span><br><span class="line">  &#125;, delayMillis)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里首先会判断当前是否正在执行schedule，如果当前正在执行schedule就返回。然后会记录checkScheduledAt，根据传入的delayMillis延时之后执行checkRetainedObjects方法，在InternalLeakCanary里面调用heapDumpTrigger.scheduleRetainedObjectCheck没有传入参数，因此默认是不延时</p><h2 id="heapDumpTrigger-checkRetainedObjects"><a href="#heapDumpTrigger-checkRetainedObjects" class="headerlink" title="heapDumpTrigger.checkRetainedObjects"></a>heapDumpTrigger.checkRetainedObjects</h2><p>接下来看下checkRetainedObjects方法：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">checkRetainedObjects</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> iCanHasHeap = HeapDumpControl.iCanHasHeap()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> config = configProvider()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (iCanHasHeap <span class="keyword">is</span> Nope) &#123;</span><br><span class="line">      <span class="keyword">if</span> (iCanHasHeap <span class="keyword">is</span> NotifyingNope) &#123;</span><br><span class="line">        <span class="comment">// Before notifying that we can't dump heap, let's check if we still have retained object.</span></span><br><span class="line">        <span class="keyword">var</span> retainedReferenceCount = objectWatcher.retainedObjectCount</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (retainedReferenceCount &gt; <span class="number">0</span>) &#123;</span><br><span class="line">          gcTrigger.runGc()</span><br><span class="line">          retainedReferenceCount = objectWatcher.retainedObjectCount</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">val</span> nopeReason = iCanHasHeap.reason()</span><br><span class="line">        <span class="keyword">val</span> wouldDump = !checkRetainedCount(</span><br><span class="line">          retainedReferenceCount, config.retainedVisibleThreshold, nopeReason</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (wouldDump) &#123;</span><br><span class="line">          <span class="keyword">val</span> uppercaseReason = nopeReason[<span class="number">0</span>].toUpperCase() + nopeReason.substring(<span class="number">1</span>)</span><br><span class="line">          onRetainInstanceListener.onEvent(DumpingDisabled(uppercaseReason))</span><br><span class="line">          showRetainedCountNotification(</span><br><span class="line">            objectCount = retainedReferenceCount,</span><br><span class="line">            contentText = uppercaseReason</span><br><span class="line">          )</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        SharkLog.d &#123;</span><br><span class="line">          application.getString(</span><br><span class="line">            R.string.leak_canary_heap_dump_disabled_text, iCanHasHeap.reason()</span><br><span class="line">          )</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//获取残留对象的个数</span></span><br><span class="line">    <span class="keyword">var</span> retainedReferenceCount = objectWatcher.retainedObjectCount</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (retainedReferenceCount &gt; <span class="number">0</span>) &#123;  </span><br><span class="line">      <span class="comment">//主动执行一次gc</span></span><br><span class="line">      gcTrigger.runGc()</span><br><span class="line">      <span class="comment">//再次获取残留对象的个数</span></span><br><span class="line">      retainedReferenceCount = objectWatcher.retainedObjectCount</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//这个方法里面会有一些判断条件，判断是否需要dump，如果不需要就返回false</span></span><br><span class="line">    <span class="keyword">if</span> (checkRetainedCount(retainedReferenceCount, config.retainedVisibleThreshold)) <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> now = SystemClock.uptimeMillis()</span><br><span class="line">    <span class="keyword">val</span> elapsedSinceLastDumpMillis = now - lastHeapDumpUptimeMillis</span><br><span class="line">    <span class="keyword">if</span> (elapsedSinceLastDumpMillis &lt; WAIT_BETWEEN_HEAP_DUMPS_MILLIS) &#123;</span><br><span class="line">      onRetainInstanceListener.onEvent(DumpHappenedRecently)</span><br><span class="line">      showRetainedCountNotification(</span><br><span class="line">        objectCount = retainedReferenceCount,</span><br><span class="line">        contentText = application.getString(R.string.leak_canary_notification_retained_dump_wait)</span><br><span class="line">      )</span><br><span class="line">      scheduleRetainedObjectCheck(</span><br><span class="line">        delayMillis = WAIT_BETWEEN_HEAP_DUMPS_MILLIS - elapsedSinceLastDumpMillis</span><br><span class="line">      )</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    dismissRetainedCountNotification()</span><br><span class="line">    <span class="keyword">val</span> visibility = <span class="keyword">if</span> (applicationVisible) <span class="string">"visible"</span> <span class="keyword">else</span> <span class="string">"not visible"</span></span><br><span class="line">    dumpHeap(</span><br><span class="line">      retainedReferenceCount = retainedReferenceCount,</span><br><span class="line">      retry = <span class="literal">true</span>,</span><br><span class="line">      reason = <span class="string">"<span class="variable">$retainedReferenceCount</span> retained objects, app is <span class="variable">$visibility</span>"</span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>可以看出会先通过HeapDumpControl.iCanHasHeap()方法返回一个ICanHazHeap对象，这个对象有多种类型：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">sealed</span> <span class="class"><span class="keyword">class</span> <span class="title">ICanHazHeap</span> </span>&#123;</span><br><span class="line">  <span class="keyword">object</span> Yup : ICanHazHeap()</span><br><span class="line">  <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Nope</span></span>(<span class="keyword">val</span> reason: () -&gt; String) : ICanHazHeap()</span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">SilentNope</span></span>(reason: () -&gt; String) : Nope(reason)</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Allows manual dumping via a notification</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">NotifyingNope</span></span>(reason: () -&gt; String) : Nope(reason)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>具体HeapDumpControl.iCanHasHeap()里面的实现这里就不讲了，感兴趣的同学可以深入看下。这里我们假设返回的是Yup类型，那么就会跳过第一个if条件，继续往下走。主要分为几步:</p><p>1、先通过objectWatcher.retainedObjectCount方法拿到了被objectWatcher持有的对象的个数。如果残留的对象大于0就主动执行一次gc，然后再次获取到残留对象的个数</p><p>2、通过checkRetainedCount方法判断是否需要马上dump，如果需要就返回false</p><p>3、需要马上dump之后，会检查两次dump之间的时间间隔是否小于1分钟，如果小于一分钟就会弹出一个通知说：Last heap dump was less than a minute ago，然后过一段时间再次执行scheduleRetainedObjectCheck方法</p><p>4、如果俩次dump时间间隔已经大于等于一分钟了，就会调用dumpHeap方法</p><h2 id="heapDumpTrigger-dumpHeap"><a href="#heapDumpTrigger-dumpHeap" class="headerlink" title="heapDumpTrigger.dumpHeap"></a>heapDumpTrigger.dumpHeap</h2><p>接下来看下dumpHeap方法：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">dumpHeap</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    retainedReferenceCount: <span class="type">Int</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">    retry: <span class="type">Boolean</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">    reason: <span class="type">String</span></span></span></span><br><span class="line"><span class="function"><span class="params">  )</span></span> &#123;</span><br><span class="line">    saveResourceIdNamesToMemory()</span><br><span class="line">    <span class="keyword">val</span> heapDumpUptimeMillis = SystemClock.uptimeMillis()</span><br><span class="line">    KeyedWeakReference.heapDumpUptimeMillis = heapDumpUptimeMillis</span><br><span class="line">    <span class="keyword">when</span> (<span class="keyword">val</span> heapDumpResult = heapDumper.dumpHeap()) &#123;</span><br><span class="line">      <span class="keyword">is</span> NoHeapDump -&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (retry) &#123;</span><br><span class="line">          SharkLog.d &#123; <span class="string">"Failed to dump heap, will retry in <span class="variable">$WAIT_AFTER_DUMP_FAILED_MILLIS</span> ms"</span> &#125;</span><br><span class="line">          scheduleRetainedObjectCheck(</span><br><span class="line">            delayMillis = WAIT_AFTER_DUMP_FAILED_MILLIS</span><br><span class="line">          )</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          SharkLog.d &#123; <span class="string">"Failed to dump heap, will not automatically retry"</span> &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        showRetainedCountNotification(</span><br><span class="line">          objectCount = retainedReferenceCount,</span><br><span class="line">          contentText = application.getString(</span><br><span class="line">            R.string.leak_canary_notification_retained_dump_failed</span><br><span class="line">          )</span><br><span class="line">        )</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">is</span> HeapDump -&gt; &#123;</span><br><span class="line">        lastDisplayedRetainedObjectCount = <span class="number">0</span></span><br><span class="line">        lastHeapDumpUptimeMillis = SystemClock.uptimeMillis()</span><br><span class="line">        objectWatcher.clearObjectsWatchedBefore(lastHeapDumpUptimeMillis)</span><br><span class="line">        HeapAnalyzerService.runAnalysis(</span><br><span class="line">          context = application,</span><br><span class="line">          heapDumpFile = heapDumpResult.file,</span><br><span class="line">          heapDumpDurationMillis = heapDumpResult.durationMillis,</span><br><span class="line">          heapDumpReason = reason</span><br><span class="line">        )</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>在这个方法里面会先调用heapDumper.dumpHeap()方法返回一个heapDumpResult：<br>1、如果返回类型为NoHeapDump就代表dump heap失败</p><p>2、如果返回类型为HeapDump就代表dump heap成功，会先调用objectWatcher.clearObjectsWatchedBefore(heapDumpUptimeMillis)方法，用于清除所有在lastHeapDumpUptimeMillis这个时间点之前创建的KeyedWeakReference对象，因为dump堆栈已经成功了，这里就不需要再持有了。然后会调用HeapAnalyzerService.runAnalysis进行堆栈分析</p><p>这个heapDumper是一个AndroidHeapDumper对象，来看下其dumpHeap方法：</p><h3 id="AndroidHeapDumper-dumpHeap"><a href="#AndroidHeapDumper-dumpHeap" class="headerlink" title="AndroidHeapDumper.dumpHeap"></a>AndroidHeapDumper.dumpHeap</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">dumpHeap</span><span class="params">()</span></span>: DumpHeapResult &#123;</span><br><span class="line">    <span class="keyword">val</span> heapDumpFile = leakDirectoryProvider.newHeapDumpFile() ?: <span class="keyword">return</span> NoHeapDump</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> waitingForToast = FutureResult&lt;Toast?&gt;()</span><br><span class="line">    showToast(waitingForToast)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!waitingForToast.wait(<span class="number">5</span>, SECONDS)) &#123;</span><br><span class="line">      SharkLog.d &#123; <span class="string">"Did not dump heap, too much time waiting for Toast."</span> &#125;</span><br><span class="line">      <span class="keyword">return</span> NoHeapDump</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> notificationManager =</span><br><span class="line">      context.getSystemService(Context.NOTIFICATION_SERVICE) <span class="keyword">as</span> NotificationManager</span><br><span class="line">    <span class="keyword">if</span> (Notifications.canShowNotification) &#123;</span><br><span class="line">      <span class="keyword">val</span> dumpingHeap = context.getString(R.string.leak_canary_notification_dumping)</span><br><span class="line">      <span class="keyword">val</span> builder = Notification.Builder(context)</span><br><span class="line">        .setContentTitle(dumpingHeap)</span><br><span class="line">      <span class="keyword">val</span> notification = Notifications.buildNotification(context, builder, LEAKCANARY_LOW)</span><br><span class="line">      notificationManager.notify(R.id.leak_canary_notification_dumping_heap, notification)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> toast = waitingForToast.<span class="keyword">get</span>()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">val</span> durationMillis = measureDurationMillis &#123;</span><br><span class="line">        Debug.dumpHprofData(heapDumpFile.absolutePath)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (heapDumpFile.length() == <span class="number">0L</span>) &#123;</span><br><span class="line">        SharkLog.d &#123; <span class="string">"Dumped heap file is 0 byte length"</span> &#125;</span><br><span class="line">        NoHeapDump</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        HeapDump(file = heapDumpFile, durationMillis = durationMillis)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e: Exception) &#123;</span><br><span class="line">      SharkLog.d(e) &#123; <span class="string">"Could not dump heap"</span> &#125;</span><br><span class="line">      <span class="comment">// Abort heap dump</span></span><br><span class="line">      NoHeapDump</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      cancelToast(toast)</span><br><span class="line">      notificationManager.cancel(R.id.leak_canary_notification_dumping_heap)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>可以看出主要代码是调用Debug.dumpHprofData(heapDumpFile.absolutePath)方法来dump堆栈，这个是系统的方法，调用这个方法dump堆栈的时候会造成整个界面卡住，因此你会发现每次Leakcanary开始dump堆栈的时候，整个App是没法操作的，这也是为什么前面要控制两次dump的时间间隔不能小于一分钟的原因，主要是为了防止频繁dump对开发者造成的干扰。</p><h3 id="HeapAnalyzerService-runAnalysis"><a href="#HeapAnalyzerService-runAnalysis" class="headerlink" title="HeapAnalyzerService.runAnalysis"></a>HeapAnalyzerService.runAnalysis</h3><p>最后来看下Heap分析：HeapAnalyzerService.runAnalysis方法：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">companion</span> <span class="keyword">object</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">runAnalysis</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">      context: <span class="type">Context</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">      heapDumpFile: <span class="type">File</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">      heapDumpDurationMillis: <span class="type">Long</span>? = <span class="literal">null</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">      heapDumpReason: <span class="type">String</span> = <span class="string">"Unknown"</span></span></span></span><br><span class="line"><span class="function"><span class="params">    )</span></span> &#123;</span><br><span class="line">      <span class="keyword">val</span> intent = Intent(context, HeapAnalyzerService::<span class="class"><span class="keyword">class</span>.<span class="title">java</span>)</span></span><br><span class="line">      intent.putExtra(HEAPDUMP_FILE_EXTRA, heapDumpFile)</span><br><span class="line">      intent.putExtra(HEAPDUMP_REASON_EXTRA, heapDumpReason)</span><br><span class="line">      heapDumpDurationMillis?.let &#123;</span><br><span class="line">        intent.putExtra(HEAPDUMP_DURATION_MILLIS_EXTRA, heapDumpDurationMillis)</span><br><span class="line">      &#125;</span><br><span class="line">      startForegroundService(context, intent)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">startForegroundService</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">      context: <span class="type">Context</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">      intent: <span class="type">Intent</span></span></span></span><br><span class="line"><span class="function"><span class="params">    )</span></span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (SDK_INT &gt;= <span class="number">26</span>) &#123;</span><br><span class="line">        context.startForegroundService(intent)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// Pre-O behavior.</span></span><br><span class="line">        context.startService(intent)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>可以看出这个runAnalysis方法会启动给一个ForegroundService，这个HeapAnalyzerService是继承自ForegroundService的，而ForegroundService继承自IntentService。来看下HeapAnalyzerService的onHandleIntentInForeground方法：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onHandleIntentInForeground</span><span class="params">(intent: <span class="type">Intent</span>?)</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (intent == <span class="literal">null</span> || !intent.hasExtra(HEAPDUMP_FILE_EXTRA)) &#123;</span><br><span class="line">      SharkLog.d &#123; <span class="string">"HeapAnalyzerService received a null or empty intent, ignoring."</span> &#125;</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Since we're running in the main process we should be careful not to impact it.</span></span><br><span class="line">    Process.setThreadPriority(Process.THREAD_PRIORITY_BACKGROUND)</span><br><span class="line">    <span class="keyword">val</span> heapDumpFile = intent.getSerializableExtra(HEAPDUMP_FILE_EXTRA) <span class="keyword">as</span> File</span><br><span class="line">    <span class="keyword">val</span> heapDumpReason = intent.getStringExtra(HEAPDUMP_REASON_EXTRA)</span><br><span class="line">    <span class="keyword">val</span> heapDumpDurationMillis = intent.getLongExtra(HEAPDUMP_DURATION_MILLIS_EXTRA, -<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> config = LeakCanary.config</span><br><span class="line">    <span class="keyword">val</span> heapAnalysis = <span class="keyword">if</span> (heapDumpFile.exists()) &#123;</span><br><span class="line">      analyzeHeap(heapDumpFile, config)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      missingFileFailure(heapDumpFile)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">val</span> fullHeapAnalysis = <span class="keyword">when</span> (heapAnalysis) &#123;</span><br><span class="line">      <span class="keyword">is</span> HeapAnalysisSuccess -&gt; heapAnalysis.copy(</span><br><span class="line">        dumpDurationMillis = heapDumpDurationMillis,</span><br><span class="line">        metadata = heapAnalysis.metadata + (<span class="string">"Heap dump reason"</span> to heapDumpReason)</span><br><span class="line">      )</span><br><span class="line">      <span class="keyword">is</span> HeapAnalysisFailure -&gt; heapAnalysis.copy(dumpDurationMillis = heapDumpDurationMillis)</span><br><span class="line">    &#125;</span><br><span class="line">    onAnalysisProgress(REPORTING_HEAP_ANALYSIS)</span><br><span class="line">    config.onHeapAnalyzedListener.onHeapAnalyzed(fullHeapAnalysis)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">analyzeHeap</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    heapDumpFile: <span class="type">File</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">    config: <span class="type">Config</span></span></span></span><br><span class="line"><span class="function"><span class="params">  )</span></span>: HeapAnalysis &#123;</span><br><span class="line">    <span class="keyword">val</span> heapAnalyzer = HeapAnalyzer(<span class="keyword">this</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> proguardMappingReader = <span class="keyword">try</span> &#123;</span><br><span class="line">      ProguardMappingReader(assets.<span class="keyword">open</span>(PROGUARD_MAPPING_FILE_NAME))</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e: IOException) &#123;</span><br><span class="line">      <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> heapAnalyzer.analyze(</span><br><span class="line">      heapDumpFile = heapDumpFile,</span><br><span class="line">      leakingObjectFinder = config.leakingObjectFinder,</span><br><span class="line">      referenceMatchers = config.referenceMatchers,</span><br><span class="line">      computeRetainedHeapSize = config.computeRetainedHeapSize,</span><br><span class="line">      objectInspectors = config.objectInspectors,</span><br><span class="line">      metadataExtractor = config.metadataExtractor,</span><br><span class="line">      proguardMapping = proguardMappingReader?.readProguardMapping()</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>可以看出如果heapDumpFile存在就会调用下面的analyzeHeap方法，在这个方法里面最终会new一个HeapAnalyzer对象，然后调用analyze方法进行堆栈分析。</p><p>到这里，整个dump堆栈的分析过程就结束了。</p><hr align="center" width="“100%”" color="#0e0e0e" size="1"><font size="3" color="red">如果您觉得写的还不错，感谢打赏：</font><p align="center"><img src="/resources/images/wechat_pay.png" width="150" alt="微信支付"><img src="/resources/images/ali_pay.jpeg" width="150" alt="支付宝"></p>]]></content>
    
    <summary type="html">
    
      LeakCanary源码解析之——dump堆栈
    
    </summary>
    
      <category term="Android源码解析" scheme="http://easyliu.com/categories/Android%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
    
    
      <category term="Android" scheme="http://easyliu.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>LeakCanary源码解析之——内存泄漏监测</title>
    <link href="http://easyliu.com/2020/12/19/android_source_analysis/leakcanary/"/>
    <id>http://easyliu.com/2020/12/19/android_source_analysis/leakcanary/</id>
    <published>2020-12-19T12:51:55.000Z</published>
    <updated>2020-12-19T16:00:18.405Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在日常开发中，肯定都使用过LeakCanary这个库来监测app的内存泄漏问题。LeakCanary会自动监测、分析以及上报内存泄漏，其工作主要是分为以下四步：</p><blockquote><p>1、监测泄漏的对象</p><p>2、dump堆栈</p><p>3、分析堆栈</p><p>4、对泄漏进行归类,然后通过通知的方式上报内存泄漏</p></blockquote><p>那么LeakCanary监测内存泄漏的原理是什么呢，怎么判断一个Activity或者Fragment被泄漏了呢？本篇文章就从源码的角度来对LeakCanary工作的第一步：监测泄漏的对象 来进行剖析。</p><p>本次分析源码基于：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">dependencies</span> &#123;</span><br><span class="line">  debugImplementation <span class="string">'com.squareup.leakcanary:leakcanary-android:2.5'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对应的github官网：<a href="https://github.com/square/leakcanary" target="_blank" rel="noopener">https://github.com/square/leakcanary</a></p><p>有一个需要注意的点：</p><p>LeakCanary 2.x版本相比之前的1.x版本相比有比较大的改动，包括集成方式的改变以及使用kotlin进行了重写，如果之前项目中集成的是1.x版本，想升级到2.x版本的话，可以参考官网的升级文档：<br><a href="https://square.github.io/leakcanary/upgrading-to-leakcanary-2.0/" target="_blank" rel="noopener">https://square.github.io/leakcanary/upgrading-to-leakcanary-2.0/</a></p><p>本次源码分析是基于kotlin的，如果对kotlin不太了解，可以上kotlin中文官网学习一下：<br><a href="https://www.kotlincn.net/docs/reference/" target="_blank" rel="noopener">https://www.kotlincn.net/docs/reference/</a></p><p>关于LeakCanary更多资料参考官网：<a href="https://square.github.io/leakcanary/" target="_blank" rel="noopener">https://square.github.io/leakcanary/</a></p><h2 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h2><p>根据官方文档，升级到2.x版本之后，只需要在gradle集成一下leakcanary就行了，在2.x版本之前是需要应用的Application里面主动调用以下代码来安装Leakcanary的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExampleApplication</span> <span class="keyword">extends</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onCreate();</span><br><span class="line">    <span class="keyword">if</span> (LeakCanary.isInAnalyzerProcess(<span class="keyword">this</span>)) &#123;</span><br><span class="line">      <span class="comment">// This process is dedicated to LeakCanary for heap analysis.</span></span><br><span class="line">      <span class="comment">// You should not init your app in this process.</span></span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    LeakCanary.install(<span class="keyword">this</span>);</span><br><span class="line">    <span class="comment">// Normal app init code...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么2.x版本是怎么做到自动自动安装Leakcanary的呢？到这里大家可能会想到使用ContentProvider？</p><h3 id="LeakCanary安装"><a href="#LeakCanary安装" class="headerlink" title="LeakCanary安装"></a>LeakCanary安装</h3><p>没错，在Leakcanary里面有一个AppWatcherInstaller类，继承自ContentProvider：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Content providers are loaded before the application class is created. [AppWatcherInstaller] is</span></span><br><span class="line"><span class="comment"> * used to install [leakcanary.AppWatcher] on application start.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">internal</span> <span class="keyword">sealed</span> <span class="class"><span class="keyword">class</span> <span class="title">AppWatcherInstaller</span> : <span class="type">ContentProvider</span></span>() &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreate</span><span class="params">()</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">    <span class="keyword">val</span> application = context!!.applicationContext <span class="keyword">as</span> Application</span><br><span class="line">    AppWatcher.manualInstall(application)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>在manifest里面的定义如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">manifest</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">package</span>=<span class="string">"com.squareup.leakcanary.objectwatcher"</span> &gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">uses-sdk</span> <span class="attr">android:minSdkVersion</span>=<span class="string">"14"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">application</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">provider</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:name</span>=<span class="string">"leakcanary.internal.AppWatcherInstaller$MainProcess"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:authorities</span>=<span class="string">"$&#123;applicationId&#125;.leakcanary-installer"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:enabled</span>=<span class="string">"@bool/leak_canary_watcher_auto_install"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:exported</span>=<span class="string">"false"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">application</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br></pre></td></tr></table></figure><p>可以通过leak_canary_watcher_auto_install开关控制其是否enable。</p><p>从AppWatcherInstaller可以看出在onCreate方法里面调用了AppWatcher.manualInstall(application)方法：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">object</span> AppWatcher &#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * [AppWatcher] is automatically installed in the main process on startup. You can</span></span><br><span class="line"><span class="comment">   * disable this behavior by overriding the `leak_canary_watcher_auto_install` boolean resource:</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * </span></span><br><span class="line"><span class="comment">   * &lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="comment">   * &lt;resources&gt;</span></span><br><span class="line"><span class="comment">   *   &lt;bool name="leak_canary_watcher_auto_install"&gt;false&lt;/bool&gt;</span></span><br><span class="line"><span class="comment">   * &lt;/resources&gt;</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * If you disabled automatic install then you can call this method to install [AppWatcher].</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">fun</span> <span class="title">manualInstall</span><span class="params">(application: <span class="type">Application</span>)</span></span> &#123;</span><br><span class="line">    InternalAppWatcher.install(application)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个AppWatcher是一个单例，如果我们通过设置leak_canary_watcher_auto_install把AppWatcher自动安装给关掉了，外部可以直接调用AppWatcher.manualInstall(application)方法进行手动安装。AppWatcher还提供了一个Config类来进行一些配置，比如配置是否要监测fragment销毁，是否要监测ViewModel销毁以及监测时长等等，具体可以深入AppWatcher里面去查看，config使用方式为:</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Builder for [Config] intended to be used only from Java code.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Usage:</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * AppWatcher.Config config = AppWatcher.getConfig().newBuilder()</span></span><br><span class="line"><span class="comment"> *    .watchFragmentViews(false)</span></span><br><span class="line"><span class="comment"> *    .build();</span></span><br><span class="line"><span class="comment"> * AppWatcher.setConfig(config);</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * For idiomatic Kotlin use `copy()` method instead:</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * AppWatcher.config = AppWatcher.config.copy(watchFragmentViews = false)</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p>在AppWatcher.manualInstall里面又调用了InternalAppWatcher.install方法:</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">internal</span> <span class="keyword">object</span> InternalAppWatcher &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">val</span> checkRetainedExecutor = Executor &#123;</span><br><span class="line">    mainHandler.postDelayed(it, AppWatcher.config.watchDurationMillis)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">val</span> objectWatcher = ObjectWatcher(</span><br><span class="line">      clock = clock,</span><br><span class="line">      checkRetainedExecutor = checkRetainedExecutor,</span><br><span class="line">      isEnabled = &#123; <span class="literal">true</span> &#125;</span><br><span class="line">  )</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">fun</span> <span class="title">install</span><span class="params">(application: <span class="type">Application</span>)</span></span> &#123;</span><br><span class="line">    checkMainThread()</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>::application.isInitialized) &#123;</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    InternalAppWatcher.application = application</span><br><span class="line">    <span class="keyword">if</span> (isDebuggableBuild) &#123;</span><br><span class="line">      SharkLog.logger = DefaultCanaryLog()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> configProvider = &#123; AppWatcher.config &#125;</span><br><span class="line">    ActivityDestroyWatcher.install(application, objectWatcher, configProvider)</span><br><span class="line">    FragmentDestroyWatcher.install(application, objectWatcher, configProvider)</span><br><span class="line">    onAppWatcherInstalled(application)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在InternalAppWatcher的install当中，首先检查是否在主线程，如果不是在主线程就会抛crash。然后分别调用了ActivityDestoryWatcher.install方法以及FragmentDestroyWatcher.install方法，传入了全局的AppWatcher.config配置以及一个ObjectWatcher对象。这个ObjectWatcher才是真正的主角，稍后会讲到。接下来看下ActivityDestroyWatcher的实现原理。FragmentDestroyWatcher的实现原理也是差不多的，只不过是监听fragment的destory的回调而已，感兴趣的可以看下</p><h3 id="ActivityDestroyWatcher"><a href="#ActivityDestroyWatcher" class="headerlink" title="ActivityDestroyWatcher"></a>ActivityDestroyWatcher</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">internal</span> <span class="class"><span class="keyword">class</span> <span class="title">ActivityDestroyWatcher</span> <span class="keyword">private</span> <span class="keyword">constructor</span></span>(</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">val</span> objectWatcher: ObjectWatcher,</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">val</span> configProvider: () -&gt; Config</span><br><span class="line">) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">val</span> lifecycleCallbacks =</span><br><span class="line">    <span class="keyword">object</span> : Application.ActivityLifecycleCallbacks <span class="keyword">by</span> noOpDelegate() &#123;</span><br><span class="line">      <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onActivityDestroyed</span><span class="params">(activity: <span class="type">Activity</span>)</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (configProvider().watchActivities) &#123;</span><br><span class="line">          objectWatcher.watch(</span><br><span class="line">              activity, <span class="string">"<span class="subst">$&#123;activity::class.java.name&#125;</span> received Activity#onDestroy() callback"</span></span><br><span class="line">          )</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">companion</span> <span class="keyword">object</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">install</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">      application: <span class="type">Application</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">      objectWatcher: <span class="type">ObjectWatcher</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">      configProvider: () -&gt; <span class="type">Config</span></span></span></span><br><span class="line"><span class="function"><span class="params">    )</span></span> &#123;</span><br><span class="line">      <span class="keyword">val</span> activityDestroyWatcher =</span><br><span class="line">        ActivityDestroyWatcher(objectWatcher, configProvider)</span><br><span class="line">      application.registerActivityLifecycleCallbacks(activityDestroyWatcher.lifecycleCallbacks)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看出install方法里面就是往application里面注册了一个ActivityLifecycleCallbacks，当activity销毁的时候，就会调用objectWatcher的watch方法来观察这个对象。那么监测activity是否泄漏的逻辑肯定是在这个watch方法里面了！刚刚前面前面也说了ObjectWatcher才是真正的主角，那么我们来重点分析一下这个ObjectWatcher：</p><h3 id="ObjectWatcher"><a href="#ObjectWatcher" class="headerlink" title="ObjectWatcher"></a>ObjectWatcher</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * [ObjectWatcher] can be passed objects to [watch]. It will create [KeyedWeakReference] instances</span></span><br><span class="line"><span class="comment"> * that reference watches objects, and check if those references have been cleared as expected on</span></span><br><span class="line"><span class="comment"> * the [checkRetainedExecutor] executor. If not, these objects are considered retained and</span></span><br><span class="line"><span class="comment"> * [ObjectWatcher] will then notify the [onObjectRetainedListener] on that executor thread.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * [checkRetainedExecutor] is expected to run its tasks on a background thread, with a significant</span></span><br><span class="line"><span class="comment"> * to give the GC the opportunity to identify weakly reachable objects.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * [ObjectWatcher] is thread safe.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// Thread safe by locking on all methods, which is reasonably efficient given how often</span></span><br><span class="line"><span class="comment">// these methods are accessed.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ObjectWatcher</span> <span class="keyword">constructor</span></span>(</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">val</span> clock: Clock,</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">val</span> checkRetainedExecutor: Executor,</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Calls to [watch] will be ignored when [isEnabled] returns false</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">val</span> isEnabled: () -&gt; <span class="built_in">Boolean</span> = &#123; <span class="literal">true</span> &#125;</span><br><span class="line">) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">val</span> onObjectRetainedListeners = mutableSetOf&lt;OnObjectRetainedListener&gt;()</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * References passed to [watch].</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">val</span> watchedObjects = mutableMapOf&lt;String, KeyedWeakReference&gt;()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">val</span> queue = ReferenceQueue&lt;Any&gt;()</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Synchronized</span> <span class="function"><span class="keyword">fun</span> <span class="title">addOnObjectRetainedListener</span><span class="params">(listener: <span class="type">OnObjectRetainedListener</span>)</span></span> &#123;</span><br><span class="line">    onObjectRetainedListeners.add(listener)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Synchronized</span> <span class="function"><span class="keyword">fun</span> <span class="title">removeOnObjectRetainedListener</span><span class="params">(listener: <span class="type">OnObjectRetainedListener</span>)</span></span> &#123;</span><br><span class="line">    onObjectRetainedListeners.remove(listener)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Synchronized</span> <span class="function"><span class="keyword">fun</span> <span class="title">watch</span><span class="params">(watchedObject: <span class="type">Any</span>)</span></span> &#123;</span><br><span class="line">    watch(watchedObject, <span class="string">""</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Watches the provided [watchedObject].</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> description Describes why the object is watched.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@Synchronized</span> <span class="function"><span class="keyword">fun</span> <span class="title">watch</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    watchedObject: <span class="type">Any</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">    description: <span class="type">String</span></span></span></span><br><span class="line"><span class="function"><span class="params">  )</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!isEnabled()) &#123;</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    removeWeaklyReachableObjects()</span><br><span class="line">    <span class="keyword">val</span> key = UUID.randomUUID()</span><br><span class="line">        .toString()</span><br><span class="line">    <span class="keyword">val</span> watchUptimeMillis = clock.uptimeMillis()</span><br><span class="line">    <span class="keyword">val</span> reference =</span><br><span class="line">      KeyedWeakReference(watchedObject, key, description, watchUptimeMillis, queue)</span><br><span class="line">    SharkLog.d &#123;</span><br><span class="line">      <span class="string">"Watching "</span> +</span><br><span class="line">          (<span class="keyword">if</span> (watchedObject <span class="keyword">is</span> Class&lt;*&gt;) watchedObject.toString() <span class="keyword">else</span> <span class="string">"instance of <span class="subst">$&#123;watchedObject.javaClass.name&#125;</span>"</span>) +</span><br><span class="line">          (<span class="keyword">if</span> (description.isNotEmpty()) <span class="string">" (<span class="variable">$description</span>)"</span> <span class="keyword">else</span> <span class="string">""</span>) +</span><br><span class="line">          <span class="string">" with key <span class="variable">$key</span>"</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    watchedObjects[key] = reference</span><br><span class="line">    checkRetainedExecutor.execute &#123;</span><br><span class="line">      moveToRetained(key)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Synchronized</span> <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">moveToRetained</span><span class="params">(key: <span class="type">String</span>)</span></span> &#123;</span><br><span class="line">    removeWeaklyReachableObjects()</span><br><span class="line">    <span class="keyword">val</span> retainedRef = watchedObjects[key]</span><br><span class="line">    <span class="keyword">if</span> (retainedRef != <span class="literal">null</span>) &#123;</span><br><span class="line">      retainedRef.retainedUptimeMillis = clock.uptimeMillis()</span><br><span class="line">      onObjectRetainedListeners.forEach &#123; it.onObjectRetained() &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">removeWeaklyReachableObjects</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// WeakReferences are enqueued as soon as the object to which they point to becomes weakly</span></span><br><span class="line">    <span class="comment">// reachable. This is before finalization or garbage collection has actually happened.</span></span><br><span class="line">    <span class="keyword">var</span> ref: KeyedWeakReference?</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">      ref = queue.poll() <span class="keyword">as</span> KeyedWeakReference?</span><br><span class="line">      <span class="keyword">if</span> (ref != <span class="literal">null</span>) &#123;</span><br><span class="line">        watchedObjects.remove(ref.key)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">while</span> (ref != <span class="literal">null</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在watch方法当中，首先会调用一个removeWeaklyReachableObjects方法。在这里先引入一个知识点：</p><blockquote><p>Java的WeakRefrence可以关联一个queue，当弱引用保存的对象被回收了，就会把这个弱引用对象放入这个队列里面。</p></blockquote><p>因此removeWeaklyReachableObjects方法主要做的事情是：从queue里面获取到一个弱引用对象，如果这个弱引用对象不为空，就把这个弱引用对象对应的对象从watchedObjects里面给移除掉，代表这个对象被回收了，没有泄漏。</p><p>执行removeWeaklyReachableObjects方法之后就会把传入的观察对象封装成一个KeyedWeakReference对象放入watchedObjects这个map当中保存起来。</p><p>最后会调用checkRetainedExecutor线程池来执行一个task。这个线程池的实现也挺简单的:</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">val</span> checkRetainedExecutor = Executor &#123;</span><br><span class="line">  mainHandler.postDelayed(it, AppWatcher.config.watchDurationMillis)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>就是延时一段时间来执行task,这个延时时间默认是5s，外部可配置。</p><p>延时一段时候之后，执行这个task,这个task里面会调用moveToRetained方法。可以看出这个方法也会先调用一下removeWeaklyReachableObjects方法，把可以被回收的对象从map里面移掉，然后再判断map里面是否还保存这个key对应的弱引用对象，如果还保存说明可能发生内存泄漏了！这个时候就会通过onObjectRetainedListeners通知出去交给下一步：dump堆栈 进行处理。在dump堆栈这步里面会先执行gc来进行对象回收，然后再次通过removeWeaklyReachableObjects方法来判断是否真正发生了内存泄漏，如果出现了内存泄漏就会进行dump堆栈处理，最终通过通知的方式上报内存泄漏。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>以上主要是针对Leakcnary中的内存泄漏监测这一部分，从源码的角度进行了分析，总结如下：</p><p>1、通过ContentProvier来进行Leakcanary自动安装（也可以采取手动安装的方式）</p><p>2、通过Lifecycle来监听activity或者fragment的destory回调</p><p>3、利用Java当中WeakRefrenece+ReferenceQueue的特性来判断弱引用对象是否被泄漏了</p><p>Leakcanary监控到有内存泄漏只是第一步，后续还有dump堆栈，分析堆栈等，后续有时间也会对这些部分进行学习。</p><p>做为一个开源库，Leakcanary框架源码还是挺值得学习的，其思想非常值得我们学习，并且个人觉得里面的kotlin代码还是写的挺好的，是学习kotlin的好材料。</p><hr align="center" width="“100%”" color="#0e0e0e" size="1"><font size="3" color="red">如果您觉得写的还不错，感谢打赏：</font><p align="center"><img src="/resources/images/wechat_pay.png" width="150" alt="微信支付"><img src="/resources/images/ali_pay.jpeg" width="150" alt="支付宝"></p>]]></content>
    
    <summary type="html">
    
      LeakCanary源码解析之——内存泄漏监测
    
    </summary>
    
      <category term="Android源码解析" scheme="http://easyliu.com/categories/Android%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
    
    
      <category term="Android" scheme="http://easyliu.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Jetpack Compose初体验</title>
    <link href="http://easyliu.com/2020/12/12/android_jetpack/compose/"/>
    <id>http://easyliu.com/2020/12/12/android_jetpack/compose/</id>
    <published>2020-12-12T14:21:06.000Z</published>
    <updated>2020-12-13T04:33:39.172Z</updated>
    
    <content type="html"><![CDATA[<h2 id="关于Jetpack-Compose"><a href="#关于Jetpack-Compose" class="headerlink" title="关于Jetpack Compose"></a>关于Jetpack Compose</h2><blockquote><p>Android Jetpack Compose是2019 Google/IO大会上推出的一种声明式的UI开发框架，经过一年左右的演进，现在到了alpha阶段。Jetpack Compose是用于构建原生界面的新款Android工具包。它可简化并加快Android上的界面开发。使用更少的代码、强大的工具和直观的KotlinAPI，快速让应用生动而精彩，从此不再需要写xml，使用声明式的Compose函数来构建页面UI。</p></blockquote><p>听起来是不是很厉害的样子？以下是android官方介绍：</p><p><img src="/2020/12/12/android_jetpack/compose/compose_feature.png" alt="compose_feature"><br>从介绍可以看来google对compose还是给予厚望的。</p><p>Jetpack Compose 目前为Alpha版。API Surface尚未最终确定，预计后续会有变动。</p><p>接下来就来开启我们的Compose之旅吧，刚好还可以顺带学习一下kotlin，compose版本基于1.0.0-alpha04</p><h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><h3 id="安装Android-Studio"><a href="#安装Android-Studio" class="headerlink" title="安装Android Studio"></a>安装Android Studio</h3><p>首先需要安装最新Canary版Android Studio预览版本，当您搭配使用Android Studio和 Jetpack Compose开发应用时，可以从智能编辑器功能中受益，这些功能包括“新建项目”模板和立即预览 Compose 界面等。下载链接：<a href="https://developer.android.com/studio/preview" target="_blank" rel="noopener">https://developer.android.com/studio/preview</a></p><h3 id="创建Jetpack-Compose项目"><a href="#创建Jetpack-Compose项目" class="headerlink" title="创建Jetpack Compose项目"></a>创建Jetpack Compose项目</h3><p>关于如何创建Jetpack Compose项目，参考：<a href="https://developer.android.com/jetpack/compose/setup" target="_blank" rel="noopener">https://developer.android.com/jetpack/compose/setup</a></p><h2 id="基础入门"><a href="#基础入门" class="headerlink" title="基础入门"></a>基础入门</h2><p>首先来认识一个非常重要的概念：@Composable<br>在Jetpack Compose中，一切UI的绘制均基于可组合函数。在开发Jetpack Compose程序过程中，基本上都是与@Composable这个注解打交道。使用Composable注解可以标记一个函数为可组合函数，可组合函数可用于描述UI界面中的具体展示内容或绘制规则。通过不同的Compose的组合或嵌套，可以很灵活的完成复杂UI的展示。<br>比如我们在界面上展示一个简单的text，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">class MainActivity : AppCompatActivity() &#123;</span><br><span class="line">    <span class="function">override fun <span class="title">onCreate</span><span class="params">(savedInstanceState: Bundle?)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState)</span><br><span class="line">        setContent &#123;</span><br><span class="line">            Text(text = <span class="string">"hello world!"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行效果如下：<br><img src="/2020/12/12/android_jetpack/compose/compose_simple.png" alt="compose_simple"><br>是不是很神奇！<br>其实对于setContent来说，其接受@Compose注解的子元素，Text其实就是一个组合函数，在Jetpack Compose当中类似于TextView提供文本展示的能力。我们还可以换一种写法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">class MainActivity : AppCompatActivity() &#123;</span><br><span class="line">    <span class="function">override fun <span class="title">onCreate</span><span class="params">(savedInstanceState: Bundle?)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState)</span><br><span class="line">        setContent &#123;</span><br><span class="line">            hello(name = <span class="string">"hello world!"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function">fun <span class="title">hello</span><span class="params">(name: String)</span> </span>&#123;</span><br><span class="line">    Text(text = name)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行效果也是一样的。在Compose的世界里，万物皆@Compose注解。</p><p>上面只是简单的展示了一个文本，我们还可以给这个文本设置一些属性，比如常见的文本颜色，文字大小等，还可以使用Modifier来设置背景颜色、上下padding等:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">class MainActivity : AppCompatActivity() &#123;</span><br><span class="line">    <span class="function">override fun <span class="title">onCreate</span><span class="params">(savedInstanceState: Bundle?)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState)</span><br><span class="line">        setContent &#123;</span><br><span class="line">            Greeting(name = <span class="string">"hello world!"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function">fun <span class="title">Greeting</span><span class="params">(name: String)</span> </span>&#123;</span><br><span class="line">    Text(</span><br><span class="line">            text = name,</span><br><span class="line">            fontSize = TextUnit.Companion.Sp(<span class="number">15</span>),</span><br><span class="line">            fontStyle = FontStyle.Italic,</span><br><span class="line">            maxLines = <span class="number">2</span>,</span><br><span class="line">            color = Color.Blue,</span><br><span class="line">            modifier = Modifier.background(</span><br><span class="line">                    color = Color.Red,</span><br><span class="line">                    shape = RoundedCornerShape(<span class="number">20</span>)</span><br><span class="line">            ).padding(<span class="number">10</span>.dp)</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行效果如下：<br><img src="/2020/12/12/android_jetpack/compose/compose_text_advanced.png" alt="compose_text_advanced"></p><h2 id="预览"><a href="#预览" class="headerlink" title="预览"></a>预览</h2><p>使用@Preview注解支持预览功能，只需要在@Composable函数上面添加@Preview注解是可以进行预览，如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//预览</span></span><br><span class="line"><span class="meta">@Preview</span>(showBackground = <span class="keyword">true</span>)</span><br><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function">fun <span class="title">DefaultPreview</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   Greeting()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function">fun <span class="title">Greeting</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Greeting(name = <span class="string">"hello world!"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function">fun <span class="title">Greeting</span><span class="params">(name: String)</span> </span>&#123;</span><br><span class="line">    Text(</span><br><span class="line">            text = name,</span><br><span class="line">            fontSize = TextUnit.Companion.Sp(<span class="number">15</span>),</span><br><span class="line">            fontStyle = FontStyle.Italic,</span><br><span class="line">            maxLines = <span class="number">2</span>,</span><br><span class="line">            color = Color.Blue,</span><br><span class="line">            modifier = Modifier.background(</span><br><span class="line">                    color = Color.Red,</span><br><span class="line">                    shape = RoundedCornerShape(<span class="number">20</span>)</span><br><span class="line">            ).padding(<span class="number">10</span>.dp)</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2020/12/12/android_jetpack/compose/preview.png" alt="preview"></p><p>接下来讲一下Compose当中一些常用的布局方式</p><h2 id="常用布局"><a href="#常用布局" class="headerlink" title="常用布局"></a>常用布局</h2><p>在日常开发中，铁定是少不了各种布局方式的，Jetpack compose也提供了相当多的布局方式，首先是横向布局Row。</p><h3 id="Row"><a href="#Row" class="headerlink" title="Row"></a>Row</h3><p>Row提供了横向布局的能力，如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Row</span></span><br><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function">fun <span class="title">RowTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> nameList = listOf(<span class="string">"1"</span>, <span class="string">"2"</span>, <span class="string">"3"</span>)</span><br><span class="line">    Row(</span><br><span class="line">            modifier = Modifier.padding(<span class="number">0</span>.dp, <span class="number">16</span>.dp),</span><br><span class="line">            verticalAlignment = Alignment.CenterVertically</span><br><span class="line">    ) &#123;</span><br><span class="line">        nameList.forEach() &#123; name -&gt;</span><br><span class="line">            <span class="comment">//进行3等分，居中展示</span></span><br><span class="line">            Text(</span><br><span class="line">                    text = <span class="string">"Row $name"</span>,</span><br><span class="line">                    fontSize = TextUnit.Companion.Sp(<span class="number">15</span>),</span><br><span class="line">                    fontStyle = FontStyle.Normal,</span><br><span class="line">                    maxLines = <span class="number">2</span>,</span><br><span class="line">                    modifier = Modifier.background(</span><br><span class="line">                            color = Color.LightGray,</span><br><span class="line">                            shape = RoundedCornerShape(<span class="number">20</span>)</span><br><span class="line">                    ).padding(<span class="number">10</span>.dp)</span><br><span class="line">                            .weight(<span class="number">0.3f</span>),</span><br><span class="line">                    textAlign = TextAlign.Center</span><br><span class="line">            );</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果如下所示：<br><img src="/2020/12/12/android_jetpack/compose/row_demo.png" alt="row_demo"><br>这里使用了weight属性进行等分，类似于LinearLayout的weight属性</p><h3 id="Column"><a href="#Column" class="headerlink" title="Column"></a>Column</h3><p>Column提供了纵向布局的能力，如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function">fun <span class="title">ColumnTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> nameList = listOf(<span class="string">"1"</span>, <span class="string">"2"</span>, <span class="string">"3"</span>)</span><br><span class="line">    Column(</span><br><span class="line">            modifier = Modifier.padding(<span class="number">0</span>.dp, <span class="number">16</span>.dp),</span><br><span class="line">            horizontalAlignment = Alignment.CenterHorizontally</span><br><span class="line">    ) &#123;</span><br><span class="line">        nameList.forEach &#123; name -&gt;</span><br><span class="line">            Text(</span><br><span class="line">                    text = <span class="string">"Column $name"</span>,</span><br><span class="line">                    fontSize = TextUnit.Companion.Sp(<span class="number">15</span>),</span><br><span class="line">                    fontStyle = FontStyle.Italic,</span><br><span class="line">                    maxLines = <span class="number">2</span>,</span><br><span class="line">                    modifier = Modifier.background(</span><br><span class="line">                            color = Color.LightGray,</span><br><span class="line">                            shape = RoundedCornerShape(<span class="number">20</span>)</span><br><span class="line">                    ).padding(<span class="number">10</span>.dp)</span><br><span class="line">            );</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果如下所示：</p><p><img src="/2020/12/12/android_jetpack/compose/column_demo.png" alt="column_demo"></p><h3 id="Box"><a href="#Box" class="headerlink" title="Box"></a>Box</h3><p>Box提供了叠放的效果，类似于FrameLayout:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Stack Box</span></span><br><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function">fun <span class="title">StackDemo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Box(modifier = Modifier.padding(<span class="number">0</span>.dp, <span class="number">16</span>.dp)) &#123;</span><br><span class="line">        Text(</span><br><span class="line">                text = <span class="string">"layer one"</span>,</span><br><span class="line">                fontSize = TextUnit.Companion.Sp(<span class="number">30</span>),</span><br><span class="line">                color = Color.Blue,</span><br><span class="line">                fontStyle = FontStyle.Italic</span><br><span class="line">        )</span><br><span class="line">        Text(text = <span class="string">"layer two"</span>, fontSize = TextUnit.Companion.Sp(<span class="number">10</span>))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果如下所示：<br><img src="/2020/12/12/android_jetpack/compose/box_demo.png" alt="box_demo"></p><h3 id="滚动列表"><a href="#滚动列表" class="headerlink" title="滚动列表"></a>滚动列表</h3><p>使用ScrollableRow或ScrollableColumn可使Row或Column内的元素滚动,来看下ScrollableColumn的用法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Artist</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> avatarImg: Int = R.drawable.icon;</span><br><span class="line">    <span class="keyword">var</span> name: String? = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">var</span> intro: String? = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">var</span> img: Int = R.drawable.img;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function">fun <span class="title">ArtistCard</span><span class="params">(artist: Artist, onSelected: (Artist)</span> -&gt; Unit) </span>&#123;</span><br><span class="line">    Column(</span><br><span class="line">        Modifier</span><br><span class="line">            .fillMaxWidth()</span><br><span class="line">            .padding(<span class="number">16</span>.dp)</span><br><span class="line">            .clickable(onClick = &#123; onSelected(artist) &#125;)</span><br><span class="line">    ) &#123;</span><br><span class="line">        Row() &#123;</span><br><span class="line">            val avatarImg = imageResource(artist.avatarImg)</span><br><span class="line">            Image(</span><br><span class="line">                avatarImg,</span><br><span class="line">                modifier = Modifier.background(</span><br><span class="line">                    color = Color.Transparent,</span><br><span class="line">                    shape = RoundedCornerShape(<span class="number">20</span>.dp)</span><br><span class="line">                )</span><br><span class="line">                    .width(<span class="number">60</span>.dp).height(<span class="number">60</span>.dp)</span><br><span class="line">            )</span><br><span class="line">            Column(</span><br><span class="line">                    verticalArrangement = Arrangement.Center,</span><br><span class="line">                    horizontalAlignment = Alignment.CenterHorizontally,</span><br><span class="line">            ) &#123;</span><br><span class="line">                artist.name?.let &#123; Text(text = it) &#125;</span><br><span class="line">                artist.intro?.let &#123;</span><br><span class="line">                    Text(text = it, modifier = Modifier.padding(<span class="number">0</span>.dp, <span class="number">8</span>.dp, <span class="number">0</span>.dp, <span class="number">0</span>.dp))</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        val img = imageResource(artist.img)</span><br><span class="line">        Image(</span><br><span class="line">            img, modifier = Modifier.height(<span class="number">250</span>.dp).padding(<span class="number">0</span>.dp, <span class="number">16</span>.dp, <span class="number">0</span>.dp, <span class="number">0</span>.dp)</span><br><span class="line">                .background(color = Color.LightGray, shape = RoundedCornerShape(<span class="number">20</span>.dp))</span><br><span class="line">                .fillMaxWidth()</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function">fun <span class="title">Feed</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    feedItems: List&lt;Artist&gt;,</span></span></span><br><span class="line"><span class="function"><span class="params">    onSelected: (Artist)</span> -&gt; Unit</span></span><br><span class="line"><span class="function">) </span>&#123;</span><br><span class="line">    <span class="comment">//ScrollableColumn</span></span><br><span class="line">    ScrollableColumn(Modifier.fillMaxSize()) &#123;</span><br><span class="line">        feedItems.forEach &#123;</span><br><span class="line">            ArtistCard(it, onSelected)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> fun <span class="title">ListDemo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    val artistOne = Artist()</span><br><span class="line">    artistOne.name = <span class="string">"张三"</span></span><br><span class="line">    artistOne.intro = <span class="string">"哈哈哈哈"</span></span><br><span class="line">    artistOne.avatarImg = R.drawable.icon</span><br><span class="line">    artistOne.img = R.drawable.img</span><br><span class="line"></span><br><span class="line">    val artistTwo = Artist()</span><br><span class="line">    artistTwo.name = <span class="string">"张三"</span></span><br><span class="line">    artistTwo.intro = <span class="string">"哈哈哈哈"</span></span><br><span class="line">    artistTwo.avatarImg = R.drawable.icon</span><br><span class="line">    artistTwo.img = R.drawable.img</span><br><span class="line"></span><br><span class="line">    val artistThree = Artist()</span><br><span class="line">    artistThree.name = <span class="string">"张三"</span></span><br><span class="line">    artistThree.intro = <span class="string">"哈哈哈哈"</span></span><br><span class="line">    artistThree.avatarImg = R.drawable.icon</span><br><span class="line">    artistThree.img = R.drawable.img</span><br><span class="line"></span><br><span class="line">    Feed(feedItems = listOf(artistOne, artistTwo, artistThree), onSelected = &#123;</span><br><span class="line">        <span class="comment">// Toast.makeText(this, it.name, Toast.LENGTH_SHORT).show();</span></span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><p>效果如下所示：<br><img src="/2020/12/12/android_jetpack/compose/scrollable_column_demo.png" alt="scrollable_column_demo"></p><p>这个ScrollableColumn就类似于Android的ScrollView，如果要显示的元素很少，这种方法效果很好，但对于大型数据集，很快就会出现性能问题。如需仅显示屏幕上可见的部分元素，可以使用LazyColumnFor或LazyRowFor：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function">fun <span class="title">Feed</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">  feedItems: List&lt;Artist&gt;,</span></span></span><br><span class="line"><span class="function"><span class="params">  onSelected: (Artist)</span> -&gt; Unit</span></span><br><span class="line"><span class="function">) </span>&#123;</span><br><span class="line">  Surface(Modifier.fillMaxSize()) &#123;</span><br><span class="line">    LazyColumnFor(feedItems) &#123; item -&gt;</span><br><span class="line">      ArtistCard(item, onSelected(item))</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>以上只是Jetpack Compose的一个简单使用，还有很多高级的知识点没有涉及，包括ConstraintLayout、自定义布局、内置 Material组件、动画、主题，状态以及框架的实现原理等，如下所示：</p><p><img src="/2020/12/12/android_jetpack/compose/compose_pack.png" alt="compose_pack"></p><p>感兴趣的同学可以花时间进行深入研究一番，应该会有收获。</p><p>总体使用下来的感受的话，结合kotlin搭配使用还是挺灵活的，第一次接触这种声明式UI的写法，还是觉得挺新奇的，做为一个新的知识点还是值得学习一下的～～～。</p><p>官方Sample里面有很多优秀的案例可以参考：<br><a href="https://github.com/android/compose-samples" target="_blank" rel="noopener">https://github.com/android/compose-samples</a></p><p>参考：<br><a href="https://developer.android.com/jetpack/compose" target="_blank" rel="noopener">https://developer.android.com/jetpack/compose</a><br><a href="https://developer.android.com/jetpack/compose/layout" target="_blank" rel="noopener">https://developer.android.com/jetpack/compose/layout</a><br><a href="https://developer.android.com/jetpack/compose/mental-model" target="_blank" rel="noopener">https://developer.android.com/jetpack/compose/mental-model</a></p><hr align="center" width="“100%”" color="#0e0e0e" size="1"><font size="3" color="red">如果您觉得写的还不错，感谢打赏：</font><p align="center"><img src="/resources/images/wechat_pay.png" width="150" alt="微信支付"><img src="/resources/images/ali_pay.jpeg" width="150" alt="支付宝"></p>]]></content>
    
    <summary type="html">
    
      Jetpack Compose初体验
    
    </summary>
    
      <category term="Android架构学习" scheme="http://easyliu.com/categories/Android%E6%9E%B6%E6%9E%84%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Android" scheme="http://easyliu.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>hexo插入音频和视频</title>
    <link href="http://easyliu.com/2020/11/22/hexo/insert_video/"/>
    <id>http://easyliu.com/2020/11/22/hexo/insert_video/</id>
    <published>2020-11-22T04:08:15.000Z</published>
    <updated>2020-12-03T02:58:24.915Z</updated>
    
    <content type="html"><![CDATA[<h2 id="音视频准备"><a href="#音视频准备" class="headerlink" title="音视频准备"></a>音视频准备</h2><h3 id="在线音视频"><a href="#在线音视频" class="headerlink" title="在线音视频"></a>在线音视频</h3><p>如果是在线音视频的话，只要有url就行</p><h3 id="本地音视频"><a href="#本地音视频" class="headerlink" title="本地音视频"></a>本地音视频</h3><p>在public文件夹下面新建一个resources目录，把视频和音频放在这个目录里面，这里我把视频放在video子目录下面，把音频放在audio子目录下面。</p><blockquote><p>为啥要把资源放在public？只有把资源放在public文件夹下面，网页才能访问！！最开始就是在这里卡了很久一直没法播放，原来是路径设置不对导致没法访问</p></blockquote><h2 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h2><p>安装aplayer以及dplayer:</p><blockquote><p>npm install hexo-tag-aplayer</p><p>npm install hexo-tag-dplayer</p></blockquote><p>关于aplayer以及dplayer语法，参考：</p><p><a href="https://github.com/MoePlayer/hexo-tag-aplayer" target="_blank" rel="noopener">hexo-tag-aplayer</a></p><p><a href="https://github.com/MoePlayer/hexo-tag-dplayer" target="_blank" rel="noopener">hexo-tag-dplayer</a></p><p><a href="https://www.jianshu.com/p/26a7fc7cc185" target="_blank" rel="noopener">Hexo博客中插入音乐/视频/</a></p><p><a href="https://github.com/DIYgod/DPlayer" target="_blank" rel="noopener">DPlayer</a></p><p><a href="http://dplayer.js.org/guide.html#quick-start" target="_blank" rel="noopener">http://dplayer.js.org/guide.html#quick-start</a></p><p>然后在md文件中插入如下代码，视频就正常加载起播了，这里播放的是本地视频！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&#123;% </span><br><span class="line">    dplayer     </span><br><span class="line">    <span class="string">"url=/resources/video/scenery.mp4"</span>  <span class="comment">//设置视频目录，这里我放在了网站根目录下面，也就是public目录下面 </span></span><br><span class="line">    <span class="string">"pic=/resources/images/scenery_three.jpeg"</span> <span class="comment">//设置封面图，同样是放在根目录下面 </span></span><br><span class="line">    <span class="string">"loop=yes"</span>  <span class="comment">//循环播放</span></span><br><span class="line">    <span class="string">"theme=#FADFA3"</span>   <span class="comment">//主题</span></span><br><span class="line">    <span class="string">"autoplay=true"</span>  <span class="comment">//自动播放</span></span><br><span class="line">    <span class="string">"screenshot=true"</span> <span class="comment">//允许截屏</span></span><br><span class="line">    <span class="string">"hotkey=true"</span> <span class="comment">//允许hotKey，比如点击空格暂停视频等操作</span></span><br><span class="line">    <span class="string">"preload=auto"</span> <span class="comment">//预加载：auto</span></span><br><span class="line">    <span class="string">"volume=0.9"</span>  <span class="comment">//初始音量</span></span><br><span class="line">    <span class="string">"playbackSpeed=1"</span><span class="comment">//播放速度1倍速，可以选择1.5,2等</span></span><br><span class="line">    <span class="string">"lang=zh-cn"</span><span class="comment">//语言</span></span><br><span class="line">    <span class="string">"mutex=true"</span><span class="comment">//播放互斥，就比如其他视频播放就会导致这个视频自动暂停</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//下面是弹幕相关</span></span><br><span class="line">    <span class="string">"id=9E2E3368B56CD123BB4"</span></span><br><span class="line">    <span class="string">"api=https://api.prprpr.me/dplayer/"</span></span><br><span class="line">    <span class="string">"token=tokendemo"</span></span><br><span class="line">    <span class="string">"maximum=1000"</span></span><br><span class="line">    <span class="string">"addition=['https://api.prprpr.me/dplayer/v3/bilibili?aid=4157142']"</span></span><br><span class="line">    <span class="string">"user=DIYgod"</span></span><br><span class="line">    <span class="string">"bottom=15%"</span></span><br><span class="line">    <span class="string">"unlimited=true"</span></span><br><span class="line">%&#125;</span><br></pre></td></tr></table></figure><p>以上只是部分设置，更多参数设置参考<a href="https://github.com/DIYgod/DPlayer" target="_blank" rel="noopener">DPlayer</a></p><div id="dplayer0" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer0"),"autoplay":true,"theme":"#FADFA3","loop":true,"lang":"zh-cn","screenshot":true,"hotkey":true,"preload":"auto","volume":0.9,"mutex":true,"video":{"url":"/resources/video/scenery.mp4","pic":"/resources/images/scenery_three.jpeg"},"danmaku":{"id":"9E2E3368B56CD123BB4","api":"https://api.prprpr.me/dplayer/","token":"tokendemo","maximum":1000,"addition":["['https://api.prprpr.me/dplayer/v3/bilibili?aid=4157142']"]}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script><p>插入音频代码,音频就正常加载起播了，这里播放的是在线音频！</p><p>aplayer安装不了，先注释：</p><hr align="center" width="“100%”" color="#0e0e0e" size="1"><font size="3" color="red">如果您觉得写的还不错，感谢打赏：</font><p align="center"><img src="/resources/images/wechat_pay.png" width="150" alt="微信支付"><img src="/resources/images/ali_pay.jpeg" width="150" alt="支付宝"></p>]]></content>
    
    <summary type="html">
    
      hexo插入音频和视频
    
    </summary>
    
      <category term="开发工具" scheme="http://easyliu.com/categories/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="hexo进阶" scheme="http://easyliu.com/tags/hexo%E8%BF%9B%E9%98%B6/"/>
    
  </entry>
  
  <entry>
    <title>厦门——2020.11.22-24</title>
    <link href="http://easyliu.com/2020/11/22/life/2020_11_22-24-xiamen/"/>
    <id>http://easyliu.com/2020/11/22/life/2020_11_22-24-xiamen/</id>
    <published>2020-11-22T02:39:18.000Z</published>
    <updated>2020-11-22T02:52:06.179Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2020/11/22/life/2020_11_22-24-xiamen/WechatIMG18.jpeg" alt="WechatIMG18"><br><img src="/2020/11/22/life/2020_11_22-24-xiamen/WechatIMG19.jpeg" alt="WechatIMG19"><br><img src="/2020/11/22/life/2020_11_22-24-xiamen/WechatIMG20.jpeg" alt="WechatIMG20"><br><img src="/2020/11/22/life/2020_11_22-24-xiamen/WechatIMG21.jpeg" alt="WechatIMG21"><br><img src="/2020/11/22/life/2020_11_22-24-xiamen/WechatIMG22.jpeg" alt="WechatIMG22"><br><img src="/2020/11/22/life/2020_11_22-24-xiamen/WechatIMG23.jpeg" alt="WechatIMG23"><br><img src="/2020/11/22/life/2020_11_22-24-xiamen/WechatIMG24.jpeg" alt="WechatIMG24"><br><img src="/2020/11/22/life/2020_11_22-24-xiamen/WechatIMG25.jpeg" alt="WechatIMG25"><br><img src="/2020/11/22/life/2020_11_22-24-xiamen/WechatIMG26.jpeg" alt="WechatIMG26"><br><img src="/2020/11/22/life/2020_11_22-24-xiamen/WechatIMG27.jpeg" alt="WechatIMG27"><br><img src="/2020/11/22/life/2020_11_22-24-xiamen/WechatIMG28.jpeg" alt="WechatIMG28"><br><img src="/2020/11/22/life/2020_11_22-24-xiamen/WechatIMG29.jpeg" alt="WechatIMG29"><br><img src="/2020/11/22/life/2020_11_22-24-xiamen/WechatIMG30.jpeg" alt="WechatIMG30"></p>]]></content>
    
    <summary type="html">
    
      厦门——2020.11.22-24
    
    </summary>
    
      <category term="旅游" scheme="http://easyliu.com/categories/%E6%97%85%E6%B8%B8/"/>
    
    
      <category term="日常生活" scheme="http://easyliu.com/tags/%E6%97%A5%E5%B8%B8%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>梧桐山——2020.11.21</title>
    <link href="http://easyliu.com/2020/11/22/life/2020_11_21_wutong_mountain/"/>
    <id>http://easyliu.com/2020/11/22/life/2020_11_21_wutong_mountain/</id>
    <published>2020-11-22T02:10:28.000Z</published>
    <updated>2020-11-22T02:31:26.377Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2020/11/22/life/2020_11_21_wutong_mountain/one.jpeg" alt="one"><br><img src="/2020/11/22/life/2020_11_21_wutong_mountain/two.jpeg" alt="two"><br><img src="/2020/11/22/life/2020_11_21_wutong_mountain/three.jpeg" alt="three"></p><h2 id="看我犀利的眼神"><a href="#看我犀利的眼神" class="headerlink" title="看我犀利的眼神"></a>看我犀利的眼神</h2><p><img src="/2020/11/22/life/2020_11_21_wutong_mountain/four.jpeg" alt="four"><br><img src="/2020/11/22/life/2020_11_21_wutong_mountain/five.jpeg" alt="five"><br><img src="/2020/11/22/life/2020_11_21_wutong_mountain/six.jpeg" alt="six"><br><img src="/2020/11/22/life/2020_11_21_wutong_mountain/seven.jpeg" alt="seven"><br><img src="/2020/11/22/life/2020_11_21_wutong_mountain/eight.jpeg" alt="eight"></p><h2 id="置身仙境"><a href="#置身仙境" class="headerlink" title="置身仙境"></a>置身仙境</h2><p><img src="/2020/11/22/life/2020_11_21_wutong_mountain/nine.jpeg" alt="nine"></p>]]></content>
    
    <summary type="html">
    
      梧桐山——2020.11.21
    
    </summary>
    
      <category term="周末活动" scheme="http://easyliu.com/categories/%E5%91%A8%E6%9C%AB%E6%B4%BB%E5%8A%A8/"/>
    
    
      <category term="日常生活" scheme="http://easyliu.com/tags/%E6%97%A5%E5%B8%B8%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>Android MVVM框架之Livedata以及ViewModel</title>
    <link href="http://easyliu.com/2020/11/07/android_jetpack/livedata/"/>
    <id>http://easyliu.com/2020/11/07/android_jetpack/livedata/</id>
    <published>2020-11-07T10:07:19.000Z</published>
    <updated>2020-12-09T09:55:03.054Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><h3 id="场景1"><a href="#场景1" class="headerlink" title="场景1:"></a>场景1:</h3><p>假设现在我们在Activity或者fragment当中会监听数据Model的回调，在回调里面会更新一些UI的状态，那么就会存在以下问题：</p><blockquote><p>1、当页面不可见的时候也是能收到回调的，相当于在后台进行UI刷新，这个其实是不对的。一般情况下如果想解决这个问题的话就需要在onStop的时候反注册Model监听，然后等页面回来onStart的时候重新注册Model监听且需要主动读取一次Model数据进行ui刷新，听起来是不是很麻烦？</p><p>2、在onDestory里面会需要主动反注册Model的回调,如果忘记反注册就会导致内存泄漏问题</p></blockquote><p>针对这个问题，google在jetpack组件的Android架构组件当中提供了LiveData类来解决这个问题</p><h3 id="场景2"><a href="#场景2" class="headerlink" title="场景2"></a>场景2</h3><p>Activity或者Fragment在后台的时候可能由于资源不足导致销毁重新创建，就会导致界面数据丢失问题，对于简单的数据，Activity 可以使用 onSaveInstanceState() 方法从 onCreate() 中的Bundle恢复其数据，但此方法仅适合可以序列化再反序列化的少量数据，而不适合数量可能较大的数据，如用户列表或位图</p><p>针对这个问题google在jetpack组件的Android架构组件当中提供了ViewModel类来解决这个问题</p><h2 id="MVVM框架"><a href="#MVVM框架" class="headerlink" title="MVVM框架"></a>MVVM框架</h2><p>大家可以看下google推荐的Android架构图,如下所示。ViewModel和LiveData是一起配套使用的，组成了MVVM架构：<br><img src="/2020/11/07/android_jetpack/livedata/final-architecture.png" alt="架构图"></p><h2 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h2><p>ViewModel及LiveData的接入方式参考:<br><a href="https://developer.android.com/jetpack/androidx/releases/lifecycle" target="_blank" rel="noopener">https://developer.android.com/jetpack/androidx/releases/lifecycle</a></p><p>下面看下使用方式：<br>1、首先自定义一个ViewModel类:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NameViewModel</span> <span class="keyword">extends</span> <span class="title">ViewModel</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Create a LiveData with a String</span></span><br><span class="line"><span class="keyword">private</span> MutableLiveData&lt;String&gt; currentName;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MutableLiveData&lt;String&gt; <span class="title">getCurrentName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (currentName == <span class="keyword">null</span>) &#123;</span><br><span class="line">            currentName = <span class="keyword">new</span> MutableLiveData&lt;String&gt;();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> currentName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Rest of the ViewModel...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>自定义一个NamaViewModel继承自ViewModel，稍后会对ViewModel源码进行解析。里面有一个MutableLiveData对象，它是LiveData子类，稍后会对LiveData源码进行解析。</p><p>2、接下来看下这个NameViewModel的使用方式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NameActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> NameViewModel model;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Other code to setup the activity...</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Get the ViewModel.</span></span><br><span class="line">        model = <span class="keyword">new</span> ViewModelProvider(<span class="keyword">this</span>,<span class="keyword">new</span> NewInstanceFactory()).get(NameViewModel<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Create the observer which updates the UI.</span></span><br><span class="line">        <span class="keyword">final</span> Observer&lt;String&gt; nameObserver = <span class="keyword">new</span> Observer&lt;String&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onChanged</span><span class="params">(@Nullable <span class="keyword">final</span> String newName)</span> </span>&#123;</span><br><span class="line">                <span class="comment">// Update the UI, in this case, a TextView.</span></span><br><span class="line">                nameTextView.setText(newName);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Observe the LiveData, passing in this activity as the LifecycleOwner and the observer.</span></span><br><span class="line">        model.getCurrentName().observe(<span class="keyword">this</span>, nameObserver);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看出从ViewModelProvider里面根据class类型到了一个NameViewModel，然后给里面的LiveData注册了一个观察者Observer，在这个Observer会更新TextView的显示文本</p><p>3、更新数据：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">button.setOnClickListener(<span class="keyword">new</span> OnClickListener() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">        String anotherName = <span class="string">"John Doe"</span>;</span><br><span class="line">        model.getCurrentName().setValue(anotherName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>更新数据的方式也很简单，调用LiveData里面的setValue方法即可，如果是在子线程，就调用postValue方法</p><p>以上就是ViewModel+LiveData的使用方式，接下来分别对LiveData及ViewModel进行源码剖析</p><h2 id="LiveData"><a href="#LiveData" class="headerlink" title="LiveData"></a>LiveData</h2><p>LiveData为什么可以解决开头提到的第一个问题<a href="#场景1">场景1</a></p><p>来看下官网关于LiveData的描述：</p><blockquote><p>LiveData 是一种可观察的数据存储器类。与常规的可观察类不同，LiveData 具有生命周期感知能力，意指它遵循其他应用组件（如 Activity、Fragment 或 Service）的生命周期。这种感知能力可确保 LiveData 仅更新处于活跃生命周期状态的应用组件观察者。<br>如果观察者（由 Observer 类表示）的生命周期处于 STARTED 或 RESUMED 状态，则 LiveData 会认为该观察者处于活跃状态。LiveData 只会将更新通知给活跃的观察者。为观察 LiveData 对象而注册的非活跃观察者不会收到更改通知</p></blockquote><p>看起来很厉害的样子，接下来从源码的角度来进行分析：</p><h3 id="LiveData源码解析"><a href="#LiveData源码解析" class="headerlink" title="LiveData源码解析"></a>LiveData源码解析</h3><h4 id="首先是observer方法："><a href="#首先是observer方法：" class="headerlink" title="首先是observer方法："></a>首先是observer方法：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">observe</span><span class="params">(@NonNull LifecycleOwner owner, @NonNull Observer&lt;T&gt; observer)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (owner.getLifecycle().getCurrentState() == DESTROYED) &#123;</span><br><span class="line">        <span class="comment">// ignore</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    LifecycleBoundObserver wrapper = <span class="keyword">new</span> LifecycleBoundObserver(owner, observer);</span><br><span class="line">    ObserverWrapper existing = mObservers.putIfAbsent(observer, wrapper);</span><br><span class="line">    <span class="keyword">if</span> (existing != <span class="keyword">null</span> &amp;&amp; !existing.isAttachedTo(owner)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Cannot add the same observer"</span></span><br><span class="line">                + <span class="string">" with different lifecycles"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (existing != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    owner.getLifecycle().addObserver(wrapper);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到observer方法传入了2个参数： LifecycleOwner（如果对LifecycleOwner不太了解，参考之前的博文：<a href="https://easyliu-ly.github.io/2020/10/31/android_jetpack/lifecycle/" target="_blank" rel="noopener">Android生命周期感应组件lifecycle</a>）和Observer接口，Oberver就是一个简单的观察接口，通过泛型代表具体的数据类型：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Observer</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Called when the data is changed.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> t  The new data</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onChanged</span><span class="params">(@Nullable T t)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法主要分为几部分：</p><p>1、如果当前LifecycleOwner是destoryed的状态就直接返回<br>2、生成一个LifecycleBoundObserver对象wrapper，放入mObservers这个Map当中<br>3、最后把wrapper加入到Lifecycle里面，从这里可以看出LifecycleBoundObserver实现了Lifecycle接口</p><p>解析来看下这个LifecycleBoundObserver对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LifecycleBoundObserver</span> <span class="keyword">extends</span> <span class="title">ObserverWrapper</span> <span class="keyword">implements</span> <span class="title">GenericLifecycleObserver</span> </span>&#123;</span><br><span class="line">        <span class="meta">@NonNull</span> <span class="keyword">final</span> LifecycleOwner mOwner;</span><br><span class="line"></span><br><span class="line">        LifecycleBoundObserver(<span class="meta">@NonNull</span> LifecycleOwner owner, Observer&lt;T&gt; observer) &#123;</span><br><span class="line">            <span class="keyword">super</span>(observer);</span><br><span class="line">            mOwner = owner;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">boolean</span> <span class="title">shouldBeActive</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> mOwner.getLifecycle().getCurrentState().isAtLeast(STARTED);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStateChanged</span><span class="params">(LifecycleOwner source, Lifecycle.Event event)</span> </span>&#123;</span><br><span class="line">            <span class="comment">//1、在LifecycleOwner销毁了之后会自动移除obverver，解决内存泄漏问题</span></span><br><span class="line">            <span class="keyword">if</span> (mOwner.getLifecycle().getCurrentState() == DESTROYED) &#123;</span><br><span class="line">                removeObserver(mObserver);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            activeStateChanged(shouldBeActive());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">boolean</span> <span class="title">isAttachedTo</span><span class="params">(LifecycleOwner owner)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> mOwner == owner;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">detachObserver</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            mOwner.getLifecycle().removeObserver(<span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">ObserverWrapper</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> Observer&lt;T&gt; mObserver;</span><br><span class="line">        <span class="keyword">boolean</span> mActive;</span><br><span class="line">        <span class="keyword">int</span> mLastVersion = START_VERSION;</span><br><span class="line"></span><br><span class="line">        ObserverWrapper(Observer&lt;T&gt; observer) &#123;</span><br><span class="line">            mObserver = observer;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">abstract</span> <span class="keyword">boolean</span> <span class="title">shouldBeActive</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">boolean</span> <span class="title">isAttachedTo</span><span class="params">(LifecycleOwner owner)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">detachObserver</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">activeStateChanged</span><span class="params">(<span class="keyword">boolean</span> newActive)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (newActive == mActive) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// immediately set active state, so we'd never dispatch anything to inactive</span></span><br><span class="line">            <span class="comment">// owner</span></span><br><span class="line">            mActive = newActive;</span><br><span class="line">            <span class="keyword">boolean</span> wasInactive = LiveData.<span class="keyword">this</span>.mActiveCount == <span class="number">0</span>;</span><br><span class="line">            LiveData.<span class="keyword">this</span>.mActiveCount += mActive ? <span class="number">1</span> : -<span class="number">1</span>;</span><br><span class="line">            <span class="comment">//变成active状态</span></span><br><span class="line">            <span class="keyword">if</span> (wasInactive &amp;&amp; mActive) &#123;</span><br><span class="line">                onActive();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//变成InActive状态</span></span><br><span class="line">            <span class="keyword">if</span> (LiveData.<span class="keyword">this</span>.mActiveCount == <span class="number">0</span> &amp;&amp; !mActive) &#123;</span><br><span class="line">                onInactive();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//2、从InActive变成Active，会自动dispatchVaule，也就是页面可见的时候就会自动收到最新的数据回调</span></span><br><span class="line">            <span class="keyword">if</span> (mActive) &#123;</span><br><span class="line">                dispatchingValue(<span class="keyword">this</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>从以上代码可以看出，LifecycleBoundObserver实现了Lifecycle生命周期接口，能够自动感应生命周期的变化，并且解决了最开始<a href="#场景1">场景1</a>提出的2个问题：</p><p>1、在LifecycleOwner销毁了之后会自动移除obverver，解决内存泄漏问题<br>2、从InActive变成Active，会自动dispatchVaule，也就是页面可见的时候就会自动收到最新的数据回调</p><p>我们还注意到LiveData有两个方法:onActive和onInactive，这两个方法在LiveData是空方法，子类可以覆写这俩个方法，在里面做一些注册和反注册的操作，如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StockLiveData</span> <span class="keyword">extends</span> <span class="title">LiveData</span>&lt;<span class="title">BigDecimal</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> StockManager stockManager;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> SimplePriceListener listener = <span class="keyword">new</span> SimplePriceListener() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPriceChanged</span><span class="params">(BigDecimal price)</span> </span>&#123;</span><br><span class="line">            setValue(price);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">StockLiveData</span><span class="params">(String symbol)</span> </span>&#123;</span><br><span class="line">        stockManager = <span class="keyword">new</span> StockManager(symbol);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onActive</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        stockManager.requestPriceUpdates(listener);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onInactive</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        stockManager.removeUpdates(listener);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="接下来是setValue以及postValue"><a href="#接下来是setValue以及postValue" class="headerlink" title="接下来是setValue以及postValue"></a>接下来是setValue以及postValue</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Runnable mPostValueRunnable = <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Object newValue;</span><br><span class="line">        <span class="keyword">synchronized</span> (mDataLock) &#123;</span><br><span class="line">            newValue = mPendingData;</span><br><span class="line">            mPendingData = NOT_SET;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//noinspection unchecked</span></span><br><span class="line">        setValue((T) newValue);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">postValue</span><span class="params">(T value)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">boolean</span> postTask;</span><br><span class="line">    <span class="keyword">synchronized</span> (mDataLock) &#123;</span><br><span class="line">        postTask = mPendingData == NOT_SET;</span><br><span class="line">        mPendingData = value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!postTask) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ArchTaskExecutor.getInstance().postToMainThread(mPostValueRunnable);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Sets the value. If there are active observers, the value will be dispatched to them.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * This method must be called from the main thread. If you need set a value from a background</span></span><br><span class="line"><span class="comment"> * thread, you can use &#123;<span class="doctag">@link</span> #postValue(Object)&#125;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> value The new value</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@MainThread</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">setValue</span><span class="params">(T value)</span> </span>&#123;</span><br><span class="line">    assertMainThread(<span class="string">"setValue"</span>);</span><br><span class="line">    mVersion++;</span><br><span class="line">    mData = value;</span><br><span class="line">    dispatchingValue(<span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看出postValue用于在子线程调用的场景，post到主线程执行setValue。这里大家可能有个疑问就是这个postValue以及setValue都是protected方法，外部怎么调用呢？一般情况下使用MutableLiveData：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> LiveData&#125; which publicly exposes &#123;<span class="doctag">@link</span> #setValue(T)&#125; and &#123;<span class="doctag">@link</span> #postValue(T)&#125; method.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &lt;T&gt; The type of data hold by this instance</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"WeakerAccess"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MutableLiveData</span>&lt;<span class="title">T</span>&gt; <span class="keyword">extends</span> <span class="title">LiveData</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postValue</span><span class="params">(T value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.postValue(value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setValue</span><span class="params">(T value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.setValue(value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上就是LiveData源码分析结果，可以看出主要还是借助了Lifecycle生命周期自动感应的特性来解决问题。LiveData还有一些高级的玩法，具体参考：<br><a href="https://developer.android.com/topic/libraries/architecture/livedata" target="_blank" rel="noopener">https://developer.android.com/topic/libraries/architecture/livedata</a></p><h2 id="ViewModel"><a href="#ViewModel" class="headerlink" title="ViewModel"></a>ViewModel</h2><p>ViewModel为什么可以解决开头提到的第二个问题<a href="#场景2">场景2</a></p><p>来看下官网关于ViewModel的描述：</p><p>ViewModel 类旨在以注重生命周期的方式存储和管理界面相关的数据。ViewModel类让数据可在发生屏幕旋转等配置更改后继续留存。</p><p>先来回顾一下ViewModel的使用方式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NameActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> NameViewModel model;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Other code to setup the activity...</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Get the ViewModel.</span></span><br><span class="line">        <span class="comment">// 只要是同一个Activity，数据就是同一份</span></span><br><span class="line">        model = <span class="keyword">new</span> ViewModelProvider(<span class="keyword">this</span>,<span class="keyword">new</span> NewInstanceFactory()).get(NameViewModel<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Create the observer which updates the UI.</span></span><br><span class="line">        <span class="keyword">final</span> Observer&lt;String&gt; nameObserver = <span class="keyword">new</span> Observer&lt;String&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onChanged</span><span class="params">(@Nullable <span class="keyword">final</span> String newName)</span> </span>&#123;</span><br><span class="line">                <span class="comment">// Update the UI, in this case, a TextView.</span></span><br><span class="line">                nameTextView.setText(newName);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Observe the LiveData, passing in this activity as the LifecycleOwner and the observer.</span></span><br><span class="line">        model.getCurrentName().observe(<span class="keyword">this</span>, nameObserver);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看出如果重新创建了NameActivity，它接收的NameViewModel实例与第一个NameActivity创建的实例相同，这样就数据就不会存在丢失的问题。当所有者NameActivity走了finish销毁之后，框架会调用ViewModel对象的onCleared()方法，以便它可以清理资源。</p><p>来看下ViewModel的生命周期</p><h3 id="ViewModel生命周期"><a href="#ViewModel生命周期" class="headerlink" title="ViewModel生命周期"></a>ViewModel生命周期</h3><p>ViewModel 对象存在的时间范围是获取 ViewModel 时传递给 ViewModelProvider 的 Lifecycle。ViewModel 将一直留在内存中，直到限定其存在时间范围的 Lifecycle 永久消失：对于 Activity，是在 Activity 完成时；而对于 Fragment，是在 Fragment 分离时。如下图所示：<br><img src="/2020/11/07/android_jetpack/livedata/viewmodel-lifecycle.png" alt="ViewModel生命周期"></p><p>在系统首次调用 Activity 对象的 onCreate() 方法时请求 ViewModel。系统可能会在 Activity 的整个生命周期内多次调用 onCreate()，如在旋转设备屏幕时。ViewModel 存在的时间范围是从首次请求 ViewModel 直到 Activity 完成并销毁。</p><p>接下来看下对ViewModel源码进行解析：</p><h3 id="ViewModel源码解析"><a href="#ViewModel源码解析" class="headerlink" title="ViewModel源码解析"></a>ViewModel源码解析</h3><h4 id="ViewModel："><a href="#ViewModel：" class="headerlink" title="ViewModel："></a>ViewModel：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">ViewModel</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * This method will be called when this ViewModel is no longer used and will be destroyed.</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * It is useful when ViewModel observes some data and you need to clear this subscription to</span></span><br><span class="line"><span class="comment">     * prevent a leak of this ViewModel.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"WeakerAccess"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCleared</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看出ViewModel本身的话比较简单，就是一个抽象类，里面有一个onCleared（）方法，子类在这个方法里面可以做一些资源清理的操作</p><p>ViewModel有一个子类AndroidViewModel：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AndroidViewModel</span> <span class="keyword">extends</span> <span class="title">ViewModel</span> </span>&#123;</span><br><span class="line">    <span class="meta">@SuppressLint</span>(<span class="string">"StaticFieldLeak"</span>)</span><br><span class="line">    <span class="keyword">private</span> Application mApplication;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AndroidViewModel</span><span class="params">(@NonNull Application application)</span> </span>&#123;</span><br><span class="line">        mApplication = application;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Return the application.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"TypeParameterUnusedInFormals"</span>)</span><br><span class="line">    <span class="meta">@NonNull</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T extends Application&gt; <span class="function">T <span class="title">getApplication</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//noinspection unchecked</span></span><br><span class="line">        <span class="keyword">return</span> (T) mApplication;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一般情况下我们使用的时候是直接继承自AndroidViewModel，因为里面持有Application,可以获取到Android系统的一些系统资源</p><p>那么到这里大家就会有个疑问，ViewModel就这么简单？ViewModel的onCleared()方法是谁负责调用的呢？</p><p>首先ViewModel的获取方式为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">model = <span class="keyword">new</span> ViewModelProvider(<span class="keyword">this</span>,<span class="keyword">new</span> NewInstanceFactory()).get(NameViewModel<span class="class">.<span class="keyword">class</span>)</span>;</span><br></pre></td></tr></table></figure><h4 id="ViewModelProvider"><a href="#ViewModelProvider" class="headerlink" title="ViewModelProvider"></a>ViewModelProvider</h4><p>我们来看下ViewModelProvider构造函数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ViewModelProvider</span><span class="params">(@NonNull ViewModelStoreOwner owner, @NonNull Factory factory)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>(owner.getViewModelStore(), factory);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ViewModelProvider</span><span class="params">(@NonNull ViewModelStore store, @NonNull Factory factory)</span> </span>&#123;</span><br><span class="line">    mFactory = factory;</span><br><span class="line">    <span class="keyword">this</span>.mViewModelStore = store;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看出传入的第一个参数为一个接口ViewModelStoreOwner，说明Activity实现了这个接口，返回一个ViewModelStore类型，第二个参数是一个工厂类，代表model创建工厂,系统提供了两个默认的工厂，分别是NewInstanceFactory用于创建普通的ViewModel，AndroidViewModelFactory用于创建AndroidViewModel</p><p>接下来看下get方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@NonNull</span></span><br><span class="line">   <span class="meta">@MainThread</span></span><br><span class="line">   <span class="keyword">public</span> &lt;T extends ViewModel&gt; <span class="function">T <span class="title">get</span><span class="params">(@NonNull Class&lt;T&gt; modelClass)</span> </span>&#123;</span><br><span class="line">       String canonicalName = modelClass.getCanonicalName();</span><br><span class="line">       <span class="keyword">if</span> (canonicalName == <span class="keyword">null</span>) &#123;</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Local and anonymous classes can not be ViewModels"</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> get(DEFAULT_KEY + <span class="string">":"</span> + canonicalName, modelClass);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@NonNull</span></span><br><span class="line">   <span class="meta">@MainThread</span></span><br><span class="line">   <span class="keyword">public</span> &lt;T extends ViewModel&gt; <span class="function">T <span class="title">get</span><span class="params">(@NonNull String key, @NonNull Class&lt;T&gt; modelClass)</span> </span>&#123;</span><br><span class="line">       ViewModel viewModel = mViewModelStore.get(key);</span><br><span class="line"></span><br><span class="line">       <span class="keyword">if</span> (modelClass.isInstance(viewModel)) &#123;</span><br><span class="line">           <span class="comment">//noinspection unchecked</span></span><br><span class="line">           <span class="keyword">return</span> (T) viewModel;</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           <span class="comment">//noinspection StatementWithEmptyBody</span></span><br><span class="line">           <span class="keyword">if</span> (viewModel != <span class="keyword">null</span>) &#123;</span><br><span class="line">               <span class="comment">// <span class="doctag">TODO:</span> log a warning.</span></span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       viewModel = mFactory.create(modelClass);</span><br><span class="line">       mViewModelStore.put(key, viewModel);</span><br><span class="line">       <span class="comment">//noinspection unchecked</span></span><br><span class="line">       <span class="keyword">return</span> (T) viewModel;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>可以看出get方法就是从ViewModleStore里面根据key获得一个ViewModel返回，如果获取不到就通过factory创建一个ViewModel放入ViewModelStore当中,然后返回ViewModel。</p><h4 id="ViewModelStore"><a href="#ViewModelStore" class="headerlink" title="ViewModelStore"></a>ViewModelStore</h4><p>那么这里我们来看下ViewModelStore是个什么东东：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ViewModelStore</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> HashMap&lt;String, ViewModel&gt; mMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(String key, ViewModel viewModel)</span> </span>&#123;</span><br><span class="line">        ViewModel oldViewModel = mMap.put(key, viewModel);</span><br><span class="line">        <span class="keyword">if</span> (oldViewModel != <span class="keyword">null</span>) &#123;</span><br><span class="line">            oldViewModel.onCleared();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">final</span> ViewModel <span class="title">get</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mMap.get(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  Clears internal storage and notifies ViewModels that they are no longer used.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (ViewModel vm : mMap.values()) &#123;</span><br><span class="line">            vm.onCleared();</span><br><span class="line">        &#125;</span><br><span class="line">        mMap.clear();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到ViewModelStore里面其实就是一个HashMap，存有这个ViewModelProvider里面所有的ViewModel，一个ViewModelProvider跟一个页面进行对应。可以看到ViewModelStore里面还有一个clear方法，里面就调用了每个ViewModel的onCleared()方法，根据前面对ViewModel生命周期的说明，这个clear方法应该是在lifecycle的onDestroyed方法调用的。</p><p>通过Android Studio的find usage找到这个clear()方法的调用链，发现在lifecycle的extension包下面找到了一个叫做HolderFragment的类:</p><h4 id="HolderFragment"><a href="#HolderFragment" class="headerlink" title="HolderFragment"></a>HolderFragment</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@hide</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestrictTo</span>(RestrictTo.Scope.LIBRARY_GROUP)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HolderFragment</span> <span class="keyword">extends</span> <span class="title">Fragment</span> <span class="keyword">implements</span> <span class="title">ViewModelStoreOwner</span> </span>&#123;</span><br><span class="line">    ..............</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ViewModelStore mViewModelStore = <span class="keyword">new</span> ViewModelStore();</span><br><span class="line">    </span><br><span class="line">    ................</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onDestroy();</span><br><span class="line">        mViewModelStore.clear();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@hide</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RestrictTo</span>(RestrictTo.Scope.LIBRARY_GROUP)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> HolderFragment <span class="title">holderFragmentFor</span><span class="params">(FragmentActivity activity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sHolderFragmentManager.holderFragmentFor(activity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@hide</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RestrictTo</span>(RestrictTo.Scope.LIBRARY_GROUP)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> HolderFragment <span class="title">holderFragmentFor</span><span class="params">(Fragment fragment)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sHolderFragmentManager.holderFragmentFor(fragment);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>在这个fragment的onDestroy()方法里面调用了ViewModelStore的clear方法。熟悉lifecycle的朋友看到这里是不是有一种豁然开朗的感觉，这个HolderFragment肯定是跟ViewModelProvider对应的页面进行了绑定！那么HolderFragment是啥时候跟页面进行绑定的呢？</p><p>来看下holderFragmentFor(FragmentActivity activity)调用的地方：</p><h4 id="ViewModelStores"><a href="#ViewModelStores" class="headerlink" title="ViewModelStores"></a>ViewModelStores</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"WeakerAccess"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ViewModelStores</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NonNull</span></span><br><span class="line">    <span class="meta">@MainThread</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ViewModelStore <span class="title">of</span><span class="params">(@NonNull FragmentActivity activity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (activity <span class="keyword">instanceof</span> ViewModelStoreOwner) &#123;</span><br><span class="line">            <span class="keyword">return</span> ((ViewModelStoreOwner) activity).getViewModelStore();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> holderFragmentFor(activity).getViewModelStore();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NonNull</span></span><br><span class="line">    <span class="meta">@MainThread</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ViewModelStore <span class="title">of</span><span class="params">(@NonNull Fragment fragment)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (fragment <span class="keyword">instanceof</span> ViewModelStoreOwner) &#123;</span><br><span class="line">            <span class="keyword">return</span> ((ViewModelStoreOwner) fragment).getViewModelStore();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> holderFragmentFor(fragment).getViewModelStore();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看出这个ViewModelStores是一个工具类，用于生成ViewModelStore，而这个ViewModelStore就是从HolderFragment获取的，这个HolderFragment就挂载在这个fragment或者activity上面，接下来看下ViewModelStores的of方法调用的地方：</p><h4 id="ViewModelProviders"><a href="#ViewModelProviders" class="headerlink" title="ViewModelProviders"></a>ViewModelProviders</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ViewModelProviders</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NonNull</span></span><br><span class="line">    <span class="meta">@MainThread</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ViewModelProvider <span class="title">of</span><span class="params">(@NonNull Fragment fragment)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> of(fragment, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NonNull</span></span><br><span class="line">    <span class="meta">@MainThread</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ViewModelProvider <span class="title">of</span><span class="params">(@NonNull FragmentActivity activity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> of(activity, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NonNull</span></span><br><span class="line">    <span class="meta">@MainThread</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ViewModelProvider <span class="title">of</span><span class="params">(@NonNull Fragment fragment, @Nullable Factory factory)</span> </span>&#123;</span><br><span class="line">        Application application = checkApplication(checkActivity(fragment));</span><br><span class="line">        <span class="keyword">if</span> (factory == <span class="keyword">null</span>) &#123;</span><br><span class="line">            factory = ViewModelProvider.AndroidViewModelFactory.getInstance(application);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ViewModelProvider(ViewModelStores.of(fragment), factory);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NonNull</span></span><br><span class="line">    <span class="meta">@MainThread</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ViewModelProvider <span class="title">of</span><span class="params">(@NonNull FragmentActivity activity,</span></span></span><br><span class="line"><span class="function"><span class="params">            @Nullable Factory factory)</span> </span>&#123;</span><br><span class="line">        Application application = checkApplication(activity);</span><br><span class="line">        <span class="keyword">if</span> (factory == <span class="keyword">null</span>) &#123;</span><br><span class="line">            factory = ViewModelProvider.AndroidViewModelFactory.getInstance(application);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ViewModelProvider(ViewModelStores.of(activity), factory);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看出这个ViewModelProviders是一个工具类，用于生成ViewModelProvider，这里面就会调用ViewModelStores的of方法获取ViewModelStore，而我们刚刚也说了这个of方法里面就会挂载一个HolderFragment用于感应对应页面的生命周期。因此，要想自定义的ViewModel在页面销毁的时候能够自动调用onCleared()方法，得通过ViewModelProviders来获取：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">viewModelProvider= ViewModelProviders.of(<span class="keyword">this</span>);</span><br></pre></td></tr></table></figure><p>至此ViewModel源码分析完成,更多高级玩法参考：<br><a href="https://developer.android.com/topic/libraries/architecture/viewmodel" target="_blank" rel="noopener">https://developer.android.com/topic/libraries/architecture/viewmodel</a></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>至此LiveData+ViewModel源码已经分析完成，结合之前的<a href="https://easyliu-ly.github.io/2020/10/31/android_jetpack/lifecycle/" target="_blank" rel="noopener">Android生命周期感应组件lifecycle</a>,整个就组成了MVVM架构。</p><p>这个架构里面很多思想值得我们细细品味～～</p><p>基于这个LiveData这些优良的特性，美团技术团队开发了一个LiveDataEventBus来代替传统的EventBus、RxJava等消息框架,感兴趣的可以看看：<br><a href="https://tech.meituan.com/2018/07/26/android-livedatabus.html" target="_blank" rel="noopener">https://tech.meituan.com/2018/07/26/android-livedatabus.html</a></p><p><a href="https://github.com/JeremyLiao/LiveEventBus" target="_blank" rel="noopener">https://github.com/JeremyLiao/LiveEventBus</a></p><hr align="center" width="“100%”" color="#0e0e0e" size="1"><font size="3" color="red">如果您觉得写的还不错，感谢打赏：</font><p align="center"><img src="/resources/images/wechat_pay.png" width="150" alt="微信支付"><img src="/resources/images/ali_pay.jpeg" width="150" alt="支付宝"></p>]]></content>
    
    <summary type="html">
    
      Android MVVM框架之Livedata以及ViewModel
    
    </summary>
    
      <category term="Android架构学习" scheme="http://easyliu.com/categories/Android%E6%9E%B6%E6%9E%84%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Android" scheme="http://easyliu.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>早起龙城公园爬山——2020.11.1</title>
    <link href="http://easyliu.com/2020/11/01/life/2020_11_1_longcheng_park/"/>
    <id>http://easyliu.com/2020/11/01/life/2020_11_1_longcheng_park/</id>
    <published>2020-11-01T08:59:16.000Z</published>
    <updated>2020-11-22T05:17:52.545Z</updated>
    
    <content type="html"><![CDATA[<h2 id="空气新鲜"><a href="#空气新鲜" class="headerlink" title="空气新鲜"></a>空气新鲜</h2><div id="dplayer1" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer1"),"autoplay":true,"theme":"#FADFA3","loop":true,"video":{"url":"/resources/video/scenery.mp4","pic":"/resources/image/scenery_three.jpeg"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script><p><img src="/2020/11/01/life/2020_11_1_longcheng_park/scenery_one.jpeg" alt="scenery_one"><br><img src="/2020/11/01/life/2020_11_1_longcheng_park/scenery_two.jpeg" alt="scenery_two"><br><img src="/2020/11/01/life/2020_11_1_longcheng_park/scenery_three.jpeg" alt="scenery_three"><br><img src="/2020/11/01/life/2020_11_1_longcheng_park/scenery_four.jpeg" alt="scenery_four"></p><h2 id="你大爷还是你大爷"><a href="#你大爷还是你大爷" class="headerlink" title="你大爷还是你大爷"></a>你大爷还是你大爷</h2><p><img src="/2020/11/01/life/2020_11_1_longcheng_park/uncle.jpeg" alt="uncle_one"><br><img src="/2020/11/01/life/2020_11_1_longcheng_park/uncle_two.jpeg" alt="uncle_two"></p>]]></content>
    
    <summary type="html">
    
      龙城公园爬山——2020.11.1
    
    </summary>
    
      <category term="周末活动" scheme="http://easyliu.com/categories/%E5%91%A8%E6%9C%AB%E6%B4%BB%E5%8A%A8/"/>
    
    
      <category term="日常生活" scheme="http://easyliu.com/tags/%E6%97%A5%E5%B8%B8%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>Android生命周期感应组件lifecycle</title>
    <link href="http://easyliu.com/2020/10/31/android_jetpack/lifecycle/"/>
    <id>http://easyliu.com/2020/10/31/android_jetpack/lifecycle/</id>
    <published>2020-10-31T08:34:04.000Z</published>
    <updated>2020-11-29T09:32:32.982Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>生命周期感知型组件可执行操作来响应另一个组件（如 Activity 和 Fragment）的生命周期状态的变化。这些组件有助于您写出更有条理且往往更精简的代码，这样的代码更易于维护。</p><p>一种常见的模式是在 Activity 和 Fragment 的生命周期方法中实现依赖组件的操作。但是，这种模式会导致代码条理性很差而且会扩散错误。通过使用生命周期感知型组件，您可以将依赖组件的代码从生命周期方法移入组件本身中。</p><p>androidx.lifecycle 软件包提供了可用于构建生命周期感知型组件的类和接口 - 这些组件可以根据 Activity 或 Fragment 的当前生命周期状态自动调整其行为。<br><a href="https://developer.android.com/jetpack/androidx/releases/lifecycle#java" target="_blank" rel="noopener">导入方法</a></p><p>在 Android 框架中定义的大多数应用组件都存在生命周期。生命周期由操作系统或进程中运行的框架代码管理。它们是 Android 运作方式的核心，应用必须遵循它们。如果不这样做，可能会引发内存泄露甚至应用崩溃。</p><p>假设我们有一个在屏幕上显示设备位置的 Activity。常见的实现可能如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyLocationListener</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyLocationListener</span><span class="params">(Context context, Callback callback)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// connect to system location service</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// disconnect from system location service</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> MyLocationListener myLocationListener;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(...)</span> </span>&#123;</span><br><span class="line">        myLocationListener = <span class="keyword">new</span> MyLocationListener(<span class="keyword">this</span>, (location) -&gt; &#123;</span><br><span class="line">            <span class="comment">// update UI</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStart</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onStart();</span><br><span class="line">        myLocationListener.start();</span><br><span class="line">        <span class="comment">// manage other components that need to respond</span></span><br><span class="line">        <span class="comment">// to the activity lifecycle</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onStop();</span><br><span class="line">        myLocationListener.stop();</span><br><span class="line">        <span class="comment">// manage other components that need to respond</span></span><br><span class="line">        <span class="comment">// to the activity lifecycle</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>虽然此示例看起来没问题，但在真实的应用中，最终会有太多管理界面和其他组件的调用，以响应生命周期的当前状态。管理多个组件会在生命周期方法（如 onStart() 和 onStop()）中放置大量的代码，这使得它们难以维护。</p><p>androidx.lifecycle 软件包提供的类和接口可帮助您以弹性和隔离的方式解决这些问题。</p><h2 id="Lifecycle"><a href="#Lifecycle" class="headerlink" title="Lifecycle"></a>Lifecycle</h2><p>Lifecycle 是一个类，用于存储有关组件（如 Activity 或 Fragment）的生命周期状态的信息，并允许其他对象观察此状态。</p><p>Lifecycle 使用两种主要枚举跟踪其关联组件的生命周期状态：</p><ul><li>事件<br>从框架和 Lifecycle 类分派的生命周期事件。这些事件映射到 Activity 和 Fragment 中的回调事件。</li><li>状态<br>由 Lifecycle 对象跟踪的组件的当前状态。</li></ul><p><img src="/2020/10/31/android_jetpack/lifecycle/lifecycle-state.png" alt="构成 Android Activity 生命周期的状态和事件"></p><p>Lifecycle源代码如下，可以看出下Lifecycle类主要是3个方法，分别是：添加observer、移除observer以及获取当前的状态，然后类里面有关于Event和State的定义：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Lifecycle</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Adds a LifecycleObserver that will be notified when the LifecycleOwner changes</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> observer The observer to notify.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@MainThread</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">addObserver</span><span class="params">(@NonNull LifecycleObserver observer)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Removes the given observer from the observers list.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> observer The observer to be removed.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@MainThread</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">removeObserver</span><span class="params">(@NonNull LifecycleObserver observer)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns the current state of the Lifecycle.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> The current state of the Lifecycle.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@MainThread</span></span><br><span class="line">    <span class="meta">@NonNull</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> State <span class="title">getCurrentState</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"WeakerAccess"</span>)</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">enum</span> Event &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Constant for onCreate event of the &#123;<span class="doctag">@link</span> LifecycleOwner&#125;.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        ON_CREATE,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Constant for onStart event of the &#123;<span class="doctag">@link</span> LifecycleOwner&#125;.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        ON_START,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Constant for onResume event of the &#123;<span class="doctag">@link</span> LifecycleOwner&#125;.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        ON_RESUME,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Constant for onPause event of the &#123;<span class="doctag">@link</span> LifecycleOwner&#125;.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        ON_PAUSE,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Constant for onStop event of the &#123;<span class="doctag">@link</span> LifecycleOwner&#125;.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        ON_STOP,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Constant for onDestroy event of the &#123;<span class="doctag">@link</span> LifecycleOwner&#125;.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        ON_DESTROY,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * An &#123;<span class="doctag">@link</span> Event Event&#125; constant that can be used to match all events.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        ON_ANY</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Lifecycle states. You can consider the states as the nodes in a graph and</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@link</span> Event&#125;s as the edges between these nodes.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"WeakerAccess"</span>)</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">enum</span> State &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Destroyed state for a LifecycleOwner. After this event, this Lifecycle will not dispatch</span></span><br><span class="line"><span class="comment">         * any more events. For instance, for an &#123;<span class="doctag">@link</span> android.app.Activity&#125;, this state is reached</span></span><br><span class="line"><span class="comment">         * &lt;b&gt;right before&lt;/b&gt; Activity's &#123;<span class="doctag">@link</span> android.app.Activity#onDestroy() onDestroy&#125; call.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        DESTROYED,</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Initialized state for a LifecycleOwner. For an &#123;<span class="doctag">@link</span> android.app.Activity&#125;, this is</span></span><br><span class="line"><span class="comment">         * the state when it is constructed but has not received</span></span><br><span class="line"><span class="comment">         * &#123;<span class="doctag">@link</span> android.app.Activity#onCreate(android.os.Bundle) onCreate&#125; yet.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        INITIALIZED,</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Created state for a LifecycleOwner. For an &#123;<span class="doctag">@link</span> android.app.Activity&#125;, this state</span></span><br><span class="line"><span class="comment">         * is reached in two cases:</span></span><br><span class="line"><span class="comment">         * &lt;ul&gt;</span></span><br><span class="line"><span class="comment">         *     &lt;li&gt;after &#123;<span class="doctag">@link</span> android.app.Activity#onCreate(android.os.Bundle) onCreate&#125; call;</span></span><br><span class="line"><span class="comment">         *     &lt;li&gt;&lt;b&gt;right before&lt;/b&gt; &#123;<span class="doctag">@link</span> android.app.Activity#onStop() onStop&#125; call.</span></span><br><span class="line"><span class="comment">         * &lt;/ul&gt;</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        CREATED,</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Started state for a LifecycleOwner. For an &#123;<span class="doctag">@link</span> android.app.Activity&#125;, this state</span></span><br><span class="line"><span class="comment">         * is reached in two cases:</span></span><br><span class="line"><span class="comment">         * &lt;ul&gt;</span></span><br><span class="line"><span class="comment">         *     &lt;li&gt;after &#123;<span class="doctag">@link</span> android.app.Activity#onStart() onStart&#125; call;</span></span><br><span class="line"><span class="comment">         *     &lt;li&gt;&lt;b&gt;right before&lt;/b&gt; &#123;<span class="doctag">@link</span> android.app.Activity#onPause() onPause&#125; call.</span></span><br><span class="line"><span class="comment">         * &lt;/ul&gt;</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        STARTED,</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Resumed state for a LifecycleOwner. For an &#123;<span class="doctag">@link</span> android.app.Activity&#125;, this state</span></span><br><span class="line"><span class="comment">         * is reached after &#123;<span class="doctag">@link</span> android.app.Activity#onResume() onResume&#125; is called.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        RESUMED;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Compares if this State is greater or equal to the given &#123;<span class="doctag">@code</span> state&#125;.</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> state State to compare with</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@return</span> true if this State is greater or equal to the given &#123;<span class="doctag">@code</span> state&#125;</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isAtLeast</span><span class="params">(@NonNull State state)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> compareTo(state) &gt;= <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>类可以通过向其方法添加注解来监控组件的生命周期状态。然后，可以通过调用 Lifecycle 类的 addObserver() 方法并传递观察者的实例来添加观察者，如以下示例中所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyObserver</span> <span class="keyword">implements</span> <span class="title">LifecycleObserver</span> </span>&#123;</span><br><span class="line">    <span class="meta">@OnLifecycleEvent</span>(Lifecycle.Event.ON_RESUME)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">connectListener</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@OnLifecycleEvent</span>(Lifecycle.Event.ON_PAUSE)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">disconnectListener</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">myLifecycleOwner.getLifecycle().addObserver(<span class="keyword">new</span> MyObserver());</span><br></pre></td></tr></table></figure><p>在上面的示例中，myLifecycleOwner 对象实现了 LifecycleOwner 接口 ,接下来讲一下LifecycleOwner接口：</p><h2 id="LifecycleOwner"><a href="#LifecycleOwner" class="headerlink" title="LifecycleOwner"></a>LifecycleOwner</h2><p>首先来看下LifecycleOwner接口的源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * A class that has an Android lifecycle. These events can be used by custom components to</span></span><br><span class="line"><span class="comment"> * handle lifecycle changes without implementing any code inside the Activity or the Fragment.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> Lifecycle</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SuppressWarnings</span>(&#123;<span class="string">"WeakerAccess"</span>, <span class="string">"unused"</span>&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">LifecycleOwner</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns the Lifecycle of the provider.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> The lifecycle of the provider.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@NonNull</span></span><br><span class="line">    <span class="function">Lifecycle <span class="title">getLifecycle</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Android源码中，Activity以及Fragment均实现了这个LifecycleOwner接口，这样使用就非常简单了，直接使用getLifecycle().addObserver(new MyObserver())就可以把Observer注册到Lifecycle上，自动感应生命周期了。</p><h2 id="生命周期自动感应原理解析"><a href="#生命周期自动感应原理解析" class="headerlink" title="生命周期自动感应原理解析"></a>生命周期自动感应原理解析</h2><p>那么问题来了，fragment或者activity是怎么把自身的生命周期分发给每一个Observer的呢？生命周期自动感应是怎么工作的呢？我们通过解析源码来找到答案。</p><p>查看SupportActivity的源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SupportActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> <span class="keyword">implements</span> <span class="title">LifecycleOwner</span>, <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> SimpleArrayMap&lt;Class&lt;? extends SupportActivity.ExtraData&gt;, </span><br><span class="line">    <span class="keyword">private</span> LifecycleRegistry mLifecycleRegistry = <span class="keyword">new</span> LifecycleRegistry(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SupportActivity</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(@Nullable Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        ReportFragment.injectIfNeededIn(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@CallSuper</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onSaveInstanceState</span><span class="params">(Bundle outState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mLifecycleRegistry.markState(State.CREATED);</span><br><span class="line">        <span class="keyword">super</span>.onSaveInstanceState(outState);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Lifecycle <span class="title">getLifecycle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.mLifecycleRegistry;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看出在activity的onCreate方法调用了一个方法： ReportFragment.injectIfNeededIn(activity)，接下来看下这个init做了什么事情：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReportFragment</span> <span class="keyword">extends</span> <span class="title">Fragment</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String REPORT_FRAGMENT_TAG = <span class="string">"android.arch.lifecycle"</span></span><br><span class="line">            + <span class="string">".LifecycleDispatcher.report_fragment_tag"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">injectIfNeededIn</span><span class="params">(Activity activity)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// ProcessLifecycleOwner should always correctly work and some activities may not extend</span></span><br><span class="line">        <span class="comment">// FragmentActivity from support lib, so we use framework fragments for activities</span></span><br><span class="line">        android.app.FragmentManager manager = activity.getFragmentManager();</span><br><span class="line">        <span class="keyword">if</span> (manager.findFragmentByTag(REPORT_FRAGMENT_TAG) == <span class="keyword">null</span>) &#123;</span><br><span class="line">            manager.beginTransaction().add(<span class="keyword">new</span> ReportFragment(), REPORT_FRAGMENT_TAG).commit();</span><br><span class="line">            <span class="comment">// Hopefully, we are the first to make a transaction.</span></span><br><span class="line">            manager.executePendingTransactions();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onActivityCreated</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onActivityCreated(savedInstanceState);</span><br><span class="line">        dispatchCreate(mProcessListener);</span><br><span class="line">        dispatch(Lifecycle.Event.ON_CREATE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStart</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onStart();</span><br><span class="line">        dispatchStart(mProcessListener);</span><br><span class="line">        dispatch(Lifecycle.Event.ON_START);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResume</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onResume();</span><br><span class="line">        dispatchResume(mProcessListener);</span><br><span class="line">        dispatch(Lifecycle.Event.ON_RESUME);</span><br><span class="line">    &#125;</span><br><span class="line">.....................</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onDestroy();</span><br><span class="line">        dispatch(Lifecycle.Event.ON_DESTROY);</span><br><span class="line">        <span class="comment">// just want to be sure that we won't leak reference to an activity</span></span><br><span class="line">        mProcessListener = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">dispatch</span><span class="params">(Lifecycle.Event event)</span> </span>&#123;</span><br><span class="line">        Activity activity = getActivity();</span><br><span class="line">        <span class="keyword">if</span> (activity <span class="keyword">instanceof</span> LifecycleRegistryOwner) &#123;</span><br><span class="line">            ((LifecycleRegistryOwner) activity).getLifecycle().handleLifecycleEvent(event);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (activity <span class="keyword">instanceof</span> LifecycleOwner) &#123;</span><br><span class="line">            Lifecycle lifecycle = ((LifecycleOwner) activity).getLifecycle();</span><br><span class="line">            <span class="keyword">if</span> (lifecycle <span class="keyword">instanceof</span> LifecycleRegistry) &#123;</span><br><span class="line">                ((LifecycleRegistry) lifecycle).handleLifecycleEvent(event);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个代码就比较清晰了：在activity上面挂了一个ReportFragment专门用来感应activity的生命周期，把activity的生命周期分发给activity里面的Lifecycle,其中activity里面的Lifecycle是一个LifecycleRegistry对象。通过这种方式就完成了activity生命周期到Lifecycle的转发。</p><blockquote><p>到这里大家可能会有一个疑问了：那么fragment的生命周期是怎么感应的呢？因为fragment的生命周期是可能比activity的生命周期要短的，这个我们从fragment源码中寻找答案：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">performStart</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ..........</span><br><span class="line">           <span class="keyword">this</span>.mLifecycleRegistry.handleLifecycleEvent(Event.ON_START);</span><br><span class="line">           <span class="keyword">if</span> (<span class="keyword">this</span>.mView != <span class="keyword">null</span>) &#123;</span><br><span class="line">               <span class="keyword">this</span>.mViewLifecycleRegistry.handleLifecycleEvent(Event.ON_START);</span><br><span class="line">           &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">performResume</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ..............</span><br><span class="line">           <span class="keyword">this</span>.mLifecycleRegistry.handleLifecycleEvent(Event.ON_RESUME);</span><br><span class="line">           <span class="keyword">if</span> (<span class="keyword">this</span>.mView != <span class="keyword">null</span>) &#123;</span><br><span class="line">               <span class="keyword">this</span>.mViewLifecycleRegistry.handleLifecycleEvent(Event.ON_RESUME);</span><br><span class="line">           &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>可以看出fragment中生命周期是主动转发的，主动调用LifecycleRegistry的方法进行转发。</p><p>至此，activity和fragment的生命周期转发机制已经了解清楚了，接下来我们看下LifecycleRegistry是怎么把生命周期进一步转发给LifecycleObserver的。</p><h3 id="LifecycleRegistry源码解析"><a href="#LifecycleRegistry源码解析" class="headerlink" title="LifecycleRegistry源码解析"></a>LifecycleRegistry源码解析</h3><p>上面说了activity和fragment里面都持有LifecycleRegistry,通过这个类来进行生命周期转发，接下来对LifecycleRegistry源码进行解析：</p><h4 id="添加观察者："><a href="#添加观察者：" class="headerlink" title="添加观察者："></a>添加观察者：</h4><p>添加观察者通过addObserver方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addObserver</span><span class="params">(@NonNull LifecycleObserver observer)</span> </span>&#123;</span><br><span class="line">    State initialState = mState == DESTROYED ? DESTROYED : INITIALIZED;</span><br><span class="line">    <span class="comment">//把传入的observer封装成一个ObserverWithState对象</span></span><br><span class="line">    ObserverWithState statefulObserver = <span class="keyword">new</span> ObserverWithState(observer, initialState);</span><br><span class="line">    ObserverWithState previous = mObserverMap.putIfAbsent(observer, statefulObserver);</span><br><span class="line">    <span class="comment">//如果之前已经有这个observer，就直接返回</span></span><br><span class="line">    <span class="keyword">if</span> (previous != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//获取到LifecycleOwner</span></span><br><span class="line">    LifecycleOwner lifecycleOwner = mLifecycleOwner.get();</span><br><span class="line">    <span class="keyword">if</span> (lifecycleOwner == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// it is null we should be destroyed. Fallback quickly</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**是否是可重入的，什么意思呢？这里有两个判断条件：</span></span><br><span class="line"><span class="comment">    1、mAddingObserverCounter ！=0，什么时候会满足这个条件呢，就是在下面的statefulObserver.dispatchEvent(lifecycleOwner, upEvent(statefulObserver.mState));方法里面可能又会调用addObserver,这次addObserver的时候这个mAddingObserverCounter就不为0了</span></span><br><span class="line"><span class="comment">    2、mHandlingEvent为true代表正在进行状态转移</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    isReentrance这个值主要是为了防止重复调用sync方法，在嵌套的情况下，保证只有最上层最后调用这个sync方法，这个下面也有注释说明</span></span><br><span class="line"><span class="comment">    **/</span></span><br><span class="line">    <span class="keyword">boolean</span> isReentrance = mAddingObserverCounter != <span class="number">0</span> || mHandlingEvent;</span><br><span class="line">    <span class="comment">//计算出目标的State</span></span><br><span class="line">    State targetState = calculateTargetState(observer);</span><br><span class="line">    mAddingObserverCounter++;</span><br><span class="line">    <span class="comment">//如果observer目前呢的state小于要转移的targetState,那么就要进行state转移，比如目前页面的state状态为CREATED,但是oberver.mState初始化的状态是INITIALIZED,那么就要把状态转移到CREATED</span></span><br><span class="line">    <span class="keyword">while</span> ((statefulObserver.mState.compareTo(targetState) &lt; <span class="number">0</span></span><br><span class="line">            &amp;&amp; mObserverMap.contains(observer))) &#123;</span><br><span class="line">        pushParentState(statefulObserver.mState);</span><br><span class="line">        <span class="comment">//upEvent方法就是把state转移到下一个生命周期Event，然后再把这个Event通知给oberver进行分发，然后在这个</span></span><br><span class="line">        <span class="comment">//statefulObserver内部会根据这个Event更新自己的mState</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//这里每次只能进行一个Event转移，就比如说现在页面的state状态为STARTED,那么就需要进行两次转移，也就是这个这个while循环会执行2次，相应的observer会先后收到ON_CREATE和ON_START回调</span></span><br><span class="line">        statefulObserver.dispatchEvent(lifecycleOwner, upEvent(statefulObserver.mState));</span><br><span class="line">        popParentState();</span><br><span class="line">        <span class="comment">//再次计算targetState,判断observer.mState是否达到了targetState,这里是一个while循环，直到达到了</span></span><br><span class="line">        <span class="comment">//targetState才会退出</span></span><br><span class="line">        targetState = calculateTargetState(observer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!isReentrance) &#123;</span><br><span class="line">        <span class="comment">// we do sync only on the top level.</span></span><br><span class="line">        <span class="comment">//把当前页面的state状态同步给所有的oberver</span></span><br><span class="line">        sync();</span><br><span class="line">    &#125;</span><br><span class="line">    mAddingObserverCounter--;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看出addObserver主要是分为几个步骤：</p><p>1、把传入的observer封装成一个ObserverWithState对象，保存到一个map里面，key值就是这个observer。我们来看下ObserverWithState的构造方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ObserverWithState</span> </span>&#123;</span><br><span class="line">    State mState;</span><br><span class="line">    GenericLifecycleObserver mLifecycleObserver;</span><br><span class="line"></span><br><span class="line">    ObserverWithState(LifecycleObserver observer, State initialState) &#123;</span><br><span class="line">        mLifecycleObserver = Lifecycling.getCallback(observer);</span><br><span class="line">        mState = initialState;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dispatchEvent</span><span class="params">(LifecycleOwner owner, Event event)</span> </span>&#123;</span><br><span class="line">        State newState = getStateAfter(event);</span><br><span class="line">        mState = min(mState, newState);</span><br><span class="line">        mLifecycleObserver.onStateChanged(owner, event);</span><br><span class="line">        mState = newState;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在构造方法里面会通过Lifecycling.getCallback(observer)方法把observer转换为一个GenericLifecycleObserver对象。刚刚上面说了类可以通过向其方法添加注解来监控组件的生命周期状态，这个Lifecycling.getCallback方法里面就是会去读取每个LifecycleObserver对象方法上面的注解，然后转换成对应的GenericLifecycleObserver：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> GenericLifecycleObserver <span class="title">getCallback</span><span class="params">(Object object)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (object <span class="keyword">instanceof</span> FullLifecycleObserver) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> FullLifecycleObserverAdapter((FullLifecycleObserver) object);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (object <span class="keyword">instanceof</span> GenericLifecycleObserver) &#123;</span><br><span class="line">        <span class="keyword">return</span> (GenericLifecycleObserver) object;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//根据注解生成对应的GenericLifecycleObserver ，一般不推荐这种方式</span></span><br><span class="line">    <span class="keyword">final</span> Class&lt;?&gt; klass = object.getClass();</span><br><span class="line">    <span class="keyword">int</span> type = getObserverConstructorType(klass);</span><br><span class="line">    <span class="keyword">if</span> (type == GENERATED_CALLBACK) &#123;</span><br><span class="line">        List&lt;Constructor&lt;? extends GeneratedAdapter&gt;&gt; constructors =</span><br><span class="line">                sClassToAdapters.get(klass);</span><br><span class="line">        <span class="keyword">if</span> (constructors.size() == <span class="number">1</span>) &#123;</span><br><span class="line">            GeneratedAdapter generatedAdapter = createGeneratedAdapter(</span><br><span class="line">                    constructors.get(<span class="number">0</span>), object);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> SingleGeneratedAdapterObserver(generatedAdapter);</span><br><span class="line">        &#125;</span><br><span class="line">        GeneratedAdapter[] adapters = <span class="keyword">new</span> GeneratedAdapter[constructors.size()];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; constructors.size(); i++) &#123;</span><br><span class="line">            adapters[i] = createGeneratedAdapter(constructors.get(i), object);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CompositeGeneratedAdaptersObserver(adapters);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ReflectiveGenericLifecycleObserver(object);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从上面代码也可以看出我们可以让我们自定义的LifecycleObserver直接实现FullLifecycleObserver或者GenericLifecycleObserver接口，如果没有实现这两个接口，继续往下走的话就是注解相关处理，然后包装生成对应的GenericLifecycleObserver子类，一般情况下不推荐这种方式，因为涉及到runtime反射，会有一定的性能开销。最佳操作是如果工程支持java8的话，可以实现DefaultLifecycleObserver接口,子类根据自身需求实现对应的方法（不得不说default真是个好东西啊～～）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DefaultLifecycleObserver</span> <span class="keyword">extends</span> <span class="title">FullLifecycleObserver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(@NonNull LifecycleOwner owner)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">onStart</span><span class="params">(@NonNull LifecycleOwner owner)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">onResume</span><span class="params">(@NonNull LifecycleOwner owner)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">onPause</span><span class="params">(@NonNull LifecycleOwner owner)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">onStop</span><span class="params">(@NonNull LifecycleOwner owner)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">(@NonNull LifecycleOwner owner)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ObserverWithState对象封装好了之后，继续往下走：</p><p>2、根据当前页面state对observer进行state转移，这里可能会涉及到多次转移</p><p>3、把当前页面的state状态同步给所有的oberver</p><h4 id="移除观察者"><a href="#移除观察者" class="headerlink" title="移除观察者"></a>移除观察者</h4><p>移除观察者通过removeObserver方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeObserver</span><span class="params">(@NonNull LifecycleObserver observer)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// we consciously decided not to send destruction events here in opposition to addObserver.</span></span><br><span class="line">    <span class="comment">// Our reasons for that:</span></span><br><span class="line">    <span class="comment">// 1. These events haven't yet happened at all. In contrast to events in addObservers, that</span></span><br><span class="line">    <span class="comment">// actually occurred but earlier.</span></span><br><span class="line">    <span class="comment">// 2. There are cases when removeObserver happens as a consequence of some kind of fatal</span></span><br><span class="line">    <span class="comment">// event. If removeObserver method sends destruction events, then a clean up routine becomes</span></span><br><span class="line">    <span class="comment">// more cumbersome. More specific example of that is: your LifecycleObserver listens for</span></span><br><span class="line">    <span class="comment">// a web connection, in the usual routine in OnStop method you report to a server that a</span></span><br><span class="line">    <span class="comment">// session has just ended and you close the connection. Now let's assume now that you</span></span><br><span class="line">    <span class="comment">// lost an internet and as a result you removed this observer. If you get destruction</span></span><br><span class="line">    <span class="comment">// events in removeObserver, you should have a special case in your onStop method that</span></span><br><span class="line">    <span class="comment">// checks if your web connection died and you shouldn't try to report anything to a server.</span></span><br><span class="line">    mObserverMap.remove(observer);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看出removeObserver只做了一件事，就是把observer从map里面移除。</p><h4 id="生命周期转发"><a href="#生命周期转发" class="headerlink" title="生命周期转发"></a>生命周期转发</h4><p>当生命周期发生改变的时候，会调用handleLifecycleEvent方法进行分发，里面调用moveToState方法进行状态转移，同步给所有的observer</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleLifecycleEvent</span><span class="params">(@NonNull Lifecycle.Event event)</span> </span>&#123;</span><br><span class="line">    State next = getStateAfter(event);</span><br><span class="line">    moveToState(next);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">moveToState</span><span class="params">(State next)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (mState == next) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    mState = next;</span><br><span class="line">    <span class="keyword">if</span> (mHandlingEvent || mAddingObserverCounter != <span class="number">0</span>) &#123;</span><br><span class="line">        mNewEventOccurred = <span class="keyword">true</span>;</span><br><span class="line">        <span class="comment">// we will figure out what to do on upper level.</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    mHandlingEvent = <span class="keyword">true</span>;</span><br><span class="line">    sync();</span><br><span class="line">    mHandlingEvent = <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过以上这3个方法就完成了生命周期-&gt;oberver的转发，实现了生命周期的自动监听实现。</p><h3 id="自定义LifecycleOwner"><a href="#自定义LifecycleOwner" class="headerlink" title="自定义LifecycleOwner"></a>自定义LifecycleOwner</h3><p>如果您有一个自定义类并希望使其成为 LifecycleOwner，您可以使用 LifecycleRegistry 类，但需要将事件转发到该类，如以下代码示例中所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> <span class="keyword">implements</span> <span class="title">LifecycleOwner</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> LifecycleRegistry lifecycleRegistry;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line"></span><br><span class="line">        lifecycleRegistry = <span class="keyword">new</span> LifecycleRegistry(<span class="keyword">this</span>);</span><br><span class="line">        lifecycleRegistry.markState(Lifecycle.State.CREATED);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStart</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onStart();</span><br><span class="line">        lifecycleRegistry.markState(Lifecycle.State.STARTED);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NonNull</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Lifecycle <span class="title">getLifecycle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> lifecycleRegistry;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>Lifecycle组件实际上就是对activity或者fragment的生命周期进行自动化监听，然后业务方根据自己的需求可以往Lifecycle组件里面在add或者remove监听，就是一种典型的观察者模式，去掉了以往需要直接在acivity和fragment的生命周期方法中显示调用组件对应方法的过程，让组件代码更有条理，也避免了activity和fragment的代码膨胀，提升代码的可维护性。</p><hr align="center" width="“100%”" color="#0e0e0e" size="1"><font size="3" color="red">如果您觉得写的还不错，感谢打赏：</font><p align="center"><img src="/resources/images/wechat_pay.png" width="150" alt="微信支付"><img src="/resources/images/ali_pay.jpeg" width="150" alt="支付宝"></p>]]></content>
    
    <summary type="html">
    
      Android生命周期感应组件lifecycle
    
    </summary>
    
      <category term="Android架构学习" scheme="http://easyliu.com/categories/Android%E6%9E%B6%E6%9E%84%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Android" scheme="http://easyliu.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Android Jetpack简介</title>
    <link href="http://easyliu.com/2020/10/31/android_jetpack/jetpack_intro/"/>
    <id>http://easyliu.com/2020/10/31/android_jetpack/jetpack_intro/</id>
    <published>2020-10-31T07:31:26.000Z</published>
    <updated>2020-10-31T08:29:02.997Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Jetpack简介"><a href="#Jetpack简介" class="headerlink" title="Jetpack简介"></a>Jetpack简介</h2><p>Jetpack 是一个由多个库组成的套件，可帮助开发者遵循最佳做法，减少样板代码并编写可在各种 Android 版本和设备中一致运行的代码，让开发者精力集中编写重要的代码。</p><p>Jetpack 包含与平台 API 解除捆绑的 androidx.* 软件包库。这意味着，它可以提供向后兼容性，且比 Android 平台的更新频率更高，以此确保您始终可以获取最新且最好的 Jetpack 组件版本。</p><h2 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h2><h3 id="加速开发"><a href="#加速开发" class="headerlink" title="加速开发"></a>加速开发</h3><p>组件可以单独采用（不过这些组件是为协同工作而构建的），同时利用 Kotlin 语言功能帮助您提高工作效率。</p><h3 id="消除样板代码"><a href="#消除样板代码" class="headerlink" title="消除样板代码"></a>消除样板代码</h3><p>Android Jetpack 可管理繁琐的 Activity（如后台任务、导航和生命周期管理），以便您可以专注于如何让您的应用出类拔萃。</p><h3 id="构建高质量的强大应用"><a href="#构建高质量的强大应用" class="headerlink" title="构建高质量的强大应用"></a>构建高质量的强大应用</h3><p>Android Jetpack 组件围绕现代化设计实践构建而成，具有向后兼容性，可以减少崩溃和内存泄漏。</p><p>以下是jetpack包含的内容：<br><img src="/2020/10/31/android_jetpack/jetpack_intro/intro.png" alt="简介"></p><p><a href="https://developer.android.com/jetpack#foundation-components" target="_blank" rel="noopener">jetpack文档</a></p><p><a href="https://www.youtube.com/watch?v=LmkKFCfmnhQ&feature=youtu.be" target="_blank" rel="noopener">jetpack视频介绍</a></p><h2 id="Jetpack架构组件设计思路"><a href="#Jetpack架构组件设计思路" class="headerlink" title="Jetpack架构组件设计思路"></a>Jetpack架构组件设计思路</h2><p><a href="https://developer.android.com/jetpack/guide" target="_blank" rel="noopener">应用架构指南</a></p><h3 id="基于移动应用用户体验"><a href="#基于移动应用用户体验" class="headerlink" title="基于移动应用用户体验"></a>基于移动应用用户体验</h3><p>在大多数情况下，桌面应用会在桌面或程序启动器中有一个入口点，且作为一个单体式进程运行。Android 应用则不然，它们的结构要复杂得多。典型的 Android 应用包含多个应用组件，包括 Activity、Fragment、Service、内容提供程序和广播接收器。</p><p>您需要在应用清单中声明其中的大多数应用组件。Android 操作系统随后会使用此文件来决定如何将您的应用集成到设备的整体用户体验中。鉴于正确编写的 Android 应用包含多个组件，并且用户经常会在短时间内与多个应用进行互动，因此应用需要适应不同类型的用户驱动型工作流和任务。</p><p>例如，思考一下当您在自己喜欢的社交网络应用中分享照片时会发生什么：</p><ul><li><p>该应用将触发相机 intent。Android 操作系统随后会启动相机应用来处理请求。此时，用户已离开社交网络应用，但他们的体验仍然是无缝的。</p></li><li><p>相机应用可能会触发其他 intent（如启动文件选择器），而这可能会再启动一个应用。</p></li><li><p>最后，用户返回社交网络应用并分享照片。</p></li></ul><p>在此过程中，用户随时可能会被电话或通知打断。处理之后，用户希望能够返回并继续分享照片。这种应用跳跃行为在移动设备上很常见，因此您的应用必须正确处理这些流程。</p><p>请注意，移动设备的资源也很有限，因此操作系统可能会随时终止某些应用进程，以便为新的进程腾出空间。</p><p>鉴于这种环境条件，您的应用组件可以不按顺序地单独启动，并且操作系统或用户可以随时销毁它们。由于这些事件不受您的控制，因此您不应在应用组件中存储任何应用数据或状态，并且应用组件不应相互依赖。</p><h3 id="常见的架构原则"><a href="#常见的架构原则" class="headerlink" title="常见的架构原则"></a>常见的架构原则</h3><p>如果您不应使用应用组件存储应用数据和状态，那么您应该如何设计应用呢？</p><h3 id="关注分离点"><a href="#关注分离点" class="headerlink" title="关注分离点"></a>关注分离点</h3><p>要遵循的最重要的原则是分离关注点。一种常见的错误是在一个 Activity 或 Fragment 中编写所有代码。这些基于界面的类应仅包含处理界面和操作系统交互的逻辑。您应使这些类尽可能保持精简，这样可以避免许多与生命周期相关的问题。</p><p>请注意，您并非拥有 Activity 和 Fragment 的实现；它们只是表示 Android 操作系统与应用之间关系的粘合类。操作系统可能会根据用户互动或因内存不足等系统条件随时销毁它们。为了提供令人满意的用户体验和更易于管理的应用维护体验，您最好尽量减少对它们的依赖。</p><h3 id="通过模型驱动界面"><a href="#通过模型驱动界面" class="headerlink" title="通过模型驱动界面"></a>通过模型驱动界面</h3><p>另一个重要原则是您应该通过模型驱动界面（最好是持久性模型）。模型是负责处理应用数据的组件。它们独立于应用中的 View 对象和应用组件，因此不受应用的生命周期以及相关的关注点的影响。</p><p>持久性是理想之选，原因如下：</p><ul><li>如果 Android 操作系统销毁应用以释放资源，用户不会丢失数据。</li><li>当网络连接不稳定或不可用时，应用会继续工作。</li></ul><p>应用所基于的模型类应明确定义数据管理职责，这样将使应用更可测试且更一致。</p><p>基于以上讨论就演变出来了如何使用Jetpack架构组件构建应用，如下所示：<br><img src="/2020/10/31/android_jetpack/jetpack_intro/final-architecture.png" alt="推荐架构图"></p><p>请注意，每个组件仅依赖于其下一级的组件。例如，Activity 和 Fragment 仅依赖于视图模型。存储区是唯一依赖于其他多个类的类；在本例中，存储区依赖于持久性数据模型和远程后端数据源。</p><p>这种设计打造了一致且愉快的用户体验。无论用户上次使用应用是在几分钟前还是几天之前，现在回到应用时都会立即看到应用在本地保留的用户信息。如果此数据已过时，则应用的存储区模块将开始在后台更新数据。</p><h2 id="Jetpack架构组件介绍"><a href="#Jetpack架构组件介绍" class="headerlink" title="Jetpack架构组件介绍"></a>Jetpack架构组件介绍</h2><p><a href="https://developer.android.com/topic/libraries/architecture" target="_blank" rel="noopener">Jetpack架构组件</a></p><p>Android 架构组件是一组库，可帮助您设计稳健、可测试且易维护的应用。您可以从管理界面组件生命周期和处理数据持久性的类着手。</p><ul><li><p>通过应用架构指南，学习有关汇编稳健应用的基础知识。</p></li><li><p>管理应用的生命周期。新的生命周期感知型组件可帮助您管理 Activity 和 Fragment 的生命周期。在配置更改后继续有效、避免内存泄漏，以及轻松加载数据到界面中。</p></li><li><p>使用 LiveData 构建数据对象，在基础数据库改变时通知视图。</p></li><li><p>ViewModel 存储界面相关的数据，这些数据不会在应用轮转时销毁。</p></li><li><p>Room 是一个 SQLite 对象映射库。它可用来避免样板代码，并轻松地将 SQLite 表数据转换为 Java 对象。Room 提供 SQLite 语句的编译时检查，并且可以返回 RxJava、Flowable 和 LiveData 可观察对象。</p></li></ul><p>以上就是对Jetpack组件的介绍，接下来会对Jetpack里面的架构组件进行剖析讲解。</p>]]></content>
    
    <summary type="html">
    
      Android Jetpack简介
    
    </summary>
    
      <category term="Android架构学习" scheme="http://easyliu.com/categories/Android%E6%9E%B6%E6%9E%84%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Android" scheme="http://easyliu.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>android组件化</title>
    <link href="http://easyliu.com/2020/09/20/android_architecture/component/"/>
    <id>http://easyliu.com/2020/09/20/android_architecture/component/</id>
    <published>2020-09-19T16:21:14.000Z</published>
    <updated>2020-09-19T16:24:08.454Z</updated>
    
    <content type="html"><![CDATA[<h3 id="学习资料"><a href="#学习资料" class="headerlink" title="学习资料"></a>学习资料</h3><p><a href="https://www.jianshu.com/p/59822a7b2fad" target="_blank" rel="noopener">Android彻底组件化demo发布</a></p><p><a href="https://cloud.tencent.com/developer/article/1358359" target="_blank" rel="noopener">知乎 Android 客户端组件化实践</a></p><p><a href="https://mp.weixin.qq.com/s/6Q818XA5FaHd7jJMFBG60w" target="_blank" rel="noopener">微信Android模块化架构重构实践</a></p><h3 id="中心思想"><a href="#中心思想" class="headerlink" title="中心思想"></a>中心思想</h3><h5 id="1、代码解耦。如何将一个庞大的工程拆分成有机的整体？"><a href="#1、代码解耦。如何将一个庞大的工程拆分成有机的整体？" class="headerlink" title="1、代码解耦。如何将一个庞大的工程拆分成有机的整体？"></a>1、代码解耦。如何将一个庞大的工程拆分成有机的整体？</h5><h5 id="2、组件单独运行。每个组件都是一个完整的整体，如何让其单独运行和调试呢？"><a href="#2、组件单独运行。每个组件都是一个完整的整体，如何让其单独运行和调试呢？" class="headerlink" title="2、组件单独运行。每个组件都是一个完整的整体，如何让其单独运行和调试呢？"></a>2、组件单独运行。每个组件都是一个完整的整体，如何让其单独运行和调试呢？</h5><h5 id="3、数据传递。因为每个组件都会给其他组件提供的服务，那么主项目（Host）与组件、组件与组件之间如何传递数据？"><a href="#3、数据传递。因为每个组件都会给其他组件提供的服务，那么主项目（Host）与组件、组件与组件之间如何传递数据？" class="headerlink" title="3、数据传递。因为每个组件都会给其他组件提供的服务，那么主项目（Host）与组件、组件与组件之间如何传递数据？"></a>3、数据传递。因为每个组件都会给其他组件提供的服务，那么主项目（Host）与组件、组件与组件之间如何传递数据？</h5><h5 id="4、UI跳转。UI跳转可以认为是一种特殊的数据传递，在实现思路上有啥不同？"><a href="#4、UI跳转。UI跳转可以认为是一种特殊的数据传递，在实现思路上有啥不同？" class="headerlink" title="4、UI跳转。UI跳转可以认为是一种特殊的数据传递，在实现思路上有啥不同？"></a>4、UI跳转。UI跳转可以认为是一种特殊的数据传递，在实现思路上有啥不同？</h5><h5 id="5、组件的生命周期。我们的目标是可以做到对组件可以按需、动态的使用，因此就会涉及到组件加载、卸载和降维的生命周期。"><a href="#5、组件的生命周期。我们的目标是可以做到对组件可以按需、动态的使用，因此就会涉及到组件加载、卸载和降维的生命周期。" class="headerlink" title="5、组件的生命周期。我们的目标是可以做到对组件可以按需、动态的使用，因此就会涉及到组件加载、卸载和降维的生命周期。"></a>5、组件的生命周期。我们的目标是可以做到对组件可以按需、动态的使用，因此就会涉及到组件加载、卸载和降维的生命周期。</h5><h5 id="6、集成调试。在开发阶段如何做到按需的编译组件？一次调试中可能只有一两个组件参与集成，这样编译的时间就会大大降低，提高开发效率。"><a href="#6、集成调试。在开发阶段如何做到按需的编译组件？一次调试中可能只有一两个组件参与集成，这样编译的时间就会大大降低，提高开发效率。" class="headerlink" title="6、集成调试。在开发阶段如何做到按需的编译组件？一次调试中可能只有一两个组件参与集成，这样编译的时间就会大大降低，提高开发效率。"></a>6、集成调试。在开发阶段如何做到按需的编译组件？一次调试中可能只有一两个组件参与集成，这样编译的时间就会大大降低，提高开发效率。</h5><h5 id="7、代码隔离。组件之间的交互如果还是直接引用的话，那么组件之间根本没有做到解耦，如何从根本上避免组件之间的直接引用呢？也就是如何从根本上杜绝耦合的产生呢？只有做到这一点才是彻底的组件化。"><a href="#7、代码隔离。组件之间的交互如果还是直接引用的话，那么组件之间根本没有做到解耦，如何从根本上避免组件之间的直接引用呢？也就是如何从根本上杜绝耦合的产生呢？只有做到这一点才是彻底的组件化。" class="headerlink" title="7、代码隔离。组件之间的交互如果还是直接引用的话，那么组件之间根本没有做到解耦，如何从根本上避免组件之间的直接引用呢？也就是如何从根本上杜绝耦合的产生呢？只有做到这一点才是彻底的组件化。"></a>7、代码隔离。组件之间的交互如果还是直接引用的话，那么组件之间根本没有做到解耦，如何从根本上避免组件之间的直接引用呢？也就是如何从根本上杜绝耦合的产生呢？只有做到这一点才是彻底的组件化。</h5>]]></content>
    
    <summary type="html">
    
      android组件化
    
    </summary>
    
      <category term="Android架构学习" scheme="http://easyliu.com/categories/Android%E6%9E%B6%E6%9E%84%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Android" scheme="http://easyliu.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>2020.9-2020.12学习计划</title>
    <link href="http://easyliu.com/2020/09/20/study_plan/2020.9-2020.12/"/>
    <id>http://easyliu.com/2020/09/20/study_plan/2020.9-2020.12/</id>
    <published>2020-09-19T16:06:37.000Z</published>
    <updated>2020-12-07T13:51:04.598Z</updated>
    
    <content type="html"><![CDATA[<h2 id="学习计划"><a href="#学习计划" class="headerlink" title="学习计划"></a>学习计划</h2><p><img src="/2020/09/20/study_plan/2020.9-2020.12/study_plan.jpg" alt="study_plan"></p><h2 id="执行情况"><a href="#执行情况" class="headerlink" title="执行情况"></a>执行情况</h2><h3 id="组件化-已完成"><a href="#组件化-已完成" class="headerlink" title="组件化     已完成"></a>组件化     已完成</h3><h3 id="MVVM-已完成"><a href="#MVVM-已完成" class="headerlink" title="MVVM      已完成"></a>MVVM      已完成</h3><h3 id="热修复与插件化-大致看了一下源码，还没有具体细看"><a href="#热修复与插件化-大致看了一下源码，还没有具体细看" class="headerlink" title="热修复与插件化 大致看了一下源码，还没有具体细看"></a>热修复与插件化 大致看了一下源码，还没有具体细看</h3><h3 id="编译插桩技术-还没开始学习"><a href="#编译插桩技术-还没开始学习" class="headerlink" title="编译插桩技术 还没开始学习"></a>编译插桩技术 还没开始学习</h3>]]></content>
    
    <summary type="html">
    
      2020.9-2020.12学习计划
    
    </summary>
    
      <category term="学习计划" scheme="http://easyliu.com/categories/%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/"/>
    
    
      <category term="学习计划" scheme="http://easyliu.com/tags/%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>学习路线</title>
    <link href="http://easyliu.com/2020/09/18/android/StudyPlan/"/>
    <id>http://easyliu.com/2020/09/18/android/StudyPlan/</id>
    <published>2020-09-18T03:38:59.000Z</published>
    <updated>2020-09-19T05:45:17.020Z</updated>
    
    <content type="html"><![CDATA[<h2 id="学习路线图"><a href="#学习路线图" class="headerlink" title="学习路线图"></a>学习路线图</h2><p><img src="/2020/09/18/android/StudyPlan/study_plan.png" alt="学习路线图"></p>]]></content>
    
    <summary type="html">
    
      学习路线
    
    </summary>
    
      <category term="学习计划" scheme="http://easyliu.com/categories/%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/"/>
    
    
      <category term="学习计划" scheme="http://easyliu.com/tags/%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>4、linkedList</title>
    <link href="http://easyliu.com/2020/07/12/algorithm/linkedList/"/>
    <id>http://easyliu.com/2020/07/12/algorithm/linkedList/</id>
    <published>2020-07-12T06:49:39.000Z</published>
    <updated>2020-07-18T10:02:34.864Z</updated>
    
    <content type="html"><![CDATA[<h2 id="链表结构体定义"><a href="#链表结构体定义" class="headerlink" title="链表结构体定义"></a>链表结构体定义</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ListNode</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    ListNode next;</span><br><span class="line"></span><br><span class="line">    ListNode(<span class="keyword">int</span> x) &#123;</span><br><span class="line">        val = x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> == o) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span> || getClass() != o.getClass()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ListNode listNode = (ListNode) o;</span><br><span class="line">        <span class="keyword">boolean</span> valueEqual = val == listNode.val;</span><br><span class="line">        <span class="keyword">boolean</span> nextEqual = (next == <span class="keyword">null</span> &amp;&amp; listNode.next == <span class="keyword">null</span>) || (next != <span class="keyword">null</span> &amp;&amp; next.equals(listNode.next));</span><br><span class="line">        <span class="keyword">return</span> valueEqual &amp;&amp; nextEqual;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Objects.hash(val, next);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="链表相关操作"><a href="#链表相关操作" class="headerlink" title="链表相关操作"></a>链表相关操作</h2><h3 id="创建链表"><a href="#创建链表" class="headerlink" title="创建链表"></a>创建链表</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 创建链表</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ListNode <span class="title">createList</span><span class="params">(<span class="keyword">int</span>[] arrays)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (arrays == <span class="keyword">null</span> || arrays.length &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ListNode head = <span class="keyword">null</span>;</span><br><span class="line">    ListNode cur = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> val : arrays) &#123;</span><br><span class="line">        ListNode newNode = <span class="keyword">new</span> ListNode(val);</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="keyword">null</span>) &#123;</span><br><span class="line">            head = newNode;</span><br><span class="line">            cur = head;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            cur.next = newNode;</span><br><span class="line">            cur = cur.next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="找到链表的最后一个节点"><a href="#找到链表的最后一个节点" class="headerlink" title="找到链表的最后一个节点"></a>找到链表的最后一个节点</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 找到最后一个节点</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ListNode <span class="title">findLastNode</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (head == <span class="keyword">null</span> || head.next == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">    ListNode lastNode = head;</span><br><span class="line">    <span class="keyword">while</span> (lastNode.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">        lastNode = lastNode.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> lastNode;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="删除一个节点"><a href="#删除一个节点" class="headerlink" title="删除一个节点"></a>删除一个节点</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 删除一个节点</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ListNode <span class="title">deleteNode</span><span class="params">(ListNode head, ListNode toDelete)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (toDelete == <span class="keyword">null</span> || head == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ListNode tmp;</span><br><span class="line">    <span class="keyword">if</span> (head.val == toDelete.val) &#123;</span><br><span class="line">        tmp = head;</span><br><span class="line">        head = head.next;</span><br><span class="line">        tmp.next = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">    ListNode cur = head;</span><br><span class="line">    <span class="keyword">while</span> (cur != <span class="keyword">null</span> &amp;&amp; cur.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (cur.next.val == toDelete.val) &#123;</span><br><span class="line">            tmp = cur.next;</span><br><span class="line">            cur.next = cur.next.next;</span><br><span class="line">            tmp.next = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cur = cur.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="插入链表"><a href="#插入链表" class="headerlink" title="插入链表"></a>插入链表</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 插入一个节点或者链表</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ListNode <span class="title">insertNode</span><span class="params">(ListNode head, ListNode toInsert, <span class="keyword">int</span> pos)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (pos &lt; <span class="number">0</span> || head == <span class="keyword">null</span> || toInsert == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    ListNode curNode = head;</span><br><span class="line">    <span class="keyword">if</span> (pos &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">while</span> (curNode.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">            curNode = curNode.next;</span><br><span class="line">            count++;</span><br><span class="line">            <span class="keyword">if</span> (count == pos) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (count == pos) &#123;</span><br><span class="line">        ListNode tmp = curNode.next;</span><br><span class="line">        curNode.next = toInsert;</span><br><span class="line">        <span class="comment">//找到insertNode的最后一个节点指向tmp</span></span><br><span class="line">        ListNode lastNodeOfInsertNode = findLastNode(toInsert);</span><br><span class="line">        lastNodeOfInsertNode.next = tmp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="反转链表"><a href="#反转链表" class="headerlink" title="反转链表"></a>反转链表</h3><h4 id="使用stack实现"><a href="#使用stack实现" class="headerlink" title="使用stack实现"></a>使用stack实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 反转链表，使用stack实现</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ListNode <span class="title">reverseListWithStack</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (head == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Stack&lt;ListNode&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">    stack.push(head);</span><br><span class="line">    <span class="keyword">while</span> (head.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">        stack.push(head.next);</span><br><span class="line">        head.next = head.next.next;</span><br><span class="line">    &#125;</span><br><span class="line">    ListNode newHead = stack.pop();</span><br><span class="line">    ListNode pNode = newHead;</span><br><span class="line">    <span class="keyword">while</span> (!stack.isEmpty()) &#123;</span><br><span class="line">        ListNode curNode = stack.pop();</span><br><span class="line">        pNode.next = curNode;</span><br><span class="line">        pNode = curNode;</span><br><span class="line">    &#125;</span><br><span class="line">    pNode.next = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">return</span> newHead;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="使用双向指针实现"><a href="#使用双向指针实现" class="headerlink" title="使用双向指针实现"></a>使用双向指针实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 反转链表，使用双指针实现</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ListNode <span class="title">reverseListWithDoublePointer</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">    ListNode tmp;</span><br><span class="line">    ListNode pre = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">while</span> (head != <span class="keyword">null</span>) &#123;</span><br><span class="line">        tmp = head.next;</span><br><span class="line">        head.next = pre;</span><br><span class="line">        pre = head;</span><br><span class="line">        head = tmp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> pre;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h2><h3 id="删除节点"><a href="#删除节点" class="headerlink" title="删除节点"></a>删除节点</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.easyliu.test.linklist;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Assert;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeleteNodeTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 自测用例：</span></span><br><span class="line"><span class="comment">     * 1、head为null</span></span><br><span class="line"><span class="comment">     * 2、要删除的节点为null</span></span><br><span class="line"><span class="comment">     * 3、删除头部的节点</span></span><br><span class="line"><span class="comment">     * 4、删除尾部的节点</span></span><br><span class="line"><span class="comment">     * 5、删除中间节点</span></span><br><span class="line"><span class="comment">     * 6、有多个val一样的节点，删除第一个相等的节点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testNullHead</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//arrange</span></span><br><span class="line">        <span class="comment">//act</span></span><br><span class="line">        ListNode result = ListOperate.deleteNode(<span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">        <span class="comment">//verify</span></span><br><span class="line">        Assert.assertNull(result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testNulToDeleteNode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//arrange</span></span><br><span class="line">        ListNode listNode = ListOperate.createList(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>, <span class="number">2</span>&#125;);</span><br><span class="line">        <span class="comment">//act</span></span><br><span class="line">        ListNode result = ListOperate.deleteNode(listNode, <span class="keyword">null</span>);</span><br><span class="line">        <span class="comment">//verify</span></span><br><span class="line">        Assert.assertNull(result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDeleteHeadNode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//arrange</span></span><br><span class="line">        ListNode head = ListOperate.createList(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>, <span class="number">2</span>&#125;);</span><br><span class="line">        ListNode toDeleteNode = ListOperate.createList(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>&#125;);</span><br><span class="line">        ListNode expectList = ListOperate.createList(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">2</span>&#125;);</span><br><span class="line">        <span class="comment">//act</span></span><br><span class="line">        ListNode result = ListOperate.deleteNode(head, toDeleteNode);</span><br><span class="line">        <span class="comment">//verify</span></span><br><span class="line">        Assert.assertEquals(expectList, result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDeleteTailNode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//arrange</span></span><br><span class="line">        ListNode head = ListOperate.createList(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>, <span class="number">2</span>&#125;);</span><br><span class="line">        ListNode toDeleteNode = ListOperate.createList(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">2</span>&#125;);</span><br><span class="line">        ListNode expectList = ListOperate.createList(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>&#125;);</span><br><span class="line">        <span class="comment">//act</span></span><br><span class="line">        ListNode result = ListOperate.deleteNode(head, toDeleteNode);</span><br><span class="line">        <span class="comment">//verify</span></span><br><span class="line">        Assert.assertEquals(expectList, result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDeleteMiddleNode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//arrange</span></span><br><span class="line">        ListNode head = ListOperate.createList(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;);</span><br><span class="line">        ListNode toDeleteNode = ListOperate.createList(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">2</span>&#125;);</span><br><span class="line">        ListNode expectList = ListOperate.createList(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>, <span class="number">3</span>&#125;);</span><br><span class="line">        <span class="comment">//act</span></span><br><span class="line">        ListNode result = ListOperate.deleteNode(head, toDeleteNode);</span><br><span class="line">        <span class="comment">//verify</span></span><br><span class="line">        Assert.assertEquals(expectList, result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDeleteRepeatNode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//arrange</span></span><br><span class="line">        ListNode head = ListOperate.createList(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>&#125;);</span><br><span class="line">        ListNode toDeleteNode = ListOperate.createList(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">2</span>&#125;);</span><br><span class="line">        ListNode expectList = ListOperate.createList(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;);</span><br><span class="line">        <span class="comment">//act</span></span><br><span class="line">        ListNode result = ListOperate.deleteNode(head, toDeleteNode);</span><br><span class="line">        <span class="comment">//verify</span></span><br><span class="line">        Assert.assertEquals(expectList, result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="插入节点"><a href="#插入节点" class="headerlink" title="插入节点"></a>插入节点</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.easyliu.test.linklist;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Assert;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InsertNodeTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 自测用例</span></span><br><span class="line"><span class="comment">     * 1、pos小于0</span></span><br><span class="line"><span class="comment">     * 2、head为null</span></span><br><span class="line"><span class="comment">     * 3、toInsertNode为null</span></span><br><span class="line"><span class="comment">     * 4、pos=0</span></span><br><span class="line"><span class="comment">     * 5、pos为size-1</span></span><br><span class="line"><span class="comment">     * 6、pos&gt;0&amp;&amp;pos&lt;size-1</span></span><br><span class="line"><span class="comment">     * 7、toInsert有多个节点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testNullHead</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//arrange</span></span><br><span class="line">        <span class="comment">//act</span></span><br><span class="line">        ListNode result = ListOperate.insertNode(<span class="keyword">null</span>, <span class="keyword">null</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="comment">//verify</span></span><br><span class="line">        Assert.assertNull(result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testNegativePos</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//arrange</span></span><br><span class="line">        ListNode listNode = ListOperate.createList(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;);</span><br><span class="line">        <span class="comment">//act</span></span><br><span class="line">        ListNode result = ListOperate.insertNode(listNode, <span class="keyword">null</span>, -<span class="number">1</span>);</span><br><span class="line">        <span class="comment">//verify</span></span><br><span class="line">        Assert.assertEquals(listNode, result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testNullInsertNode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//arrange</span></span><br><span class="line">        ListNode listNode = ListOperate.createList(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;);</span><br><span class="line">        <span class="comment">//act</span></span><br><span class="line">        ListNode result = ListOperate.insertNode(listNode, <span class="keyword">null</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="comment">//verify</span></span><br><span class="line">        Assert.assertEquals(listNode, result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testZeroPos</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//arrange</span></span><br><span class="line">        ListNode listNode = ListOperate.createList(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;);</span><br><span class="line">        ListNode insertNode = ListOperate.createList(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>&#125;);</span><br><span class="line">        ListNode expectList = ListOperate.createList(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;);</span><br><span class="line">        <span class="comment">//act</span></span><br><span class="line">        ListNode result = ListOperate.insertNode(listNode, insertNode, <span class="number">0</span>);</span><br><span class="line">        <span class="comment">//verify</span></span><br><span class="line">        Assert.assertEquals(expectList, result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testMaxPos</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//arrange</span></span><br><span class="line">        ListNode listNode = ListOperate.createList(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;);</span><br><span class="line">        ListNode insertNode = ListOperate.createList(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>&#125;);</span><br><span class="line">        ListNode expectList = ListOperate.createList(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>&#125;);</span><br><span class="line">        <span class="comment">//act</span></span><br><span class="line">        ListNode result = ListOperate.insertNode(listNode, insertNode, <span class="number">2</span>);</span><br><span class="line">        <span class="comment">//verify</span></span><br><span class="line">        Assert.assertEquals(expectList, result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testMiddlePos</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//arrange</span></span><br><span class="line">        ListNode listNode = ListOperate.createList(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;);</span><br><span class="line">        ListNode insertNode = ListOperate.createList(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>&#125;);</span><br><span class="line">        ListNode expectList = ListOperate.createList(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>&#125;);</span><br><span class="line">        <span class="comment">//act</span></span><br><span class="line">        ListNode result = ListOperate.insertNode(listNode, insertNode, <span class="number">1</span>);</span><br><span class="line">        <span class="comment">//verify</span></span><br><span class="line">        Assert.assertEquals(expectList, result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testMultiNodeOfInsert</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//arrange</span></span><br><span class="line">        ListNode listNode = ListOperate.createList(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;);</span><br><span class="line">        ListNode insertNode = ListOperate.createList(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>&#125;);</span><br><span class="line">        ListNode expectList = ListOperate.createList(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">3</span>&#125;);</span><br><span class="line">        <span class="comment">//act</span></span><br><span class="line">        ListNode result = ListOperate.insertNode(listNode, insertNode, <span class="number">1</span>);</span><br><span class="line">        <span class="comment">//verify</span></span><br><span class="line">        Assert.assertEquals(expectList, result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="反转链表-1"><a href="#反转链表-1" class="headerlink" title="反转链表"></a>反转链表</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.easyliu.test.linklist;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Assert;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReverseListTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testNullInput</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//arrange</span></span><br><span class="line">        ListNode head = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">//act</span></span><br><span class="line">        ListNode result = ListOperate.reverseListWithStack(head);</span><br><span class="line">        ListNode doubleResult = ListOperate.reverseListWithDoublePointer(head);</span><br><span class="line">        <span class="comment">//verify</span></span><br><span class="line">        Assert.assertNull(result);</span><br><span class="line">        Assert.assertNull(doubleResult);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSingleNodeNormal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//arrange</span></span><br><span class="line">        ListNode listOne = ListOperate.createList(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>&#125;);</span><br><span class="line">        ListNode listTwo = ListOperate.createList(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>&#125;);</span><br><span class="line">        <span class="comment">//act</span></span><br><span class="line">        ListNode result = ListOperate.reverseListWithStack(listOne);</span><br><span class="line">        ListNode doubleResult = ListOperate.reverseListWithDoublePointer(listTwo);</span><br><span class="line">        <span class="comment">//verify</span></span><br><span class="line">        ListNode expect = ListOperate.createList(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>&#125;);</span><br><span class="line">        Assert.assertEquals(expect, result);</span><br><span class="line">        Assert.assertEquals(expect, doubleResult);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testNormal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//arrange</span></span><br><span class="line">        ListNode listOne = ListOperate.createList(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;);</span><br><span class="line">        ListNode listTwo = ListOperate.createList(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;);</span><br><span class="line">        <span class="comment">//act</span></span><br><span class="line">        ListNode result = ListOperate.reverseListWithStack(listOne);</span><br><span class="line">        ListNode doubleResult = ListOperate.reverseListWithDoublePointer(listTwo);</span><br><span class="line">        <span class="comment">//verify</span></span><br><span class="line">        ListNode expect = ListOperate.createList(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>&#125;);</span><br><span class="line">        Assert.assertEquals(expect, result);</span><br><span class="line">        Assert.assertEquals(expect, doubleResult);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      链表相关操作
    
    </summary>
    
      <category term="刷题" scheme="http://easyliu.com/categories/%E5%88%B7%E9%A2%98/"/>
    
    
      <category term="算法" scheme="http://easyliu.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>3、SecondArrayFind</title>
    <link href="http://easyliu.com/2020/06/18/algorithm/SecondArrayFind/"/>
    <id>http://easyliu.com/2020/06/18/algorithm/SecondArrayFind/</id>
    <published>2020-06-18T03:40:08.000Z</published>
    <updated>2020-07-12T07:02:12.659Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>在一个二维数组中（每个一维数组的长度相同），每一行都按照从左到右递增的顺序排序，<br>每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。</p><h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h3><p>int[][] inputArray = { {1, 2, 3}, {4, 5, 6}, {7, 8, 9} };<br>int target = 6;</p><h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><p>true</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecondArrayFind</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">secondArrayFindTarget</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span>[][] inputArray, <span class="keyword">final</span> <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (inputArray == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (inputArray[<span class="number">0</span>] == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> rowSize = inputArray.length;</span><br><span class="line">        <span class="keyword">int</span> columnSize = inputArray[<span class="number">0</span>].length;</span><br><span class="line">        <span class="keyword">int</span> row = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> column = columnSize - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (column &gt;= <span class="number">0</span> &amp;&amp; row &lt; rowSize) &#123;</span><br><span class="line">            <span class="keyword">int</span> curValue = inputArray[row][column];</span><br><span class="line">            <span class="keyword">if</span> (curValue &lt; target) &#123;</span><br><span class="line">                row++;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (curValue &gt; target) &#123;</span><br><span class="line">                column--;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> column &gt;= <span class="number">0</span> &amp;&amp; row &lt; rowSize;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecondArrayFindTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testNullInput</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Assert.assertFalse(SecondArrayFind.secondArrayFindTarget(<span class="keyword">null</span>, <span class="number">100</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testNormalFound</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[][] inputArray = &#123;&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;, &#123;<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;, &#123;<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>&#125;&#125;;</span><br><span class="line">        <span class="keyword">int</span> target = <span class="number">6</span>;</span><br><span class="line">        Assert.assertTrue(SecondArrayFind.secondArrayFindTarget(inputArray, target));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testNormalNotFound</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[][] inputArray = &#123;&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;, &#123;<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>&#125;, &#123;<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>&#125;&#125;;</span><br><span class="line">        <span class="keyword">int</span> target = <span class="number">5</span>;</span><br><span class="line">        Assert.assertFalse(SecondArrayFind.secondArrayFindTarget(inputArray, target));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      二维排序数组中查找对应的数字
    
    </summary>
    
      <category term="刷题" scheme="http://easyliu.com/categories/%E5%88%B7%E9%A2%98/"/>
    
    
      <category term="算法" scheme="http://easyliu.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>2、findFirstOneTimeChar</title>
    <link href="http://easyliu.com/2020/06/10/algorithm/findFirstOneTimeChar/"/>
    <id>http://easyliu.com/2020/06/10/algorithm/findFirstOneTimeChar/</id>
    <published>2020-06-10T03:00:22.000Z</published>
    <updated>2020-07-12T07:01:57.441Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>请实现一个函数，输入一个字符串，找出第一个只出现一次的字符。</p><h5 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h5><p>“asdfasdfo”</p><h5 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h5><p>‘o’</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">char</span> <span class="title">findFirstOneTimeChar</span><span class="params">(String input)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (input == <span class="keyword">null</span> || input.length() &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">char</span>[] chars = input.toCharArray();</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span>[] numArray = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">256</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">char</span> curChar : chars) &#123;</span><br><span class="line">        numArray[curChar]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">char</span> curChar : chars) &#123;</span><br><span class="line">        <span class="keyword">if</span> (numArray[curChar] == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> curChar;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FindFirstOneTimeCharTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testNulInput</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Assert.assertEquals(FindFirstOneTimeChar.findFirstOneTimeChar(<span class="keyword">null</span>), <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testEmptyInput</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Assert.assertEquals(FindFirstOneTimeChar.findFirstOneTimeChar(<span class="string">""</span>), <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSpaceInput</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Assert.assertEquals(FindFirstOneTimeChar.findFirstOneTimeChar(<span class="string">" "</span>), <span class="string">' '</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testNormalInput</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String input = <span class="string">"asdfasdfo"</span>;</span><br><span class="line">        <span class="keyword">char</span> expect = <span class="string">'o'</span>;</span><br><span class="line">        <span class="keyword">char</span> result = FindFirstOneTimeChar.findFirstOneTimeChar(input);</span><br><span class="line">        Assert.assertEquals(expect, result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      找到第一个只出现一次的字符
    
    </summary>
    
      <category term="刷题" scheme="http://easyliu.com/categories/%E5%88%B7%E9%A2%98/"/>
    
    
      <category term="算法" scheme="http://easyliu.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>1、replaceSpace</title>
    <link href="http://easyliu.com/2020/06/07/algorithm/repalceSpace/"/>
    <id>http://easyliu.com/2020/06/07/algorithm/repalceSpace/</id>
    <published>2020-06-07T07:37:57.000Z</published>
    <updated>2020-07-12T07:01:48.844Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>请实现一个函数，把字符串中的每个空格替换为”%20”。</p><h5 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h5><p>“We are happy”</p><h5 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h5><p>“We%20are%20happy”</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">replaceSpace</span><span class="params">(String input)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (input == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="string">""</span>.equals(input)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//计算空格的个数</span></span><br><span class="line">    <span class="keyword">char</span>[] chars = input.toCharArray();</span><br><span class="line">    <span class="keyword">int</span> numOfSpace = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">char</span> curChar : chars) &#123;</span><br><span class="line">        <span class="keyword">if</span> (curChar == <span class="string">' '</span>) &#123;</span><br><span class="line">            numOfSpace++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//创建一个新的字符数组</span></span><br><span class="line">    <span class="keyword">char</span>[] newChars = <span class="keyword">new</span> <span class="keyword">char</span>[chars.length + numOfSpace * <span class="number">2</span>];</span><br><span class="line">    <span class="keyword">int</span> indexOfNewChar = -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">char</span> curChar : chars) &#123;</span><br><span class="line">        <span class="keyword">if</span> (curChar != <span class="string">' '</span>) &#123;</span><br><span class="line">            newChars[++indexOfNewChar] = curChar;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            newChars[++indexOfNewChar] = <span class="string">'%'</span>;</span><br><span class="line">            newChars[++indexOfNewChar] = <span class="string">'2'</span>;</span><br><span class="line">            newChars[++indexOfNewChar] = <span class="string">'0'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> String.valueOf(newChars);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.easyliu.test.replace_space;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Assert;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReplaceSpaceTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testNullInput</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Assert.assertNull(ReplaceSpace.replaceSpace(<span class="keyword">null</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testEmptyInput</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Assert.assertNull(ReplaceSpace.replaceSpace(<span class="string">""</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testNormalSpace</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String expect = <span class="string">"we%20are%20happy"</span>;</span><br><span class="line">        String result = ReplaceSpace.replaceSpace(<span class="string">"we are happy"</span>);</span><br><span class="line">        Assert.assertEquals(expect, result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testMultiSpace</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String expect = <span class="string">"we%20%20are%20%20happy"</span>;</span><br><span class="line">        String result = ReplaceSpace.replaceSpace(<span class="string">"we  are  happy"</span>);</span><br><span class="line">        Assert.assertEquals(expect, result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSingleSpace</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String expect = <span class="string">"%20"</span>;</span><br><span class="line">        String result = ReplaceSpace.replaceSpace(<span class="string">" "</span>);</span><br><span class="line">        Assert.assertEquals(expect, result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testNoSpace</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String expect = <span class="string">"we"</span>;</span><br><span class="line">        String result = ReplaceSpace.replaceSpace(<span class="string">"we"</span>);</span><br><span class="line">        Assert.assertEquals(expect, result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      替换空格
    
    </summary>
    
      <category term="刷题" scheme="http://easyliu.com/categories/%E5%88%B7%E9%A2%98/"/>
    
    
      <category term="算法" scheme="http://easyliu.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Android studio 快捷键</title>
    <link href="http://easyliu.com/2020/05/30/android/as_shortcut/"/>
    <id>http://easyliu.com/2020/05/30/android/as_shortcut/</id>
    <published>2020-05-30T03:38:43.000Z</published>
    <updated>2020-05-30T04:33:49.100Z</updated>
    
    <content type="html"><![CDATA[<h2 id="重构快捷键"><a href="#重构快捷键" class="headerlink" title="重构快捷键"></a>重构快捷键</h2><p>shift+alt+M 选中抽取方法<br>ctrl+alt+c 抽取常量</p>]]></content>
    
    <summary type="html">
    
      Android studio 快捷键
    
    </summary>
    
      <category term="开发工具" scheme="http://easyliu.com/categories/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="android" scheme="http://easyliu.com/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>java代码规范</title>
    <link href="http://easyliu.com/2020/05/26/code/java_code_style/"/>
    <id>http://easyliu.com/2020/05/26/code/java_code_style/</id>
    <published>2020-05-26T13:31:58.000Z</published>
    <updated>2020-05-30T04:27:58.837Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1、减少嵌套层级，提前返回"><a href="#1、减少嵌套层级，提前返回" class="headerlink" title="1、减少嵌套层级，提前返回"></a>1、减少嵌套层级，提前返回</h3><h3 id="2、一行不大于100个字符"><a href="#2、一行不大于100个字符" class="headerlink" title="2、一行不大于100个字符"></a>2、一行不大于100个字符</h3><h3 id="3、函数参数个数不宜过多，太多了考虑抽象成类"><a href="#3、函数参数个数不宜过多，太多了考虑抽象成类" class="headerlink" title="3、函数参数个数不宜过多，太多了考虑抽象成类"></a>3、函数参数个数不宜过多，太多了考虑抽象成类</h3><h3 id="4、private成员变量以m为前缀"><a href="#4、private成员变量以m为前缀" class="headerlink" title="4、private成员变量以m为前缀"></a>4、private成员变量以m为前缀</h3><h3 id="5、常量为全大写，以下划线拼接"><a href="#5、常量为全大写，以下划线拼接" class="headerlink" title="5、常量为全大写，以下划线拼接"></a>5、常量为全大写，以下划线拼接</h3><h3 id="6、静态成员变量以s为前缀"><a href="#6、静态成员变量以s为前缀" class="headerlink" title="6、静态成员变量以s为前缀"></a>6、静态成员变量以s为前缀</h3><h3 id="7、单个函数行数不宜过多，超过20-line就考虑抽取函数"><a href="#7、单个函数行数不宜过多，超过20-line就考虑抽取函数" class="headerlink" title="7、单个函数行数不宜过多，超过20 line就考虑抽取函数"></a>7、单个函数行数不宜过多，超过20 line就考虑抽取函数</h3><h3 id="8、经常进行重构"><a href="#8、经常进行重构" class="headerlink" title="8、经常进行重构"></a>8、经常进行重构</h3><h3 id="9、时常考虑抽象、封装、多态"><a href="#9、时常考虑抽象、封装、多态" class="headerlink" title="9、时常考虑抽象、封装、多态"></a>9、时常考虑抽象、封装、多态</h3><h3 id="10、命名规则：精简但能清楚表达语义"><a href="#10、命名规则：精简但能清楚表达语义" class="headerlink" title="10、命名规则：精简但能清楚表达语义"></a>10、命名规则：精简但能清楚表达语义</h3><h3 id="11、写函数的时候从方便单测的角度进行考虑，进行单测覆盖"><a href="#11、写函数的时候从方便单测的角度进行考虑，进行单测覆盖" class="headerlink" title="11、写函数的时候从方便单测的角度进行考虑，进行单测覆盖"></a>11、写函数的时候从方便单测的角度进行考虑，进行单测覆盖</h3>]]></content>
    
    <summary type="html">
    
      java代码规范
    
    </summary>
    
      <category term="代码规范" scheme="http://easyliu.com/categories/%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83/"/>
    
    
      <category term="代码规范" scheme="http://easyliu.com/tags/%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83/"/>
    
  </entry>
  
</feed>
