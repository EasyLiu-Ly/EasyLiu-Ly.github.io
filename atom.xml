<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>EasyLiu</title>
  
  <subtitle>welcome to easyliu&#39;s blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://easyliu.com/"/>
  <updated>2023-05-14T16:07:27.157Z</updated>
  <id>http://easyliu.com/</id>
  
  <author>
    <name>EasyLiu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>kotlin接口支持SAM转换</title>
    <link href="http://easyliu.com/2023/05/14/kotlin/kotlin_sam/"/>
    <id>http://easyliu.com/2023/05/14/kotlin/kotlin_sam/</id>
    <published>2023-05-14T15:49:01.000Z</published>
    <updated>2023-05-14T16:07:27.157Z</updated>
    
    <content type="html"><![CDATA[<p>定义一个kotlin接口，如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IReportPlayerEventListenerFactory</span> </span>&#123;</span><br><span class="line">    <span class="function">fun <span class="title">getPlayerEventListener</span><span class="params">(mediaPlayer: Any?)</span>: ITVKPlayerEventListener?</span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure><p>这个接口使用的时候，是只能使用object匿名内部类的方式的，是没法使用SAM转换的：<br><img src="/2023/05/14/kotlin/kotlin_sam/image.png" alt="image"><br>那这个问题要怎么解决呢?<br><a href="https://kotlinlang.org/docs/whatsnew14.html#sam-conversions-for-kotlin-interfaces" target="_blank" rel="noopener">https://kotlinlang.org/docs/whatsnew14.html#sam-conversions-for-kotlin-interfaces</a><br>根据官方文档：kt1.4版本kt也支持SAM转换了:</p><p><img src="/2023/05/14/kotlin/kotlin_sam/image1.png" alt="image"><br>在interface前面添加一个fun关键字即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fun <span class="class"><span class="keyword">interface</span> <span class="title">IReportPlayerEventListenerFactory</span> </span>&#123;</span><br><span class="line">    <span class="function">fun <span class="title">getPlayerEventListener</span><span class="params">(mediaPlayer: Any?)</span>: ITVKPlayerEventListener?</span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      kotlin接口支持SAM转换
    
    </summary>
    
      <category term="Kotlin" scheme="http://easyliu.com/categories/Kotlin/"/>
    
    
      <category term="Android" scheme="http://easyliu.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>种植小番茄</title>
    <link href="http://easyliu.com/2022/06/02/life/grow_tomato/"/>
    <id>http://easyliu.com/2022/06/02/life/grow_tomato/</id>
    <published>2022-06-02T08:15:07.000Z</published>
    <updated>2023-05-14T14:11:00.140Z</updated>
    
    <content type="html"><![CDATA[<p>阳台种植小番茄，记录番茄的生长过程，5.5号开始种植种子：</p><h2 id="6-2-号"><a href="#6-2-号" class="headerlink" title="6.2 号"></a>6.2 号</h2><p>第17天，幼苗已经长出来了：<br><img width="400" src="/2022/06/02/life/grow_tomato/week_two_half.jpeg" vspace="20"></p><h2 id="6-17-号"><a href="#6-17-号" class="headerlink" title="6.17 号"></a>6.17 号</h2><p>第34天，长势还不错，进行了移栽，保证每个盆只保留1到2棵：<br><img width="400" src="/2022/06/02/life/grow_tomato/days_34_one.jpeg" vspace="20"></p><img width="400" src="/2022/06/02/life/grow_tomato/days_34_two.jpeg" vspace="20"><img width="400" src="/2022/06/02/life/grow_tomato/days_34_three.jpeg" vspace="20"><img width="400" src="/2022/06/02/life/grow_tomato/days_34_four.jpeg" vspace="20"><h2 id="6-25-号"><a href="#6-25-号" class="headerlink" title="6.25 号"></a>6.25 号</h2><p>第42天，可以看到一周不见，这俩盆里面的小番茄已经长高一大截了<br><img width="400" src="/2022/06/02/life/grow_tomato/days_42_one.jpeg" vspace="20"></p><img width="400" src="/2022/06/02/life/grow_tomato/days_42_two.jpeg" vspace="20"><p>上面这一盆里面有两棵，考虑土壤可能不够，番茄根系比较发达，因此移栽到了下面的大盆里面，对这俩棵寄予了殷切的希望～～，快快长大吧<br><img width="400" src="/2022/06/02/life/grow_tomato/days_42_three.jpeg" vspace="20"></p><p>最后是整体的效果，暂时应该不会进行大幅度的移栽调整了，基本上保证了每个盆只保留一棵了，继续观察吧～～<br><img width="400" src="/2022/06/02/life/grow_tomato/days_42_four.jpeg" vspace="20"></p><h2 id="7-10-号"><a href="#7-10-号" class="headerlink" title="7.10 号"></a>7.10 号</h2><p>第57天，可以看到下面这俩盆里面的小番茄又长高了一大截了，开始需要使用棍子进行固定才行了<br><img width="400" src="/2022/06/02/life/grow_tomato/days_57_two.jpeg" vspace="20"></p><img width="400" src="/2022/06/02/life/grow_tomato/days_57_three.jpeg" vspace="20"><p>这一棵也长高了，感觉拍摄角度还不错～～<br><img width="400" src="/2022/06/02/life/grow_tomato/days_57_four.jpeg" vspace="20"></p><p>这是总体效果，除了上面提到的三棵，其他的长得就比较慢了，有几棵小的叶子都黄了然后掉了，应该还是肥料养分不足导致，再观察一周看下情况吧，如果还不行就只能舍弃了～～<br><img width="400" src="/2022/06/02/life/grow_tomato/days_57_one.jpeg" vspace="20"></p><h2 id="2023-5-14-update-———–"><a href="#2023-5-14-update-———–" class="headerlink" title="2023.5.14 update ———–"></a>2023.5.14 update ———–</h2><p>最终由于番茄只顾着长个，开花，但是一直不结果，最终全部弄掉了，最后来几张图片作为纪念：</p><img width="400" src="/2022/06/02/life/grow_tomato/days_final_one.jpg" vspace="20"><img width="400" src="/2022/06/02/life/grow_tomato/days_final_two.jpg" vspace="20"><img width="400" src="/2022/06/02/life/grow_tomato/days_final_three.jpg" vspace="20">]]></content>
    
    <summary type="html">
    
      种植小番茄
    
    </summary>
    
      <category term="园艺" scheme="http://easyliu.com/categories/%E5%9B%AD%E8%89%BA/"/>
    
    
      <category term="日常生活" scheme="http://easyliu.com/tags/%E6%97%A5%E5%B8%B8%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>种辣椒</title>
    <link href="http://easyliu.com/2022/05/22/life/grow_pepper/"/>
    <id>http://easyliu.com/2022/05/22/life/grow_pepper/</id>
    <published>2022-05-22T08:01:07.000Z</published>
    <updated>2022-06-19T14:08:29.336Z</updated>
    
    <content type="html"><![CDATA[<p>阳台种植辣椒，记录辣椒的生长过程</p><p>6.19 update:<br>由于种植过程不理想，辣椒苗一直长不大，就放弃了辣椒种植，专心小番茄的种植：<br><a href="https://easyliu-ly.github.io/2022/06/02/life/grow_tomato/" target="_blank" rel="noopener">种植小番茄</a></p><img width="400" src="/2022/05/22/life/grow_pepper/week_one.jpeg" vspace="20"><img width="600" src="/2022/05/22/life/grow_pepper/week_two.jpeg" vspace="20"><img width="600" src="/2022/05/22/life/grow_pepper/week_three_half.jpeg" vspace="20">]]></content>
    
    <summary type="html">
    
      种辣椒
    
    </summary>
    
      <category term="园艺" scheme="http://easyliu.com/categories/%E5%9B%AD%E8%89%BA/"/>
    
    
      <category term="日常生活" scheme="http://easyliu.com/tags/%E6%97%A5%E5%B8%B8%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>深圳大鹏7娘山——2021.8.22</title>
    <link href="http://easyliu.com/2021/09/07/life/2021_8_22_seven_mother_moutain/"/>
    <id>http://easyliu.com/2021/09/07/life/2021_8_22_seven_mother_moutain/</id>
    <published>2021-09-07T01:49:51.000Z</published>
    <updated>2021-09-08T02:14:37.602Z</updated>
    
    <content type="html"><![CDATA[<h2 id="风景无敌"><a href="#风景无敌" class="headerlink" title="风景无敌"></a>风景无敌</h2><div id="dplayer1" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer1"),"autoplay":true,"theme":"#FADFA3","loop":true,"video":{"url":"/resources/video/seven_mom_moutain_one.mp4","pic":"/resources/image/seven_mom_moutain_poster.jpeg"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script><p><img src="/2021/09/07/life/2021_8_22_seven_mother_moutain/pic_1.jpg" alt="pic"></p><p><img src="/2021/09/07/life/2021_8_22_seven_mother_moutain/pic_2.jpg" alt="pic"></p><p><img src="/2021/09/07/life/2021_8_22_seven_mother_moutain/pic_3.jpg" alt="pic"></p><p><img src="/2021/09/07/life/2021_8_22_seven_mother_moutain/pic_4.jpg" alt="pic"></p><p><img src="/2021/09/07/life/2021_8_22_seven_mother_moutain/pic_5.jpg" alt="pic"></p><p><img src="/2021/09/07/life/2021_8_22_seven_mother_moutain/pic_6.jpg" alt="pic"></p><p><img src="/2021/09/07/life/2021_8_22_seven_mother_moutain/pic_7.jpg" alt="pic"></p><p><img src="/2021/09/07/life/2021_8_22_seven_mother_moutain/pic_8.jpg" alt="pic"></p><p><img src="/2021/09/07/life/2021_8_22_seven_mother_moutain/pic_9.jpg" alt="pic"></p><p><img src="/2021/09/07/life/2021_8_22_seven_mother_moutain/pic_10.jpg" alt="pic"></p><p><img src="/2021/09/07/life/2021_8_22_seven_mother_moutain/pic_11.jpg" alt="pic"></p><p><img src="/2021/09/07/life/2021_8_22_seven_mother_moutain/pic_12.jpg" alt="pic"></p><p><img src="/2021/09/07/life/2021_8_22_seven_mother_moutain/pic_13.jpg" alt="pic"></p><p><img src="/2021/09/07/life/2021_8_22_seven_mother_moutain/pic_14.jpg" alt="pic"></p><p><img src="/2021/09/07/life/2021_8_22_seven_mother_moutain/pic_15.jpg" alt="pic"></p><p><img src="/2021/09/07/life/2021_8_22_seven_mother_moutain/pic_16.jpg" alt="pic"></p><p><img src="/2021/09/07/life/2021_8_22_seven_mother_moutain/pic_17.jpg" alt="pic"></p><p><img src="/2021/09/07/life/2021_8_22_seven_mother_moutain/pic_18.jpg" alt="pic"></p><p><img src="/2021/09/07/life/2021_8_22_seven_mother_moutain/pic_19.jpg" alt="pic"></p><p><img src="/2021/09/07/life/2021_8_22_seven_mother_moutain/pic_20.jpg" alt="pic"></p><p><img src="/2021/09/07/life/2021_8_22_seven_mother_moutain/pic_21.jpg" alt="pic"></p><p><img src="/2021/09/07/life/2021_8_22_seven_mother_moutain/pic_22.jpg" alt="pic"></p><p><img src="/2021/09/07/life/2021_8_22_seven_mother_moutain/pic_23.jpg" alt="pic"></p><p><img src="/2021/09/07/life/2021_8_22_seven_mother_moutain/pic_24.jpg" alt="pic"></p><p><img src="/2021/09/07/life/2021_8_22_seven_mother_moutain/pic_25.jpg" alt="pic"></p><p><img src="/2021/09/07/life/2021_8_22_seven_mother_moutain/pic_26.jpg" alt="pic"></p><p><img src="/2021/09/07/life/2021_8_22_seven_mother_moutain/pic_27.jpg" alt="pic"></p><p><img src="/2021/09/07/life/2021_8_22_seven_mother_moutain/pic_28.jpg" alt="pic"></p><p><img src="/2021/09/07/life/2021_8_22_seven_mother_moutain/pic_29.jpg" alt="pic"></p><p><img src="/2021/09/07/life/2021_8_22_seven_mother_moutain/pic_30.jpg" alt="pic"></p>]]></content>
    
    <summary type="html">
    
      深圳大鹏7娘山——2021.8.22
    
    </summary>
    
      <category term="周末活动" scheme="http://easyliu.com/categories/%E5%91%A8%E6%9C%AB%E6%B4%BB%E5%8A%A8/"/>
    
    
      <category term="日常活动" scheme="http://easyliu.com/tags/%E6%97%A5%E5%B8%B8%E6%B4%BB%E5%8A%A8/"/>
    
  </entry>
  
  <entry>
    <title>（一）通过浏览器访问摄像头</title>
    <link href="http://easyliu.com/2021/06/08/live_study/visit_camare_through_browser/"/>
    <id>http://easyliu.com/2021/06/08/live_study/visit_camare_through_browser/</id>
    <published>2021-06-08T02:22:02.000Z</published>
    <updated>2022-02-17T07:19:14.899Z</updated>
    
    <content type="html"><![CDATA[<h2 id="index-html"><a href="#index-html" class="headerlink" title="index.html"></a>index.html</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;title&gt;WebRTC capture video and audio&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">        &lt;link rel="stylesheet" href="./</span>css/client.css<span class="string">"/&gt;</span></span><br><span class="line"><span class="string">    &lt;/head&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &lt;body&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        &lt;video autoplay playsinline id="</span>player<span class="string">"&gt;&lt;/video&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        &lt;script src="</span>https:<span class="comment">//webrtc.github.io/adapter/adapter-latest.js"&gt;&lt;/script&gt;</span></span><br><span class="line">        &lt;script src=<span class="string">"https://cdnjs.cloudflare.com/ajax/libs/socket.io/2.0.3/socket.io.js"</span>&gt;&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">        &lt;script src="./</span>js/client.js<span class="string">"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string">    &lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br></pre></td></tr></table></figure><h2 id="client-js"><a href="#client-js" class="headerlink" title="client.js"></a>client.js</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> videoplay = <span class="built_in">document</span>.querySelector(<span class="string">'video#player'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mediaStreamContrains = &#123;</span><br><span class="line">    video: &#123;</span><br><span class="line">        frameRate: &#123; <span class="attr">min</span>: <span class="number">20</span> &#125;,</span><br><span class="line">        width: &#123; <span class="attr">min</span>: <span class="number">640</span>, <span class="attr">ideal</span>: <span class="number">1280</span> &#125;,</span><br><span class="line">        height: &#123; <span class="attr">min</span>: <span class="number">360</span>, <span class="attr">ideal</span>: <span class="number">720</span> &#125;,</span><br><span class="line">        aspectRatio: <span class="number">16</span> / <span class="number">9</span>,</span><br><span class="line">        facingMode: <span class="string">'user'</span>,</span><br><span class="line">        resizeMode: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    audio: &#123;</span><br><span class="line">        echoCancellation: <span class="literal">true</span>,</span><br><span class="line">        noiseSuppression: <span class="literal">true</span>,</span><br><span class="line">        autoGainControl: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">gotMediaStream</span>(<span class="params">stream</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">window</span>.stream = stream;</span><br><span class="line">    videoplay.srcObject = stream;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleError</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'getUserMedia error:'</span>, err);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">start</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!navigator.mediaDevices ||</span><br><span class="line">        !navigator.mediaDevices.getUserMedia) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'getUserMedia is not supported!'</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        navigator.mediaDevices.getUserMedia(mediaStreamContrains)</span><br><span class="line">            .then(gotMediaStream)</span><br><span class="line">            .catch(handleError);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">start();</span><br></pre></td></tr></table></figure><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p>使用浏览器打开index.html就可以在浏览器里面看到前置摄像头影像了</p>]]></content>
    
    <summary type="html">
    
      （一）通过浏览器访问摄像头
    
    </summary>
    
      <category term="从0打造音视频直播系统" scheme="http://easyliu.com/categories/%E4%BB%8E0%E6%89%93%E9%80%A0%E9%9F%B3%E8%A7%86%E9%A2%91%E7%9B%B4%E6%92%AD%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="学习笔记" scheme="http://easyliu.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>WebViewFactory.getProvider耗时问题的一种解决思路</title>
    <link href="http://easyliu.com/2021/05/10/android_performance/webViewFactory_getProvider/"/>
    <id>http://easyliu.com/2021/05/10/android_performance/webViewFactory_getProvider/</id>
    <published>2021-05-10T02:11:49.000Z</published>
    <updated>2022-02-17T07:17:10.746Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>最近在做外部拉起视频底层页整个链路上的一个耗时优化，发现在这个过程中有一个地方挺耗时的，如下所示：<br><img src="/2021/05/10/android_performance/webViewFactory_getProvider/WebViewFacory_getProvider_trace.png" alt="trace"><br><img src="/2021/05/10/android_performance/webViewFactory_getProvider/cost.png" alt="cost"></p><p>可以看到这个WebViewFactory.getProvider()方法耗时了240ms！</p><p>找到WebViewFactory的源码如下所示:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> WebViewFactoryProvider <span class="title">getProvider</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (sProviderLock) &#123;</span><br><span class="line">            <span class="comment">// For now the main purpose of this function (and the factory abstraction) is to keep</span></span><br><span class="line">            <span class="comment">// us honest and minimize usage of WebView internals when binding the proxy.</span></span><br><span class="line">            <span class="keyword">if</span> (sProviderInstance != <span class="keyword">null</span>) <span class="keyword">return</span> sProviderInstance;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> uid = android.os.Process.myUid();</span><br><span class="line">            <span class="keyword">if</span> (uid == android.os.Process.ROOT_UID || uid == android.os.Process.SYSTEM_UID</span><br><span class="line">                    || uid == android.os.Process.PHONE_UID || uid == android.os.Process.NFC_UID</span><br><span class="line">                    || uid == android.os.Process.BLUETOOTH_UID) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException(</span><br><span class="line">                        <span class="string">"For security reasons, WebView is not allowed in privileged processes"</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (!isWebViewSupported()) &#123;</span><br><span class="line">                <span class="comment">// Device doesn't support WebView; don't try to load it, just throw.</span></span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (sWebViewDisabled) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(</span><br><span class="line">                        <span class="string">"WebView.disableWebView() was called: WebView is disabled"</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            Trace.traceBegin(Trace.TRACE_TAG_WEBVIEW, <span class="string">"WebViewFactory.getProvider()"</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Class&lt;WebViewFactoryProvider&gt; providerClass = getProviderClass();</span><br><span class="line">                Method staticFactory = <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    staticFactory = providerClass.getMethod(</span><br><span class="line">                        CHROMIUM_WEBVIEW_FACTORY_METHOD, WebViewDelegate<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (DEBUG) &#123;</span><br><span class="line">                        Log.w(LOGTAG, <span class="string">"error instantiating provider with static factory method"</span>, e);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                Trace.traceBegin(Trace.TRACE_TAG_WEBVIEW, <span class="string">"WebViewFactoryProvider invocation"</span>);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    sProviderInstance = (WebViewFactoryProvider)</span><br><span class="line">                            staticFactory.invoke(<span class="keyword">null</span>, <span class="keyword">new</span> WebViewDelegate());</span><br><span class="line">                    <span class="keyword">if</span> (DEBUG) Log.v(LOGTAG, <span class="string">"Loaded provider: "</span> + sProviderInstance);</span><br><span class="line">                    <span class="keyword">return</span> sProviderInstance;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    Log.e(LOGTAG, <span class="string">"error instantiating provider"</span>, e);</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> AndroidRuntimeException(e);</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    Trace.traceEnd(Trace.TRACE_TAG_WEBVIEW);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                Trace.traceEnd(Trace.TRACE_TAG_WEBVIEW);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>从代码可以看到这个getProvider里面有做处理：如果已经获取到了WebViewFactoryProvider就直接返回，也就是说只有第一次才会往下走，才会耗时。并且从WebViewFactory注释来看：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Top level factory, used creating all the main WebView implementation classes.</span><br></pre></td></tr></table></figure><p>这个WebViewFactory应该是跟WebView相关的，WebView的相关操作最终都会走到这个WebViewFactroy里面来。如果是这样的话，那我们能不能在App启动的时候在子线程提前调用这个getProvider方法来初始化一下这个WebViewFactoryProvider，并且这个getProvider是线程安全的方法。这样UI线程真正使用WebView的时候，这个getProvider方法就能直接返回了？答案是可以的，但是这个getProvider并不是一个public方法，只能通过反射调用了，代码如下所示：</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebViewHookManager</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"WebViewHookManager"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 提前在子线程里面调用WebViewFactory.getProvider方法，解决第一次调用耗时问题</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> isMainProcess 是否是主进程</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">initWebViewGetProvider</span><span class="params">(<span class="keyword">boolean</span> isMainProcess)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isMainProcess) &#123;</span><br><span class="line">            ThreadManager.getInstance().post(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="meta">@SuppressLint</span>(<span class="string">"PrivateApi"</span>)</span><br><span class="line">                    Class&lt;?&gt; webViewFactoryClass = Class.forName(<span class="string">"android.webkit.WebViewFactory"</span>);</span><br><span class="line">                    <span class="meta">@SuppressLint</span>(<span class="string">"DiscouragedPrivateApi"</span>)</span><br><span class="line">                    Method method = webViewFactoryClass.getDeclaredMethod(<span class="string">"getProvider"</span>);</span><br><span class="line">                    method.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">                    method.invoke(webViewFactoryClass);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    QQLiveLog.e(TAG, e, <span class="string">"WebViewFactory.getProvider"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h2><p>理论上我们在App启动的时候调用一下上述initWebViewGetProvider方法就可以了，但是实际上并不是如此。这个方法调用时机是有讲究的，不能放在Application.attachBaseContext方法里面调用，原因我们得从源码来查找答案。</p><p>在getProvider方法里面调用了一个方法isWebViewSupported：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isWebViewSupported</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// No lock; this is a benign race as Boolean's state is final and the PackageManager call</span></span><br><span class="line">    <span class="comment">// will always return the same value.</span></span><br><span class="line">    <span class="keyword">if</span> (sWebViewSupported == <span class="keyword">null</span>) &#123;</span><br><span class="line">        sWebViewSupported = AppGlobals.getInitialApplication().getPackageManager()</span><br><span class="line">                .hasSystemFeature(PackageManager.FEATURE_WEBVIEW);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sWebViewSupported;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个方法里面会通过AppGlobals.getInitialApplication()来获取到一个Application，全局搜索AppGlobals这个类来看下这个方法实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Return the first Application object made in the process.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">NOTE:</span> Only works on the main thread.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Application <span class="title">getInitialApplication</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ActivityThread.currentApplication();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到这个方法调用了 ActivityThread.currentApplication()方法，继续来看下这个方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Application mInitialApplication;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Application <span class="title">currentApplication</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ActivityThread am = currentActivityThread();</span><br><span class="line">    <span class="keyword">return</span> am != <span class="keyword">null</span> ? am.mInitialApplication : <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到这个currentApplication返回的是ActivityThread里面的成员变量mInitialApplication，继续来看下这个mInitialApplication成员变量赋值的地方，在ActivityThread的handleBindApplication方法里面有如下代码片段：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">           <span class="comment">// If the app is being launched for full backup or restore, bring it up in</span></span><br><span class="line">           <span class="comment">// a restricted environment with the base application class.</span></span><br><span class="line">           app = data.info.makeApplication(data.restrictedBackupMode, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">           <span class="comment">// Propagate autofill compat state</span></span><br><span class="line">           app.setAutofillCompatibilityEnabled(data.autofillCompatibilityEnabled);</span><br><span class="line"></span><br><span class="line">           mInitialApplication = app;</span><br><span class="line"></span><br><span class="line">           <span class="comment">// don't bring up providers in restricted mode; they may depend on the</span></span><br><span class="line">           <span class="comment">// app's custom Application class</span></span><br><span class="line">           <span class="keyword">if</span> (!data.restrictedBackupMode) &#123;</span><br><span class="line">               <span class="keyword">if</span> (!ArrayUtils.isEmpty(data.providers)) &#123;</span><br><span class="line">                   installContentProviders(app, data.providers);</span><br><span class="line">                   <span class="comment">// For process that contains content providers, we want to</span></span><br><span class="line">                   <span class="comment">// ensure that the JIT is enabled "at some point".</span></span><br><span class="line">                   mH.sendEmptyMessageDelayed(H.ENABLE_JIT, <span class="number">10</span>*<span class="number">1000</span>);</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           <span class="comment">// Do this after providers, since instrumentation tests generally start their</span></span><br><span class="line">           <span class="comment">// test thread at this point, and we don't want that racing.</span></span><br><span class="line">           <span class="keyword">try</span> &#123;</span><br><span class="line">               mInstrumentation.onCreate(data.instrumentationArgs);</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">               <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(</span><br><span class="line">                   <span class="string">"Exception thrown in onCreate() of "</span></span><br><span class="line">                   + data.instrumentationName + <span class="string">": "</span> + e.toString(), e);</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">try</span> &#123;</span><br><span class="line">               mInstrumentation.callApplicationOnCreate(app);</span><br><span class="line">           &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">               <span class="keyword">if</span> (!mInstrumentation.onException(app, e)) &#123;</span><br><span class="line">                   <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(</span><br><span class="line">                     <span class="string">"Unable to create application "</span> + app.getClass().getName()</span><br><span class="line">                     + <span class="string">": "</span> + e.toString(), e);</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure><p>这段代码主要分为3部分：<br>1、app = data.info.makeApplication(data.restrictedBackupMode, null)这句代码里面就会去创建一个Application，并且在里面会调用Application的attachBaseContext方法。执行完这个makeApplication方法之后，这个mInitialApplication才会进行赋值，因此不能在attachBaseContext就去调用WebViewFactory.getProvider方法，因为这个时候ActivityThread里面的mInitialApplication还没有初始化<br>2、installContentProviders方法会挨个执行ContentProvider的onCreate方法<br>3、最后mInstrumentation.callApplicationOnCreate(app)会执行Application的onCreate方法，因此我们可以在Application的onCreate方法里面调用WebViewFactory.getProvider方法</p><p>从上述代码可以看出这三步的一个执行顺序如下：<br>Application.attachBaseContext -&gt; ContentProvider.onCreate -&gt; Application.onCreate</p><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p>通过日志观察WebViewFactory的日志打印，可以看到代码已经执行成功了：<br><img src="/2021/05/10/android_performance/webViewFactory_getProvider/log.png" alt="log"></p><p>但是目前这个getProvider接口已经被列入了greylist里面了，在后续的版本不敢保证还能继续生效，这里只是提供一种解决问题的思路<br><img src="/2021/05/10/android_performance/webViewFactory_getProvider/greylist.png" alt="greylist"></p><p>优化之后的效果如下所示，可以看到UI线程WebViewFactory.getProvider()方法耗时已经没有了：<br><img src="/2021/05/10/android_performance/webViewFactory_getProvider/optimized.png" alt="optimized"></p>]]></content>
    
    <summary type="html">
    
      WebViewFactory.getProvider耗时问题的一种解决思路
    
    </summary>
    
      <category term="Android性能优化" scheme="http://easyliu.com/categories/Android%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
    
      <category term="Android" scheme="http://easyliu.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Android SystemTrace实战</title>
    <link href="http://easyliu.com/2021/04/27/android_performance/system_trace_use/"/>
    <id>http://easyliu.com/2021/04/27/android_performance/system_trace_use/</id>
    <published>2021-04-27T01:44:05.000Z</published>
    <updated>2022-02-17T07:17:03.154Z</updated>
    
    <content type="html"><![CDATA[<h2 id="SystemTrace使用"><a href="#SystemTrace使用" class="headerlink" title="SystemTrace使用"></a>SystemTrace使用</h2><p>在命令行输入如下命令：</p><blockquote><p>python /Users/easyliu/Library/Android/sdk/platform-tools/systrace/systrace.py –time=10 -o mynewtrace.html</p></blockquote><p>然后启动App，10s之后会在当前目录下面生成一个文件mynewtrace.html文件，这个文件只有使用chrome浏览器才能打开，如果使用chrome浏览器打不开，可以在chrome浏览器里面输入网址：<a href="https://ui.perfetto.dev/#!/viewer" target="_blank" rel="noopener">https://ui.perfetto.dev/#!/viewer</a>，在这个界面里面也可以打开这个trace文件</p><p>关于systrace更复杂的命令使用方式，参考：<br><a href="https://developer.android.com/topic/performance/tracing/custom-events?hl=zh-cn" target="_blank" rel="noopener">https://developer.android.com/topic/performance/tracing/custom-events?hl=zh-cn</a></p><p>在很多情况下，我们需要加入一些自己的event，比如我们想统计自定义Activity的onCreate方法的耗时，可以使用如下方式添加自定义的event：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Trace.beginSection(<span class="string">"SplashVideoDetailActivity#onCreate"</span>);</span><br><span class="line"><span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">Trace.endSection();</span><br></pre></td></tr></table></figure><p>要想自定义的event能够在trace文件里面展示出来，还需要在运行systrace命令的时候通过-a指定包名：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python systrace.py -a com.example.myapp --time=<span class="number">10</span> -o mynewtrace.html</span><br></pre></td></tr></table></figure><p>还有一点，默认情况下，只有debug才支持自定义的event，原因是在ActivityThread的handleBindApplication方法里面有如下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">boolean</span> isAppDebuggable = (data.appInfo.flags &amp; ApplicationInfo.FLAG_DEBUGGABLE) != <span class="number">0</span>;</span><br><span class="line">Trace.setAppTracingAllowed(isAppDebuggable);</span><br></pre></td></tr></table></figure><p>为了让release包也支持自定义的event，可以使用反射的方式修改：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ReflectUtil.invokeMethod(Trace.class, "setAppTracingAllowed",</span><br><span class="line">                  null, new Class[]&#123;boolean.class&#125;, new Object[]&#123;true&#125;);</span><br></pre></td></tr></table></figure><h2 id="SystemTrace锁耗时分析"><a href="#SystemTrace锁耗时分析" class="headerlink" title="SystemTrace锁耗时分析"></a>SystemTrace锁耗时分析</h2><p>抓取到trace之后，一般情况下我们都是直接分析UI线程的执行情况,如下所示：<br><img src="/2021/04/27/android_performance/system_trace_use/system_trace.png" alt="system_trace"><br>通过这个图可以很清晰的看到整个app启动过程的一个耗时情况，包括各个阶段的具体耗时情况，比如从上面的图我们发现在SplashVideoDetailActivity#onCreate方法里面两段很耗时的操作，我看来看一下第一段的耗时情况：<br><img src="/2021/04/27/android_performance/system_trace_use/system_trace_lock.png" alt="system_trace_lock"><br>选中这个区域，底部会展示出这段时间主线程耗时的具体的信息：</p><blockquote><p>Name    monitor contention with owner init-thread (32284) waiters=2 blocking from void java.lang.Runtime.load0(java.lang.Class, java.lang.String)(Runtime.java:-1)</p></blockquote><p>从这个信息可以很明确，这里UI卡住是因为调用了java.lang.Runtime.load0方法，这个方法在等待线程init-thread (32284)释放锁，那说明这个方法有锁？我们来看下源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">load0</span><span class="params">(Class&lt;?&gt; fromClass, String filename)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!(<span class="keyword">new</span> File(filename).isAbsolute())) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UnsatisfiedLinkError(</span><br><span class="line">            <span class="string">"Expecting an absolute path of the library: "</span> + filename);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (filename == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">"filename == null"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    String error = nativeLoad(filename, fromClass.getClassLoader());</span><br><span class="line">    <span class="keyword">if</span> (error != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UnsatisfiedLinkError(error);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到这个方法确实是有加锁的。既然是这样的话，我们应该可以在工程代码里面找到这个名字叫做init-thread的线程。通过全局查找，找到了这个线程就是启动Task线程池里面的，说明启动task里面有一个子线程的task有loadLibrary的动作，导致主线程去loadLibrary的时候就卡住了。然后再根据UI线程卡住的时间点，就可以缩小范围，最终就能找到loadLibrary的是哪个task，然后就可以再进一步分析了</p>]]></content>
    
    <summary type="html">
    
      Android SystemTrace实战
    
    </summary>
    
      <category term="Android性能优化" scheme="http://easyliu.com/categories/Android%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
    
      <category term="Android" scheme="http://easyliu.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>ActivityManagerService.reportSizeConfigurations异常问题规避方案</title>
    <link href="http://easyliu.com/2021/04/27/android_source_analysis/reportSizeConfigurations_exception/"/>
    <id>http://easyliu.com/2021/04/27/android_source_analysis/reportSizeConfigurations_exception/</id>
    <published>2021-04-27T01:34:59.000Z</published>
    <updated>2022-02-17T07:18:01.933Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>在crash平台上上报了以下crash，量还不少：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">android.os.RemoteException: Remote stack trace:</span><br><span class="line">com.android.server.am.ActivityManagerService.reportSizeConfigurations(ActivityManagerService.java:<span class="number">9443</span>)</span><br><span class="line">android.app.IActivityManager$Stub.onTransact(IActivityManager.java:<span class="number">2837</span>)</span><br><span class="line">com.android.server.am.ActivityManagerService.onTransact(ActivityManagerService.java:<span class="number">3654</span>)</span><br><span class="line">com.android.server.am.HwActivityManagerService.onTransact(HwActivityManagerService.java:<span class="number">609</span>)</span><br><span class="line">android.os.Binder.execTransact(Binder.java:<span class="number">739</span>)</span><br><span class="line">java.lang.IllegalArgumentException:reportSizeConfigurations: ActivityRecord not found <span class="keyword">for</span>: Token&#123;f7b56df ActivityRecord&#123;a06a17e u0 com.tencent.qqlive/.ona.activity.SplashVideoDetailActivity t-<span class="number">1</span> f&#125;&#125;</span><br><span class="line">android.os.Parcel.createException(Parcel.java:<span class="number">1957</span>)</span><br><span class="line">......</span><br><span class="line"></span><br><span class="line">android.os.RemoteException:Remote stack trace:</span><br><span class="line">com.android.server.am.ActivityManagerService.reportSizeConfigurations(ActivityManagerService.java:<span class="number">9443</span>)</span><br><span class="line">android.app.IActivityManager$Stub.onTransact(IActivityManager.java:<span class="number">2837</span>)</span><br><span class="line">com.android.server.am.ActivityManagerService.onTransact(ActivityManagerService.java:<span class="number">3654</span>)</span><br><span class="line">com.android.server.am.HwActivityManagerService.onTransact(HwActivityManagerService.java:<span class="number">609</span>)</span><br><span class="line">android.os.Binder.execTransact(Binder.java:<span class="number">739</span>)</span><br></pre></td></tr></table></figure><p>并且看crash机型都是出现了Android 9.0手机上。因此，我们就从Android 9.0源码下手开始分析：</p><h2 id="分析过程"><a href="#分析过程" class="headerlink" title="分析过程"></a>分析过程</h2><p>找到ActivityManagerService.reportSizeConfigurations方法源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reportSizeConfigurations</span><span class="params">(IBinder token, <span class="keyword">int</span>[] horizontalSizeConfiguration,</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">int</span>[] verticalSizeConfigurations, <span class="keyword">int</span>[] smallestSizeConfigurations)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (DEBUG_CONFIGURATION) Slog.v(TAG, <span class="string">"Report configuration: "</span> + token + <span class="string">" "</span></span><br><span class="line">            + horizontalSizeConfiguration + <span class="string">" "</span> + verticalSizeConfigurations);</span><br><span class="line">    <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">        ActivityRecord record = ActivityRecord.isInStackLocked(token);</span><br><span class="line">        <span class="keyword">if</span> (record == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"reportSizeConfigurations: ActivityRecord not "</span></span><br><span class="line">                    + <span class="string">"found for: "</span> + token);</span><br><span class="line">        &#125;</span><br><span class="line">        record.setSizeConfigurations(horizontalSizeConfiguration,</span><br><span class="line">                verticalSizeConfigurations, smallestSizeConfigurations);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结合crash堆栈：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java.lang.IllegalArgumentException:reportSizeConfigurations: ActivityRecord not found <span class="keyword">for</span>: Token&#123;f7b56df ActivityRecord&#123;a06a17e u0 com.tencent.qqlive/.ona.activity.SplashVideoDetailActivity t-<span class="number">1</span> f&#125;&#125;</span><br></pre></td></tr></table></figure><p>可以看出应该是从通过token从Activity堆栈里面找不到了ActivityRecord，导致抛出了crash，并且看了下只有9.0源码里面有这一段代码，其他版本没有这个代码。</p><p>既然是从堆栈里面找不到ActivityRecord，那说明Activity被finish掉了，导致从栈里面移除掉了？</p><p>由于Activity相关操作都是跨进程的，ActivityManagerService对应的Client为ActivityManager,找到Client端调用reportSizeConfigurations方法的地方，在ActivityThread的reportSizeConfigurations方法里面：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">reportSizeConfigurations</span><span class="params">(ActivityClientRecord r)</span> </span>&#123;</span><br><span class="line">    Configuration[] configurations = r.activity.getResources().getSizeConfigurations();</span><br><span class="line">    <span class="keyword">if</span> (configurations == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    SparseIntArray horizontal = <span class="keyword">new</span> SparseIntArray();</span><br><span class="line">    SparseIntArray vertical = <span class="keyword">new</span> SparseIntArray();</span><br><span class="line">    SparseIntArray smallest = <span class="keyword">new</span> SparseIntArray();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = configurations.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        Configuration config = configurations[i];</span><br><span class="line">        <span class="keyword">if</span> (config.screenHeightDp != Configuration.SCREEN_HEIGHT_DP_UNDEFINED) &#123;</span><br><span class="line">            vertical.put(config.screenHeightDp, <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (config.screenWidthDp != Configuration.SCREEN_WIDTH_DP_UNDEFINED) &#123;</span><br><span class="line">            horizontal.put(config.screenWidthDp, <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (config.smallestScreenWidthDp != Configuration.SMALLEST_SCREEN_WIDTH_DP_UNDEFINED) &#123;</span><br><span class="line">            smallest.put(config.smallestScreenWidthDp, <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        ActivityManager.getService().reportSizeConfigurations(r.token,</span><br><span class="line">                horizontal.copyKeys(), vertical.copyKeys(), smallest.copyKeys());</span><br><span class="line">    &#125; <span class="keyword">catch</span> (RemoteException ex) &#123;</span><br><span class="line">        <span class="keyword">throw</span> ex.rethrowFromSystemServer();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后来看下这个reportSizeConfigurations方法调用的地方:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Activity <span class="title">handleLaunchActivity</span><span class="params">(ActivityClientRecord r,</span></span></span><br><span class="line"><span class="function"><span class="params">           PendingTransactionActions pendingActions, Intent customIntent)</span> </span>&#123;</span><br><span class="line">     <span class="comment">//...........</span></span><br><span class="line">       <span class="keyword">final</span> Activity a = performLaunchActivity(r, customIntent);</span><br><span class="line"></span><br><span class="line">       <span class="keyword">if</span> (a != <span class="keyword">null</span>) &#123;</span><br><span class="line">           r.createdConfig = <span class="keyword">new</span> Configuration(mConfiguration);</span><br><span class="line">           reportSizeConfigurations(r);</span><br></pre></td></tr></table></figure><p>可以发现，在ActivityThread的handleLaunchActivity方法里面会先调用performLaunchActivity方法来启动一个Activity，这里面也是涉及到跨进程操作的。如果performLaunchActivity里面跨进程操作执行比较慢，在这个过程中杀死App，然后结合前面的分析，应该就能复现这个crash？</p><p>为了验证这个猜想，执行复现路径：找到crash列表中的某一个机型，启动App的时候，马上切后台杀死App。果然就复现了这个crash，crash现象是：杀死app之后过一会app又回自动起来白屏，然后就crash了，看堆栈也可以完全对应上!</p><p>那既然是异常case，那怎么规避这个crash问题呢？</p><h2 id="规避方案"><a href="#规避方案" class="headerlink" title="规避方案"></a>规避方案</h2><p>使用Hook方案，针对9.0的机型进行特殊处理：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HookActivityManager</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"HookActivityManager"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">hook</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (Build.VERSION.SDK_INT != Build.VERSION_CODES.P) &#123;</span><br><span class="line">            Log.i(TAG, <span class="string">"hook return, not match version"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Field am = ActivityManager.class.getDeclaredField("IActivityManagerSingleton");</span><br><span class="line">            am.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">            Object iActivityManagerSingleton = am.get(<span class="keyword">null</span>);</span><br><span class="line">            <span class="keyword">if</span> (iActivityManagerSingleton == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            Class&lt;?&gt; singletonCls = iActivityManagerSingleton.getClass().getSuperclass();</span><br><span class="line">            <span class="keyword">if</span> (singletonCls == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            Field instance = singletonCls.getDeclaredField(<span class="string">"mInstance"</span>);</span><br><span class="line">            instance.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">            Object iActivityManager = instance.get(iActivityManagerSingleton);</span><br><span class="line"></span><br><span class="line">            Class&lt;?&gt; iActivityManagerCls = Class.forName(<span class="string">"android.app.IActivityManager"</span>);</span><br><span class="line">            Class&lt;?&gt;[] classes = &#123;iActivityManagerCls&#125;;</span><br><span class="line">            Object iActivityManageProxy = Proxy.newProxyInstance(</span><br><span class="line">                    iActivityManagerCls.getClassLoader(),</span><br><span class="line">                    classes,</span><br><span class="line">                    <span class="keyword">new</span> IActivityManagerProxy(iActivityManager));</span><br><span class="line">            instance.set(iActivityManagerSingleton, iActivityManageProxy);</span><br><span class="line">            Log.i(TAG, <span class="string">"hook success!"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            Log.w(TAG, <span class="string">""</span> + e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">IActivityManagerProxy</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> Object mActivityManager;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">IActivityManagerProxy</span><span class="params">(Object iActivityManager)</span> </span>&#123;</span><br><span class="line">            mActivityManager = iActivityManager;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="string">"reportSizeConfigurations"</span>.equals(method.getName())) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Log.w(TAG, <span class="string">"reportSizeConfigurations invoke execute "</span>);</span><br><span class="line">                    <span class="keyword">return</span> method.invoke(mActivityManager, args);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    Log.w(TAG, <span class="string">"reportSizeConfigurations exception: "</span> + e.getMessage());</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> method.invoke(mActivityManager, args);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过动态代理的方式对这个ActivityManagerService.reportSizeConfigurations方法加上try_catch处理，然后在Application的attachBaseContext方法里面执行hook：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attachBaseContext</span><span class="params">(Context base)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (ApplicationProcessUtils.getInstance().isMainProcess()) &#123;</span><br><span class="line">           HookActivityManager.hook();</span><br><span class="line">       &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>问题得以解决！</p>]]></content>
    
    <summary type="html">
    
      rActivityManagerService.reportSizeConfigurations异常问题规避方案
    
    </summary>
    
      <category term="Android疑难杂症" scheme="http://easyliu.com/categories/Android%E7%96%91%E9%9A%BE%E6%9D%82%E7%97%87/"/>
    
    
      <category term="Android" scheme="http://easyliu.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>ValueAnimator属性动画深入解析</title>
    <link href="http://easyliu.com/2021/03/16/android_source_analysis/ValueAnimator/"/>
    <id>http://easyliu.com/2021/03/16/android_source_analysis/ValueAnimator/</id>
    <published>2021-03-16T01:30:31.000Z</published>
    <updated>2022-02-17T07:18:07.957Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在上一篇博文<a href="https://easyliu-ly.github.io/2021/03/06/android_source_analysis/handler/" target="_blank" rel="noopener">Handler消息机制深入解析</a>当中，在最后面说到：</p><blockquote><p>ViewAnimation底层也是通过调用invalidate来实现的，无限循环动画就会导致无限调用invalidate，就会导致idle得不到执行。<br>属性动画的实现原理不同于View动画。View动画的每一帧都是通过invalidate方法来触发重绘，而属性动画每一帧的绘制都是通过Choreographer的回调实现。因此，本质上来说，属性动画少了一个很重要的步骤，就是post一个同步屏障。在属性动画中，没有同步屏障，那么后续的任务能够继续执行，当队列中没有任务时，自然就会回调IdleHandler了。 </p></blockquote><p>那么事实真的如此的么？今天我们就从源码的角度来对属性动画进行一个深入解析，源码基于API30</p><h2 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h2><p>使用过属性动画的同学应该都清楚，一般情况下我们会和两个类打交道：ValueAnimator以及ObjectAnimator</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ValueAnimator extends Animator implements AnimationHandler.AnimationFrameCallback</span><br><span class="line"></span><br><span class="line">ObjectAnimator extends ValueAnimator</span><br></pre></td></tr></table></figure><p>可以看出ObjectAnimator是继承自ValueAnimator的，对应的常见使用方式如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ValueAnimator使用方式</span></span><br><span class="line">ValueAnimator valueAnimator = ValueAnimator.ofFloat(<span class="number">0.0f</span>, (<span class="keyword">float</span>) (view.getHeight() * <span class="number">3</span>));</span><br><span class="line">valueAnimator.setDuration(<span class="number">500</span>);</span><br><span class="line">valueAnimator.addUpdateListener(<span class="keyword">new</span> ValueAnimator.AnimatorUpdateListener() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAnimationUpdate</span><span class="params">(ValueAnimator valueAnimator)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">float</span> animatedValue = (<span class="keyword">float</span>) valueAnimator.getAnimatedValue();</span><br><span class="line">        view.setTranslationY(animatedValue);</span><br><span class="line">        view.setTranslationX(animatedValue);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">valueAnimator.start();</span><br><span class="line"></span><br><span class="line"><span class="comment">//ObjectAnimator使用方式</span></span><br><span class="line">ObjectAnimator objectAnimator = ObjectAnimator.ofFloat(view, <span class="string">"alpha"</span>, <span class="number">0.0f</span>, <span class="number">1f</span>);</span><br><span class="line">objectAnimator.setDuration(<span class="number">500</span>);</span><br><span class="line">objectAnimator.start();</span><br></pre></td></tr></table></figure><p>可以看出对于ValueAnimator来说，是通过监听onAnimationUpdate回调，在回调里面根据当前的animatedValue来动态改变View的属性来实现动画效果；对于ObjectAnimator来说，通过一系列静态方法比如ofFloat来创建ObjectAnimator的时候，就会传入View对象以及传入一个View的属性，然后调用start方法，属性动画就会通过动画自动改变传入View的属性值。</p><blockquote><p>这里有一个需要注意的点，传入的这个View属性必须要有set方法，比如针对”alpha”属性，就必须要有setAlpha方法，为啥必须要有set方法？稍后会进行讲解</p></blockquote><p>从上面的使用可以看出，要想使用属性动画来实现改变View属性的功能，那么属性动画框架就需要解决2个问题：</p><blockquote><p>1、属性动画每一帧绘制onAnimationUpdate回调实现<br>2、对于ObjectAnimator来说，怎么做到根据传入的View属性来自动改变其对应的值</p></blockquote><p>基于以上问题，我们先从ValueAnimator的start方法做为切入点开始分析</p><h2 id="ValueAnimator-start"><a href="#ValueAnimator-start" class="headerlink" title="ValueAnimator#start"></a>ValueAnimator#start</h2><p>首先来看下start方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    start(<span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">(<span class="keyword">boolean</span> playBackwards)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (Looper.myLooper() == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> AndroidRuntimeException(<span class="string">"Animators may only be run on Looper threads"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    mReversing = playBackwards;</span><br><span class="line">    mSelfPulse = !mSuppressSelfPulseRequested;</span><br><span class="line">    <span class="comment">// Special case: reversing from seek-to-0 should act as if not seeked at all.</span></span><br><span class="line">    <span class="keyword">if</span> (playBackwards &amp;&amp; mSeekFraction != -<span class="number">1</span> &amp;&amp; mSeekFraction != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (mRepeatCount == INFINITE) &#123;</span><br><span class="line">            <span class="comment">// Calculate the fraction of the current iteration.</span></span><br><span class="line">            <span class="keyword">float</span> fraction = (<span class="keyword">float</span>) (mSeekFraction - Math.floor(mSeekFraction));</span><br><span class="line">            mSeekFraction = <span class="number">1</span> - fraction;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            mSeekFraction = <span class="number">1</span> + mRepeatCount - mSeekFraction;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    mStarted = <span class="keyword">true</span>;</span><br><span class="line">    mPaused = <span class="keyword">false</span>;</span><br><span class="line">    mRunning = <span class="keyword">false</span>;</span><br><span class="line">    mAnimationEndRequested = <span class="keyword">false</span>;</span><br><span class="line">    <span class="comment">// Resets mLastFrameTime when start() is called, so that if the animation was running,</span></span><br><span class="line">    <span class="comment">// calling start() would put the animation in the</span></span><br><span class="line">    <span class="comment">// started-but-not-yet-reached-the-first-frame phase.</span></span><br><span class="line">    mLastFrameTime = -<span class="number">1</span>;</span><br><span class="line">    mFirstFrameTime = -<span class="number">1</span>;</span><br><span class="line">    mStartTime = -<span class="number">1</span>;</span><br><span class="line">    addAnimationCallback(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (mStartDelay == <span class="number">0</span> || mSeekFraction &gt;= <span class="number">0</span> || mReversing) &#123;</span><br><span class="line">        <span class="comment">// If there's no start delay, init the animation and notify start listeners right away</span></span><br><span class="line">        <span class="comment">// to be consistent with the previous behavior. Otherwise, postpone this until the first</span></span><br><span class="line">        <span class="comment">// frame after the start delay.</span></span><br><span class="line">        startAnimation();</span><br><span class="line">        <span class="keyword">if</span> (mSeekFraction == -<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="comment">// No seek, start at play time 0. Note that the reason we are not using fraction 0</span></span><br><span class="line">            <span class="comment">// is because for animations with 0 duration, we want to be consistent with pre-N</span></span><br><span class="line">            <span class="comment">// behavior: skip to the final value immediately.</span></span><br><span class="line">            setCurrentPlayTime(<span class="number">0</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            setCurrentFraction(mSeekFraction);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，start方法里面主要做了以下事情：</p><blockquote><p>1、设置一些标记位，比如mStarted、mPaused、mRunning等<br>2、调用addAnimationCallback方法，看这个名字像是添加动画回调，还记得最开始说属性动画每一帧的绘制都是通过Choreographer的回调实现，难道就是这里面的逻辑？<br>3、满足一定条件之后，开始startAnimation启动动画</p></blockquote><p>我们接下来看下addAnimationCallback方法：</p><h2 id="ValueAnimator-addAnimationCallback"><a href="#ValueAnimator-addAnimationCallback" class="headerlink" title="ValueAnimator#addAnimationCallback"></a>ValueAnimator#addAnimationCallback</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">addAnimationCallback</span><span class="params">(<span class="keyword">long</span> delay)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!mSelfPulse) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    getAnimationHandler().addAnimationFrameCallback(<span class="keyword">this</span>, delay);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> AnimationHandler <span class="title">getAnimationHandler</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> mAnimationHandler != <span class="keyword">null</span> ? mAnimationHandler : AnimationHandler.getInstance();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看出addAnimationCallback方法里面调用了AnimationHandler的addAnimationFrameCallback方法，这个AnimationHandler是一个单例，调用addAnimationFrameCallback的时候传入了this，从VauleAnimator的实现来看，是一个AnimationHandler.AnimationFrameCallback接口。</p><p>接下来进一步看下AnimationHandler.addAnimationFrameCallback方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Choreographer.FrameCallback mFrameCallback = <span class="keyword">new</span> Choreographer.FrameCallback() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFrame</span><span class="params">(<span class="keyword">long</span> frameTimeNanos)</span> </span>&#123;</span><br><span class="line">        doAnimationFrame(getProvider().getFrameTime());</span><br><span class="line">        <span class="keyword">if</span> (mAnimationCallbacks.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            getProvider().postFrameCallback(<span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Register to get a callback on the next frame after the delay.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addAnimationFrameCallback</span><span class="params">(<span class="keyword">final</span> AnimationFrameCallback callback, <span class="keyword">long</span> delay)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (mAnimationCallbacks.size() == <span class="number">0</span>) &#123;</span><br><span class="line">        getProvider().postFrameCallback(mFrameCallback);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!mAnimationCallbacks.contains(callback)) &#123;</span><br><span class="line">        mAnimationCallbacks.add(callback);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (delay &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        mDelayedCallbackStartTime.put(callback, (SystemClock.uptimeMillis() + delay));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> AnimationFrameCallbackProvider <span class="title">getProvider</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (mProvider == <span class="keyword">null</span>) &#123;</span><br><span class="line">        mProvider = <span class="keyword">new</span> MyFrameCallbackProvider();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> mProvider;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从这个方法的注释可以看出，就是注册一个下一帧的回调，在这个方法里面，调用了getProvider().postFrameCallback方法，传入了一个Choreographer.FrameCallback回调，getProvider返回的是一个MyFrameCallbackProvider对象，然后会把传入的AnimationFrameCallback保存在一个mAnimationCallbacks列表里面</p><p>来看下MyFrameCallbackProvider.postFrameCallback方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Default provider of timing pulse that uses Choreographer for frame callbacks.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">MyFrameCallbackProvider</span> <span class="keyword">implements</span> <span class="title">AnimationFrameCallbackProvider</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> Choreographer mChoreographer = Choreographer.getInstance();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postFrameCallback</span><span class="params">(Choreographer.FrameCallback callback)</span> </span>&#123;</span><br><span class="line">        mChoreographer.postFrameCallback(callback);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postCommitCallback</span><span class="params">(Runnable runnable)</span> </span>&#123;</span><br><span class="line">        mChoreographer.postCallback(Choreographer.CALLBACK_COMMIT, runnable, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getFrameTime</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mChoreographer.getFrameTime();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getFrameDelay</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Choreographer.getFrameDelay();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFrameDelay</span><span class="params">(<span class="keyword">long</span> delay)</span> </span>&#123;</span><br><span class="line">        Choreographer.setFrameDelay(delay);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看出，postFrameCallback方法里面调用了Choreographer的postFrameCallback方法，如果看过我上一篇博文：<a href="https://easyliu-ly.github.io/2021/03/06/android_source_analysis/handler/" target="_blank" rel="noopener">Handler消息机制深入解析</a>同学看到这里应该就明白了，这个postFrameCallback里面就会去向底层注册一个Vsync信号，在收到Vsync信号之后就会执行传入的Choreographer.FrameCallback回调，感兴趣的同学可以继续深入看下，这里就不展开讲了。</p><p>当收到收到Choreographer.FrameCallback回调之后，回到AnimationHandler里面的mFrameCallback：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Choreographer.FrameCallback mFrameCallback = <span class="keyword">new</span> Choreographer.FrameCallback() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFrame</span><span class="params">(<span class="keyword">long</span> frameTimeNanos)</span> </span>&#123;</span><br><span class="line">        doAnimationFrame(getProvider().getFrameTime());</span><br><span class="line">        <span class="keyword">if</span> (mAnimationCallbacks.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            getProvider().postFrameCallback(<span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>可以看到，收到Choreographer.FrameCallback回调之后，会先调用doAnimationFrame方法，然后接着又会调用getProvider().postFrameCallback(this)方法开启新一轮的注册Vsync信号流程，这样就形成了一个循环，除非mAnimationCallbacks为空。当动画结束的时候就会移除mAnimationCallbacks里面对应的callback，这样就不再继续监听Choreographer的FrameCallback回调了</p><blockquote><p>其实到这里我们就可以回答最开始提出的问题了：属性动画是通过监听Choreographer.FrameCallback来实现的，与View动画原理是不一样的</p></blockquote><p>收到Choreographer.FrameCallback回调之后，我们进一步来看下是怎么作用到ValueAnimator上面去的，来看下doAnimationFrame方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">doAnimationFrame</span><span class="params">(<span class="keyword">long</span> frameTime)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">long</span> currentTime = SystemClock.uptimeMillis();</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> size = mAnimationCallbacks.size();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">        <span class="keyword">final</span> AnimationFrameCallback callback = mAnimationCallbacks.get(i);</span><br><span class="line">        <span class="keyword">if</span> (callback == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (isCallbackDue(callback, currentTime)) &#123;</span><br><span class="line">            callback.doAnimationFrame(frameTime);</span><br><span class="line">            <span class="comment">//........</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cleanUpList();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在doAnimationFrame方法里面会遍历之前保存的AnimationFrameCallback列表，调用其doAnimationFrame方法，前面我们说了ValueAnimator实现了AnimationFrameCallback接口，那么来看下ValueAnimator里面的doAnimationFrame方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">doAnimationFrame</span><span class="params">(<span class="keyword">long</span> frameTime)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mStartTime &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// First frame. If there is start delay, start delay count down will happen *after* this</span></span><br><span class="line">            <span class="comment">// frame.</span></span><br><span class="line">            mStartTime = mReversing</span><br><span class="line">                    ? frameTime</span><br><span class="line">                    : frameTime + (<span class="keyword">long</span>) (mStartDelay * resolveDurationScale());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Handle pause/resume</span></span><br><span class="line">        <span class="keyword">if</span> (mPaused) &#123;</span><br><span class="line">            mPauseTime = frameTime;</span><br><span class="line">            removeAnimationCallback();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (mResumed) &#123;</span><br><span class="line">            mResumed = <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">if</span> (mPauseTime &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">// Offset by the duration that the animation was paused</span></span><br><span class="line">                mStartTime += (frameTime - mPauseTime);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!mRunning) &#123;</span><br><span class="line">            <span class="comment">// If not running, that means the animation is in the start delay phase of a forward</span></span><br><span class="line">            <span class="comment">// running animation. In the case of reversing, we want to run start delay in the end.</span></span><br><span class="line">            <span class="keyword">if</span> (mStartTime &gt; frameTime &amp;&amp; mSeekFraction == -<span class="number">1</span>) &#123;</span><br><span class="line">                <span class="comment">// This is when no seek fraction is set during start delay. If developers change the</span></span><br><span class="line">                <span class="comment">// seek fraction during the delay, animation will start from the seeked position</span></span><br><span class="line">                <span class="comment">// right away.</span></span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// If mRunning is not set by now, that means non-zero start delay,</span></span><br><span class="line">                <span class="comment">// no seeking, not reversing. At this point, start delay has passed.</span></span><br><span class="line">                mRunning = <span class="keyword">true</span>;</span><br><span class="line">                startAnimation();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (mLastFrameTime &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (mSeekFraction &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">long</span> seekTime = (<span class="keyword">long</span>) (getScaledDuration() * mSeekFraction);</span><br><span class="line">                mStartTime = frameTime - seekTime;</span><br><span class="line">                mSeekFraction = -<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            mStartTimeCommitted = <span class="keyword">false</span>; <span class="comment">// allow start time to be compensated for jank</span></span><br><span class="line">        &#125;</span><br><span class="line">        mLastFrameTime = frameTime;</span><br><span class="line">        <span class="comment">// The frame time might be before the start time during the first frame of</span></span><br><span class="line">        <span class="comment">// an animation.  The "current time" must always be on or after the start</span></span><br><span class="line">        <span class="comment">// time to avoid animating frames at negative time intervals.  In practice, this</span></span><br><span class="line">        <span class="comment">// is very rare and only happens when seeking backwards.</span></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">long</span> currentTime = Math.max(frameTime, mStartTime);</span><br><span class="line">        <span class="keyword">boolean</span> finished = animateBasedOnTime(currentTime);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (finished) &#123;</span><br><span class="line">            endAnimation();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> finished;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>在这个方法里面最后会调用animateBasedOnTime方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">animateBasedOnTime</span><span class="params">(<span class="keyword">long</span> currentTime)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">boolean</span> done = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (mRunning) &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">long</span> scaledDuration = getScaledDuration();</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">float</span> fraction = scaledDuration &gt; <span class="number">0</span> ?</span><br><span class="line">                (<span class="keyword">float</span>)(currentTime - mStartTime) / scaledDuration : <span class="number">1f</span>;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">float</span> lastFraction = mOverallFraction;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">boolean</span> newIteration = (<span class="keyword">int</span>) fraction &gt; (<span class="keyword">int</span>) lastFraction;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">boolean</span> lastIterationFinished = (fraction &gt;= mRepeatCount + <span class="number">1</span>) &amp;&amp;</span><br><span class="line">                (mRepeatCount != INFINITE);</span><br><span class="line">        <span class="keyword">if</span> (scaledDuration == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 0 duration animator, ignore the repeat count and skip to the end</span></span><br><span class="line">            done = <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (newIteration &amp;&amp; !lastIterationFinished) &#123;</span><br><span class="line">            <span class="comment">// Time to repeat</span></span><br><span class="line">            <span class="keyword">if</span> (mListeners != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">int</span> numListeners = mListeners.size();</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numListeners; ++i) &#123;</span><br><span class="line">                    mListeners.get(i).onAnimationRepeat(<span class="keyword">this</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (lastIterationFinished) &#123;</span><br><span class="line">            done = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        mOverallFraction = clampFraction(fraction);</span><br><span class="line">        <span class="keyword">float</span> currentIterationFraction = getCurrentIterationFraction(</span><br><span class="line">                mOverallFraction, mReversing);</span><br><span class="line">        animateValue(currentIterationFraction);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> done;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看出这个方法最后会调用animateValue方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@CallSuper</span></span><br><span class="line"><span class="meta">@UnsupportedAppUsage</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">animateValue</span><span class="params">(<span class="keyword">float</span> fraction)</span> </span>&#123;</span><br><span class="line">    fraction = mInterpolator.getInterpolation(fraction);</span><br><span class="line">    mCurrentFraction = fraction;</span><br><span class="line">    <span class="keyword">int</span> numValues = mValues.length;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numValues; ++i) &#123;</span><br><span class="line">        mValues[i].calculateValue(fraction);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (mUpdateListeners != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span> numListeners = mUpdateListeners.size();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numListeners; ++i) &#123;</span><br><span class="line">            mUpdateListeners.get(i).onAnimationUpdate(<span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个方法里面会做两件事情：</p><p>1、mValues数组是一个PropertyValuesHolder[]，代表属性数组，调用PropertyValuesHolder的calculateValue方法之后，里面会更新PropertyValuesHolder里面属性对应的mAnimatedValue。那这个PropertyValuesHolder数组是什么时候生成的呢？来看ValueAnimator里面相应的代码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ValueAnimator <span class="title">ofInt</span><span class="params">(<span class="keyword">int</span>... values)</span> </span>&#123;</span><br><span class="line">    ValueAnimator anim = <span class="keyword">new</span> ValueAnimator();</span><br><span class="line">    anim.setIntValues(values);</span><br><span class="line">    <span class="keyword">return</span> anim;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setIntValues</span><span class="params">(<span class="keyword">int</span>... values)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (values == <span class="keyword">null</span> || values.length == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (mValues == <span class="keyword">null</span> || mValues.length == <span class="number">0</span>) &#123;</span><br><span class="line">        setValues(PropertyValuesHolder.ofInt(<span class="string">""</span>, values));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        PropertyValuesHolder valuesHolder = mValues[<span class="number">0</span>];</span><br><span class="line">        valuesHolder.setIntValues(values);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// New property/values/target should cause re-initialization prior to starting</span></span><br><span class="line">    mInitialized = <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setValues</span><span class="params">(PropertyValuesHolder... values)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> numValues = values.length;</span><br><span class="line">    mValues = values;</span><br><span class="line">    mValuesMap = <span class="keyword">new</span> HashMap&lt;String, PropertyValuesHolder&gt;(numValues);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numValues; ++i) &#123;</span><br><span class="line">        PropertyValuesHolder valuesHolder = values[i];</span><br><span class="line">        mValuesMap.put(valuesHolder.getPropertyName(), valuesHolder);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// New property/values/target should cause re-initialization prior to starting</span></span><br><span class="line">    mInitialized = <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看出在ValueAnimator的一系列of方法里面，就会去初始化这个PropertyValuesHolder数组</p><p>2、通过AnimatorUpdateListener通知给外部调用方</p><p>至此，我们已经分析出了属性动画每一帧绘制onAnimationUpdate回调实现方案：通过在start方法里面监听Choreographer的frameCallback来实现的</p><p>接下来看下第2个问题：</p><blockquote><p>对于ObjectAnimator来说，怎么做到根据传入的View属性来自动改变其对应的值</p></blockquote><p>对于这个问题，我们从ObjectAnimator.ofFloat做为切入点来分析：</p><h2 id="ObjectAnimator-ofFloat"><a href="#ObjectAnimator-ofFloat" class="headerlink" title="ObjectAnimator#ofFloat"></a>ObjectAnimator#ofFloat</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ObjectAnimator <span class="title">ofFloat</span><span class="params">(Object target, String propertyName, <span class="keyword">float</span>... values)</span> </span>&#123;</span><br><span class="line">    ObjectAnimator anim = <span class="keyword">new</span> ObjectAnimator(target, propertyName);</span><br><span class="line">    anim.setFloatValues(values);</span><br><span class="line">    <span class="keyword">return</span> anim;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">ObjectAnimator</span><span class="params">(Object target, String propertyName)</span> </span>&#123;</span><br><span class="line">    setTarget(target);</span><br><span class="line">    setPropertyName(propertyName);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTarget</span><span class="params">(@Nullable Object target)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Object oldTarget = getTarget();</span><br><span class="line">    <span class="keyword">if</span> (oldTarget != target) &#123;</span><br><span class="line">        <span class="keyword">if</span> (isStarted()) &#123;</span><br><span class="line">            cancel();</span><br><span class="line">        &#125;</span><br><span class="line">        mTarget = target == <span class="keyword">null</span> ? <span class="keyword">null</span> : <span class="keyword">new</span> WeakReference&lt;Object&gt;(target);</span><br><span class="line">        <span class="comment">// New target should cause re-initialization prior to starting</span></span><br><span class="line">        mInitialized = <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPropertyName</span><span class="params">(@NonNull String propertyName)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// mValues could be null if this is being constructed piecemeal. Just record the</span></span><br><span class="line">    <span class="comment">// propertyName to be used later when setValues() is called if so.</span></span><br><span class="line">    <span class="keyword">if</span> (mValues != <span class="keyword">null</span>) &#123;</span><br><span class="line">        PropertyValuesHolder valuesHolder = mValues[<span class="number">0</span>];</span><br><span class="line">        String oldName = valuesHolder.getPropertyName();</span><br><span class="line">        valuesHolder.setPropertyName(propertyName);</span><br><span class="line">        mValuesMap.remove(oldName);</span><br><span class="line">        mValuesMap.put(propertyName, valuesHolder);</span><br><span class="line">    &#125;</span><br><span class="line">    mPropertyName = propertyName;</span><br><span class="line">    <span class="comment">// New property/values/target should cause re-initialization prior to starting</span></span><br><span class="line">    mInitialized = <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从以上代码可以看出，ofFloat方法里面首先会根据传入的target以及propertyName构造一个ObjectAnimator对象，在构造方法里面会调用setTarget保存传入的View对象，调用setPropertyName方法会把propertyName保存起来，然后调用ObjectAnimator的setFloatValues方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFloatValues</span><span class="params">(<span class="keyword">float</span>... values)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (mValues == <span class="keyword">null</span> || mValues.length == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// No values yet - this animator is being constructed piecemeal. Init the values with</span></span><br><span class="line">        <span class="comment">// whatever the current propertyName is</span></span><br><span class="line">        <span class="keyword">if</span> (mProperty != <span class="keyword">null</span>) &#123;</span><br><span class="line">            setValues(PropertyValuesHolder.ofFloat(mProperty, values));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            setValues(PropertyValuesHolder.ofFloat(mPropertyName, values));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.setFloatValues(values);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为这个时候mValues还没有赋值，并且也没有对mProperty字段进行赋值，那么就走到了<br>setValues(PropertyValuesHolder.ofFloat(mPropertyName, values))这一行，这里通过调用<br>PropertyValuesHolder.ofFloat(mPropertyName, values)生成一个PropertyValuesHolder对象，然后调用setValues方法给前面提到的ValueAnimator里面的mValues属性数组进行赋值。</p><p>前面说到了ValueAnimator最终会调用到animateValue方法，在这个方法里面会先计算当前的属性值，然后通过AnimatorUpdateListener接口通知给外部：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@CallSuper</span></span><br><span class="line"><span class="meta">@UnsupportedAppUsage</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">animateValue</span><span class="params">(<span class="keyword">float</span> fraction)</span> </span>&#123;</span><br><span class="line">    fraction = mInterpolator.getInterpolation(fraction);</span><br><span class="line">    mCurrentFraction = fraction;</span><br><span class="line">    <span class="keyword">int</span> numValues = mValues.length;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numValues; ++i) &#123;</span><br><span class="line">        mValues[i].calculateValue(fraction);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (mUpdateListeners != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span> numListeners = mUpdateListeners.size();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numListeners; ++i) &#123;</span><br><span class="line">            mUpdateListeners.get(i).onAnimationUpdate(<span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> ObjectAnimator覆写了这个方法：<br> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">void</span> <span class="title">animateValue</span><span class="params">(<span class="keyword">float</span> fraction)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Object target = getTarget();</span><br><span class="line">    <span class="keyword">if</span> (mTarget != <span class="keyword">null</span> &amp;&amp; target == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// We lost the target reference, cancel and clean up. Note: we allow null target if the</span></span><br><span class="line">        <span class="comment">/// target has never been set.</span></span><br><span class="line">        cancel();</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">super</span>.animateValue(fraction);</span><br><span class="line">    <span class="keyword">int</span> numValues = mValues.length;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numValues; ++i) &#123;</span><br><span class="line">        mValues[i].setAnimatedValue(target);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p> 在ObjectAnimator的animateValue方法里面会先调用ValueAnimator的animateValue方法计算好当前的属性值，然后会调用mValues数组里面每个PropertyValuesHolder的setAnimatedValue方法，传入target。到这里大家应该大概就可以猜到这个PropertyValuesHolder的setAnimatedValue方法里面肯定就是修改属性的地方了：<br> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"> Method mSetter = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Internal function to set the value on the target object, using the setter set up</span></span><br><span class="line"><span class="comment"> * earlier on this PropertyValuesHolder object. This function is called by ObjectAnimator</span></span><br><span class="line"><span class="comment"> * to handle turning the value calculated by ValueAnimator into a value set on the object</span></span><br><span class="line"><span class="comment"> * according to the name of the property.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> target The target object on which the value is set</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setAnimatedValue</span><span class="params">(Object target)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (mProperty != <span class="keyword">null</span>) &#123;</span><br><span class="line">        mProperty.set(target, getAnimatedValue());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (mSetter != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            mTmpValueArray[<span class="number">0</span>] = getAnimatedValue();</span><br><span class="line">            mSetter.invoke(target, mTmpValueArray);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</span><br><span class="line">            Log.e(<span class="string">"PropertyValuesHolder"</span>, e.toString());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">            Log.e(<span class="string">"PropertyValuesHolder"</span>, e.toString());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>从这个方法可以看出，mSetter是一个Method对象，然后会通过invoke反射调用这个方法来修改属性的值。到这里，大家应该就比较明白了，ObjectAnimator里面最终是通过反射调用的方式来修改对应属性的值的。还记着在最开始说了传入的属性必须要有set方法么？说明属性只有具有set方法才能生成这个Method对象，那么这个Method是啥时候生成的呢？</p><h2 id="ObjectAnimator-Method"><a href="#ObjectAnimator-Method" class="headerlink" title="ObjectAnimator#Method"></a>ObjectAnimator#Method</h2><p>通过追踪代码，最终发现在ObjectAnimation的initAnimation里面有如下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@CallSuper</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initAnimation</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!mInitialized) &#123;</span><br><span class="line">        <span class="comment">// mValueType may change due to setter/getter setup; do this before calling super.init(),</span></span><br><span class="line">        <span class="comment">// which uses mValueType to set up the default type evaluator.</span></span><br><span class="line">        <span class="keyword">final</span> Object target = getTarget();</span><br><span class="line">        <span class="keyword">if</span> (target != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> numValues = mValues.length;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numValues; ++i) &#123;</span><br><span class="line">                mValues[i].setupSetterAndGetter(target);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">super</span>.initAnimation();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个initAnimation是在ValueAnimator的startAnimation方法里面调用的，在这个initAnimation方法里面会调用PropertyValuesHolder的setupSetterAndGetter方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setupSetterAndGetter</span><span class="params">(Object target)</span> </span>&#123;</span><br><span class="line">         <span class="comment">//...............</span></span><br><span class="line">        <span class="comment">// We can't just say 'else' here because the catch statement sets mProperty to null.</span></span><br><span class="line">        <span class="keyword">if</span> (mProperty == <span class="keyword">null</span>) &#123;</span><br><span class="line">            Class targetClass = target.getClass();</span><br><span class="line">            <span class="keyword">if</span> (mSetter == <span class="keyword">null</span>) &#123;</span><br><span class="line">                setupSetter(targetClass);</span><br><span class="line">            &#125;</span><br><span class="line">            List&lt;Keyframe&gt; keyframes = mKeyframes.getKeyframes();</span><br><span class="line">            <span class="keyword">int</span> keyframeCount = keyframes == <span class="keyword">null</span> ? <span class="number">0</span> : keyframes.size();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; keyframeCount; i++) &#123;</span><br><span class="line">                Keyframe kf = keyframes.get(i);</span><br><span class="line">                <span class="keyword">if</span> (!kf.hasValue() || kf.valueWasSetOnStart()) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (mGetter == <span class="keyword">null</span>) &#123;</span><br><span class="line">                        setupGetter(targetClass);</span><br><span class="line">                        <span class="keyword">if</span> (mGetter == <span class="keyword">null</span>) &#123;</span><br><span class="line">                            <span class="comment">// Already logged the error - just return to avoid NPE</span></span><br><span class="line">                            <span class="keyword">return</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Object value = convertBack(mGetter.invoke(target));</span><br><span class="line">                        kf.setValue(value);</span><br><span class="line">                        kf.setValueWasSetOnStart(<span class="keyword">true</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</span><br><span class="line">                        Log.e(<span class="string">"PropertyValuesHolder"</span>, e.toString());</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">                        Log.e(<span class="string">"PropertyValuesHolder"</span>, e.toString());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>在上面代码当中会调用一个setupSetter方法，传入target的Class类型：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setupSetter</span><span class="params">(Class targetClass)</span> </span>&#123;</span><br><span class="line">    Class&lt;?&gt; propertyType = mConverter == <span class="keyword">null</span> ? mValueType : mConverter.getTargetType();</span><br><span class="line">    mSetter = setupSetterOrGetter(targetClass, sSetterPropertyMap, <span class="string">"set"</span>, propertyType);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> Method <span class="title">setupSetterOrGetter</span><span class="params">(Class targetClass,</span></span></span><br><span class="line"><span class="function"><span class="params">        HashMap&lt;Class, HashMap&lt;String, Method&gt;&gt; propertyMapMap,</span></span></span><br><span class="line"><span class="function"><span class="params">        String prefix, Class valueType)</span> </span>&#123;</span><br><span class="line">    Method setterOrGetter = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">synchronized</span>(propertyMapMap) &#123;</span><br><span class="line">        <span class="comment">// Have to lock property map prior to reading it, to guard against</span></span><br><span class="line">        <span class="comment">// another thread putting something in there after we've checked it</span></span><br><span class="line">        <span class="comment">// but before we've added an entry to it</span></span><br><span class="line">        HashMap&lt;String, Method&gt; propertyMap = propertyMapMap.get(targetClass);</span><br><span class="line">        <span class="keyword">boolean</span> wasInMap = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (propertyMap != <span class="keyword">null</span>) &#123;</span><br><span class="line">            wasInMap = propertyMap.containsKey(mPropertyName);</span><br><span class="line">            <span class="keyword">if</span> (wasInMap) &#123;</span><br><span class="line">                setterOrGetter = propertyMap.get(mPropertyName);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!wasInMap) &#123;</span><br><span class="line">            setterOrGetter = getPropertyFunction(targetClass, prefix, valueType);</span><br><span class="line">            <span class="keyword">if</span> (propertyMap == <span class="keyword">null</span>) &#123;</span><br><span class="line">                propertyMap = <span class="keyword">new</span> HashMap&lt;String, Method&gt;();</span><br><span class="line">                propertyMapMap.put(targetClass, propertyMap);</span><br><span class="line">            &#125;</span><br><span class="line">            propertyMap.put(mPropertyName, setterOrGetter);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> setterOrGetter;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看出在setupSetter方法当中会调用setupSetterOrGetter方法，并且会传入一个前缀：”set”。在这个setupSetterOrGetter其实就是把：target、propertyName以及setterMethod三者映射起来，其中setterMethod是通过getPropertyFunction方法生成的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Method <span class="title">getPropertyFunction</span><span class="params">(Class targetClass, String prefix, Class valueType)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// <span class="doctag">TODO:</span> faster implementation...</span></span><br><span class="line">        Method returnVal = <span class="keyword">null</span>;</span><br><span class="line">        String methodName = getMethodName(prefix, mPropertyName);</span><br><span class="line">        Class args[] = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (valueType == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                returnVal = targetClass.getMethod(methodName, args);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (NoSuchMethodException e) &#123;</span><br><span class="line">                <span class="comment">// Swallow the error, log it later</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="comment">//.................</span></span><br><span class="line">        <span class="keyword">return</span> returnVal;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> String <span class="title">getMethodName</span><span class="params">(String prefix, String propertyName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (propertyName == <span class="keyword">null</span> || propertyName.length() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// shouldn't get here</span></span><br><span class="line">            <span class="keyword">return</span> prefix;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">char</span> firstLetter = Character.toUpperCase(propertyName.charAt(<span class="number">0</span>));</span><br><span class="line">        String theRest = propertyName.substring(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> prefix + firstLetter + theRest;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>可以看出这个getMethodName的作用就是通过前缀和属性名字生成对应的方法。举个例子：</p><blockquote><p>比如传入getMethodName(“set”,”alpha”)，那么就会返回字符串:”setAlpha”，然后再通过<br>targetClass.getMethod(methodName, args)就可以得到具体的Method对象了，这个Method对象就会作用于前面说的PropertyValuesHolder的setAnimatedValue方法，用于改变target对应的属性值！</p></blockquote><p>因此，这里就解释了为什么传给ObjectAnimator的属性一定要有对应的set方法了。</p><p>那么问题来了，如果传入的target的属性没有set方法，能不能使用属性动画呢？比如我们想通过动画来修改一个View宽度，那根据属性动画的原理的话，View就必须得有一个”setWidth”方法，但是实际上View并没有这个”setWidth”方法，那么还有没有其他办法呢？</p><p>答案是肯定的，因为这个set方法对应Method是通过反射自动生成的，因此，我们可以通过写一个Wrapper类，在这个Wrapper类里面定义一些set和get方法，然后这些set和get方法里面会去修改真正target的一些属性，然后做属性动画的时候传入这个Wrapper类即可，如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ViewWrapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> View mTarget;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ViewWrapper</span><span class="params">(View target)</span> </span>&#123;</span><br><span class="line">        mTarget = target;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getWidth</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mTarget.getLayoutParams().width;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setWidth</span><span class="params">(<span class="keyword">int</span> width)</span> </span>&#123;</span><br><span class="line">        android.view.ViewGroup.LayoutParams layoutParams = mTarget.getLayoutParams();</span><br><span class="line">        <span class="keyword">if</span> (layoutParams != <span class="keyword">null</span>) &#123;</span><br><span class="line">            layoutParams.width = width;</span><br><span class="line">            mTarget.requestLayout();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getHeight</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mTarget.getLayoutParams().height;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHeight</span><span class="params">(<span class="keyword">int</span> height)</span> </span>&#123;</span><br><span class="line">        android.view.ViewGroup.LayoutParams layoutParams = mTarget.getLayoutParams();</span><br><span class="line">        <span class="keyword">if</span> (layoutParams != <span class="keyword">null</span> &amp;&amp; layoutParams.height != height) &#123;</span><br><span class="line">            layoutParams.height = height;</span><br><span class="line">            mTarget.requestLayout();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">zoomInAnimator = ObjectAnimatorUtils.ofInt(viewWrapper, <span class="string">"height"</span>, originalHeight, TITLE_BAR_HEIGHT);</span><br></pre></td></tr></table></figure><p>通过这种方式，我们就可以通过动画来修改View的宽度和高度了，这样子是不是对属性动画的理解又深入了一层～～</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>至此，属性动画源码分析就结束了，希望通过这篇文章能够让读者对属性动画能有一个更加深刻的认识～～</p>]]></content>
    
    <summary type="html">
    
      ValueAnimator属性动画深入解析
    
    </summary>
    
      <category term="Android源码解析" scheme="http://easyliu.com/categories/Android%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
    
    
      <category term="Android" scheme="http://easyliu.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Handler消息机制深入解析</title>
    <link href="http://easyliu.com/2021/03/06/android_source_analysis/handler/"/>
    <id>http://easyliu.com/2021/03/06/android_source_analysis/handler/</id>
    <published>2021-03-06T15:32:32.000Z</published>
    <updated>2022-02-17T07:17:42.486Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>大家在日常开发中肯定用过Handler，常用的API主要有:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">post(<span class="meta">@NonNull</span> Runnable r) </span><br><span class="line">postDelayed(<span class="meta">@NonNull</span> Runnable r, <span class="keyword">long</span> delayMillis)</span><br><span class="line">postAtFrontOfQueue(<span class="meta">@NonNull</span> Runnable r) </span><br><span class="line">..........</span><br></pre></td></tr></table></figure><p>在主线程中可以通过这些API可以进行延时操作，在子线程中可以通过这些API可以进行线程切换，把消息发送到Handler对应的线程当中去执行</p><p>关于Handler底层实现原理的话，可能大家都能脱口而出，说出以下内容：</p><blockquote><p>1、每个Handler里面关联一个Looper,每个Looper里面又关联一个MessageQueue<br>2、当调用Handler的一些API比如post，就会往Looper.MessageQueue里面放入一个Message<br>3、Looper.loop()是一个死循环，循环的从MessageQueue里面取出Message执行<br>4、Looper里面通过ThreadLocal来保证每个Thread里面都有一个Looper副本<br>5、当MessageQueue空闲的时候，就会执行IdleHandler</p></blockquote><p>当你回答出以上问题的时候，可能面试官并不满足此，其接着会问如下问题：</p><blockquote><p>1、主线程的Looper.loop()方法是啥时候执行的？<br>2、Looper、MessageQueue以及Message三者交互的底层实现原理<br>3、Looper死循环为什么不会导致应用卡死？<br>4、ANR产生的原因<br>5、同步屏障SyncBarrier<br>6、onDraw里面调用invalidate为啥会导致IdleHandler得不到执行？<br>7、ViewAnimation循环执行为啥会导致IdleHandler得不到执行,而使用属性动画就没有这个问题？</p></blockquote><p>针对以上问题，我们通过源码的方式来一一进行解答，源码基于API30版本</p><h2 id="主线程的Looper-loop-方法是啥时候执行的？"><a href="#主线程的Looper-loop-方法是啥时候执行的？" class="headerlink" title="主线程的Looper.loop()方法是啥时候执行的？"></a>主线程的Looper.loop()方法是啥时候执行的？</h2><p>我们都知道，每一个应用都存在于自己的虚拟机中，那么每一个应用都有自己的一个main函数，这个main函数就是ActivityThread.java的main()函数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ...........</span><br><span class="line"></span><br><span class="line">        Looper.prepareMainLooper();</span><br><span class="line"></span><br><span class="line">        ...........</span><br><span class="line">        ActivityThread thread = <span class="keyword">new</span> ActivityThread();</span><br><span class="line">        thread.attach(<span class="keyword">false</span>, startSeq);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (sMainThreadHandler == <span class="keyword">null</span>) &#123;</span><br><span class="line">            sMainThreadHandler = thread.getHandler();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">false</span>) &#123;</span><br><span class="line">            Looper.myLooper().setMessageLogging(<span class="keyword">new</span></span><br><span class="line">                    LogPrinter(Log.DEBUG, <span class="string">"ActivityThread"</span>));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// End of event ActivityThreadMain.</span></span><br><span class="line">        Trace.traceEnd(Trace.TRACE_TAG_ACTIVITY_MANAGER);</span><br><span class="line">        Looper.loop();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Main thread loop unexpectedly exited"</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>可以看出在main函数里面会通过Looper.prepareMainLooper()创建主线程的Looper，然后开始通过Looper.loop方法开启主线程的Looper循环。开启循环之后，主线程所有的代码都是运行在这个Looper里面的。</p><p>接下来进一步剖析整个Handler消息机制底层具体的一个执行过程</p><h2 id="Looper、MessageQueue以及Message三者交互的底层实现原理"><a href="#Looper、MessageQueue以及Message三者交互的底层实现原理" class="headerlink" title="Looper、MessageQueue以及Message三者交互的底层实现原理"></a>Looper、MessageQueue以及Message三者交互的底层实现原理</h2><p>我们以Handler.post方法为入口进行讲解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">post</span><span class="params">(@NonNull Runnable r)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">return</span>  sendMessageDelayed(getPostMessage(r), <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">sendMessageDelayed</span><span class="params">(@NonNull Message msg, <span class="keyword">long</span> delayMillis)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (delayMillis &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        delayMillis = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sendMessageAtTime(msg, SystemClock.uptimeMillis() + delayMillis);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">sendMessageAtTime</span><span class="params">(@NonNull Message msg, <span class="keyword">long</span> uptimeMillis)</span> </span>&#123;</span><br><span class="line">    MessageQueue queue = mQueue;</span><br><span class="line">    <span class="keyword">if</span> (queue == <span class="keyword">null</span>) &#123;</span><br><span class="line">        RuntimeException e = <span class="keyword">new</span> RuntimeException(</span><br><span class="line">                <span class="keyword">this</span> + <span class="string">" sendMessageAtTime() called with no mQueue"</span>);</span><br><span class="line">        Log.w(<span class="string">"Looper"</span>, e.getMessage(), e);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> enqueueMessage(queue, msg, uptimeMillis);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">enqueueMessage</span><span class="params">(@NonNull MessageQueue queue, @NonNull Message msg,</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">long</span> uptimeMillis)</span> </span>&#123;</span><br><span class="line">    msg.target = <span class="keyword">this</span>;</span><br><span class="line">    msg.workSourceUid = ThreadLocalWorkSource.getUid();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (mAsynchronous) &#123;</span><br><span class="line">        msg.setAsynchronous(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> queue.enqueueMessage(msg, uptimeMillis);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看出post方法最终会走到MessageQueue.enqueueMessage(msg, uptimeMillis)方法，深入看一下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">enqueueMessage</span><span class="params">(Message msg, <span class="keyword">long</span> when)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (msg.target == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Message must have a target."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (msg.isInUse()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(msg + <span class="string">" This message is already in use."</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (mQuitting) &#123;</span><br><span class="line">            IllegalStateException e = <span class="keyword">new</span> IllegalStateException(</span><br><span class="line">                    msg.target + <span class="string">" sending message to a Handler on a dead thread"</span>);</span><br><span class="line">            Log.w(TAG, e.getMessage(), e);</span><br><span class="line">            msg.recycle();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        msg.markInUse();</span><br><span class="line">        msg.when = when;</span><br><span class="line">        Message p = mMessages;</span><br><span class="line">        <span class="keyword">boolean</span> needWake;</span><br><span class="line">        <span class="keyword">if</span> (p == <span class="keyword">null</span> || when == <span class="number">0</span> || when &lt; p.when) &#123;</span><br><span class="line">            <span class="comment">// New head, wake up the event queue if blocked.</span></span><br><span class="line">            msg.next = p;</span><br><span class="line">            mMessages = msg;</span><br><span class="line">            needWake = mBlocked;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// Inserted within the middle of the queue.  Usually we don't have to wake</span></span><br><span class="line">            <span class="comment">// up the event queue unless there is a barrier at the head of the queue</span></span><br><span class="line">            <span class="comment">// and the message is the earliest asynchronous message in the queue.</span></span><br><span class="line">            needWake = mBlocked &amp;&amp; p.target == <span class="keyword">null</span> &amp;&amp; msg.isAsynchronous();</span><br><span class="line">            Message prev;</span><br><span class="line">            <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">                prev = p;</span><br><span class="line">                p = p.next;</span><br><span class="line">                <span class="keyword">if</span> (p == <span class="keyword">null</span> || when &lt; p.when) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (needWake &amp;&amp; p.isAsynchronous()) &#123;</span><br><span class="line">                    needWake = <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            msg.next = p; <span class="comment">// invariant: p == prev.next</span></span><br><span class="line">            prev.next = msg;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// We can assume mPtr != 0 because mQuitting is false.</span></span><br><span class="line">        <span class="keyword">if</span> (needWake) &#123;</span><br><span class="line">            nativeWake(mPtr);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在分析这段代码之前，需要明确几个点：</p><blockquote><p>1、Message结构体是一个链表结构，里面会有一个next指针指向下一个Message节点，每个Message在链表中的先后顺序是根据Message.when来决定的，每次来一个Message的时候会根据其when把Message插入到链表中合适的位置<br>2、MessageQueue里面有一个字段mBlocked,代表当前队列是否处于阻塞状态</p></blockquote><p>从上面的代码可以看出，enqueueMessage方法主要分为这几步：</p><blockquote><p>1、MessageQueue里面有一个mMessages变量，代表是链表的head<br>2、这个needWake代表是否需要进行唤醒，关于这个字段的含义，待会会结合Looper.loop方法一起讲解<br>3、如果现在链表是空的，或者传入的Message需要插入到队首（根据when来进行判断），那么就把链表的head设置为传入的Message，同时如果现在MessageQueue是阻塞状态，那么就需要立即唤醒<br>4、当不满足第3步的条件，就会把Message插入到链表合适的位置。如果现在是阻塞的情况下，队首Msg是一个同步屏障（通过p.target == null判断出是一个同步屏障）并且Msg是一个异步消息，才需要立即唤醒，相当于如果有同步屏障，那么其后续的消息都没法执行，只允许异步消息执行。<br>关于同步屏障以及异步消息的使用场景，稍后会专门讲解，现在只需要知道有这个概念就行</p></blockquote><p>把Message放入队列里面之后，那肯定是有一个地方会把Message从队列里面取出来执行，类似于生产者消费者模式，这个取消息的逻辑就是Looper.loop()，这个方法里面会循环从队列里面取出Message来执行：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Run the message queue in this thread. Be sure to call</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> #quit()&#125; to end the loop.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">loop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Looper me = myLooper();</span><br><span class="line">    ..................</span><br><span class="line">    me.mInLoop = <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">final</span> MessageQueue queue = me.mQueue;</span><br><span class="line"></span><br><span class="line">    .................. </span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">        Message msg = queue.next(); <span class="comment">// might block</span></span><br><span class="line">        <span class="keyword">if</span> (msg == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// No message indicates that the message queue is quitting.</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ..............</span><br><span class="line">        msg.recycleUnchecked();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看出，这个loop方法里面有一个for循环，里面会调用MessageQueue的next方法，这个方法是有可能阻塞的,来看下这个方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Message <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="comment">// Return here if the message loop has already quit and been disposed.</span></span><br><span class="line">       <span class="comment">// This can happen if the application tries to restart a looper after quit</span></span><br><span class="line">       <span class="comment">// which is not supported.</span></span><br><span class="line">       <span class="keyword">final</span> <span class="keyword">long</span> ptr = mPtr;</span><br><span class="line">       <span class="keyword">if</span> (ptr == <span class="number">0</span>) &#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">//只有最开始设置为-1</span></span><br><span class="line">       <span class="keyword">int</span> pendingIdleHandlerCount = -<span class="number">1</span>; <span class="comment">// -1 only during first iteration</span></span><br><span class="line">       <span class="comment">//下一次poll超时时间</span></span><br><span class="line">       <span class="keyword">int</span> nextPollTimeoutMillis = <span class="number">0</span>;</span><br><span class="line">       <span class="comment">//这里也是一个for循环</span></span><br><span class="line">       <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">           <span class="keyword">if</span> (nextPollTimeoutMillis != <span class="number">0</span>) &#123;</span><br><span class="line">               Binder.flushPendingCommands();</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="comment">//会阻塞调用native层的nativePollOnce方法来获取消息队列中的消息</span></span><br><span class="line">           <span class="comment">//这个nextPollTimeoutMillis有以下3种取值：</span></span><br><span class="line">           <span class="comment">//0，立即返回，没有阻塞</span></span><br><span class="line">           <span class="comment">//负数，一直阻塞，直到事件发生</span></span><br><span class="line">           <span class="comment">//正数，表示最多等待多久时间</span></span><br><span class="line">           <span class="comment">//因此next方法最开始nextPollTimeoutMillis设置为0，马上返回，没有阻塞</span></span><br><span class="line">           nativePollOnce(ptr, nextPollTimeoutMillis);</span><br><span class="line"></span><br><span class="line">           <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">               <span class="comment">// Try to retrieve the next message.  Return if found.</span></span><br><span class="line">               <span class="keyword">final</span> <span class="keyword">long</span> now = SystemClock.uptimeMillis();</span><br><span class="line">               Message prevMsg = <span class="keyword">null</span>;</span><br><span class="line">               Message msg = mMessages;</span><br><span class="line">               <span class="comment">//这个msg.target==null代表是一个同步屏障，找到下一个可异步消息</span></span><br><span class="line">               <span class="keyword">if</span> (msg != <span class="keyword">null</span> &amp;&amp; msg.target == <span class="keyword">null</span>) &#123;</span><br><span class="line">                   <span class="comment">// Stalled by a barrier.  Find the next asynchronous message in the queue.</span></span><br><span class="line">                   <span class="keyword">do</span> &#123;</span><br><span class="line">                       prevMsg = msg;</span><br><span class="line">                       msg = msg.next;</span><br><span class="line">                   &#125; <span class="keyword">while</span> (msg != <span class="keyword">null</span> &amp;&amp; !msg.isAsynchronous());</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="keyword">if</span> (msg != <span class="keyword">null</span>) &#123;</span><br><span class="line">                   <span class="keyword">if</span> (now &lt; msg.when) &#123;</span><br><span class="line">                       <span class="comment">// Next message is not ready.  Set a timeout to wake up when it is ready.</span></span><br><span class="line">                       <span class="comment">//下一个消息的时间还没到，那么就计算出一个新的nextPollTimeoutMillis</span></span><br><span class="line">                       nextPollTimeoutMillis = (<span class="keyword">int</span>) Math.min(msg.when - now, Integer.MAX_VALUE);</span><br><span class="line">                   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                       <span class="comment">// Got a message.</span></span><br><span class="line">                       <span class="comment">//获得一个msg，把这个msg从队列里面移除掉，同时返回msg，打破这个for循环</span></span><br><span class="line">                       mBlocked = <span class="keyword">false</span>;</span><br><span class="line">                       <span class="keyword">if</span> (prevMsg != <span class="keyword">null</span>) &#123;</span><br><span class="line">                           prevMsg.next = msg.next;</span><br><span class="line">                       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                           mMessages = msg.next;</span><br><span class="line">                       &#125;</span><br><span class="line">                       msg.next = <span class="keyword">null</span>;</span><br><span class="line">                       <span class="keyword">if</span> (DEBUG) Log.v(TAG, <span class="string">"Returning message: "</span> + msg);</span><br><span class="line">                       msg.markInUse();</span><br><span class="line">                       <span class="keyword">return</span> msg;</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                   <span class="comment">// No more messages.</span></span><br><span class="line">                   <span class="comment">//没有找到消息，设置为-1,下次轮询就一直阻塞</span></span><br><span class="line">                   nextPollTimeoutMillis = -<span class="number">1</span>;</span><br><span class="line">               &#125;</span><br><span class="line"></span><br><span class="line">               <span class="comment">// Process the quit message now that all pending messages have been handled.</span></span><br><span class="line">               <span class="keyword">if</span> (mQuitting) &#123;</span><br><span class="line">                   dispose();</span><br><span class="line">                   <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">               &#125;</span><br><span class="line"></span><br><span class="line">               <span class="comment">// If first time idle, then get the number of idlers to run.</span></span><br><span class="line">               <span class="comment">// Idle handles only run if the queue is empty or if the first message</span></span><br><span class="line">               <span class="comment">// in the queue (possibly a barrier) is due to be handled in the future.</span></span><br><span class="line">               <span class="comment">//由于这个pendingIdleHandlerCount只有最开始设置为-1，代表在当前for循环里面idleHandler只会执行一次</span></span><br><span class="line">               <span class="comment">//如果队列里面没有消息或者消息还没有到执行的时间，那么就考虑idleHandler</span></span><br><span class="line">               <span class="keyword">if</span> (pendingIdleHandlerCount &lt; <span class="number">0</span></span><br><span class="line">                       &amp;&amp; (mMessages == <span class="keyword">null</span> || now &lt; mMessages.when)) &#123;</span><br><span class="line">                   pendingIdleHandlerCount = mIdleHandlers.size();</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="comment">//如果没有idleHandler可执行，就阻塞，开始执行下一个轮询</span></span><br><span class="line">               <span class="keyword">if</span> (pendingIdleHandlerCount &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                   <span class="comment">// No idle handlers to run.  Loop and wait some more.</span></span><br><span class="line">                   mBlocked = <span class="keyword">true</span>;</span><br><span class="line">                   <span class="keyword">continue</span>;</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="comment">//最多执行4个idleHandler</span></span><br><span class="line">               <span class="keyword">if</span> (mPendingIdleHandlers == <span class="keyword">null</span>) &#123;</span><br><span class="line">                   mPendingIdleHandlers = <span class="keyword">new</span> IdleHandler[Math.max(pendingIdleHandlerCount, <span class="number">4</span>)];</span><br><span class="line">               &#125;</span><br><span class="line">               mPendingIdleHandlers = mIdleHandlers.toArray(mPendingIdleHandlers);</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           <span class="comment">// Run the idle handlers.</span></span><br><span class="line">           <span class="comment">// We only ever reach this code block during the first iteration.</span></span><br><span class="line">           <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; pendingIdleHandlerCount; i++) &#123;</span><br><span class="line">               <span class="keyword">final</span> IdleHandler idler = mPendingIdleHandlers[i];</span><br><span class="line">               mPendingIdleHandlers[i] = <span class="keyword">null</span>; <span class="comment">// release the reference to the handler</span></span><br><span class="line"></span><br><span class="line">               <span class="keyword">boolean</span> keep = <span class="keyword">false</span>;</span><br><span class="line">               <span class="keyword">try</span> &#123;</span><br><span class="line">                   keep = idler.queueIdle();</span><br><span class="line">               &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">                   Log.wtf(TAG, <span class="string">"IdleHandler threw exception"</span>, t);</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="comment">//这个返回值代表是否需要一直保存这个idleHandler，如果不需要保存就从列表里面移除掉</span></span><br><span class="line">               <span class="keyword">if</span> (!keep) &#123;</span><br><span class="line">                   <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">                       mIdleHandlers.remove(idler);</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           <span class="comment">// Reset the idle handler count to 0 so we do not run them again.</span></span><br><span class="line">           <span class="comment">//设置0，下一个循环就不会再次执行了，只执行一次</span></span><br><span class="line">           pendingIdleHandlerCount = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">           <span class="comment">// While calling an idle handler, a new message could have been delivered</span></span><br><span class="line">           <span class="comment">// so go back and look again for a pending message without waiting.</span></span><br><span class="line">           <span class="comment">//当执行完idleHandler之后，队列里面可能已经有新消息了，那么就设置nextPollTimeoutMillis为0代表立即</span></span><br><span class="line">           <span class="comment">//获取消息，无需等待</span></span><br><span class="line">           nextPollTimeoutMillis = <span class="number">0</span>;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>上面的注释比较详细，我们大体来看一下：<br>next方法里面也是一个for循环，在这个循环的开头会调用一个native方法nativePollOnce，这个方法可能会阻塞，根据传入的nextPollTimeoutMillis值，有3种执行情况：<br>1、如果传入0，那么就立即返回没有阻塞<br>2、如果传入负数，一直阻塞，直到有事件发生，这个有事件发生其实就我们前面在enqueue方法里面看到的nativeWake方法，当调用这个nativeWake方法的话，这个nativePollOnce就会返回继续往下面执行<br>3、如果传入正数，表示最多等待多久时间，如果超过这个时间，这个nativePollOnce就会返回继续往下面执行</p><p>由于next方法刚开始传入的nextPollTimeoutMillis为0，因此第一次循环nativePollOnce方法就会马上返回，接着往下面走，如果获取到了msg就会返回（如果遇到了同步屏障，依然只能返回异步msg），打破这个for循环，回到looper的循环里面去。如果没有获取到msg,就会重新计算这个nextPollTimeoutMillis。然后接着往下走的话，就是执行IdleHandler的相关逻辑了，如果队列里面没有消息或者消息还没有到执行的时间，那么就考虑idleHandler，idleHandler执行完成之后继续从头开始下一轮循环</p><p>以上就是Handler消息机制的底层实现原理，涉及到Looper、MessageQueue以及Message三者之间的一个交互关系</p><h2 id="Looper死循环为什么不会导致应用卡死？"><a href="#Looper死循环为什么不会导致应用卡死？" class="headerlink" title="Looper死循环为什么不会导致应用卡死？"></a>Looper死循环为什么不会导致应用卡死？</h2><p>上面说了，消息能够源源不断的执行，靠的时候Looper.loop()以及MessageQueue.next()方法里面的for循环来保证的，之所以使用循环是为了保证当前线程一直存活不退出，这个其实可以理解，毕竟主线程肯定不能说运行一段时间就自动退出的，那么主线程的死循环一直运行会不会特别消耗CPU资源导致应用卡死呢？</p><p>注意到，通过前面的分析，我们发现这里涉及到两个native方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">nativePollOnce</span><span class="params">(<span class="keyword">long</span> ptr, <span class="keyword">int</span> timeoutMillis)</span></span>; <span class="comment">/*non-static for callbacks*/</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">native</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">nativeWake</span><span class="params">(<span class="keyword">long</span> ptr)</span></span>;</span><br></pre></td></tr></table></figure><p>这两个方法其实涉及到Linux pipe/epoll机制，在主线程的MessageQueue没有消息时，便阻塞在nativePollOnce()方法里，此时主线程会释放CPU资源进入休眠状态，然后通过调用nativeWake()方法，通过往pipe管道写端写入数据来唤醒主线程工作。 所以说，主线程大多数时候都是处于休眠状态，并不会消耗大量CPU资源。</p><h2 id="ANR产生的原因"><a href="#ANR产生的原因" class="headerlink" title="ANR产生的原因"></a>ANR产生的原因</h2><p>因此，真正卡死主线程操作的是在回调方法onCreate或者TouchEvent处理等操作时间过长，5s超时导致ANR，Looper.loop()本身不会导致应用卡死</p><h2 id="同步屏障SyncBarrier"><a href="#同步屏障SyncBarrier" class="headerlink" title="同步屏障SyncBarrier"></a>同步屏障SyncBarrier</h2><p>在前面讲解MessageQueue.next()方法的时候我们说过如果队首的Message是一个同步屏障，那么后续的消息都得不到执行，那么这个同步屏障是用来干嘛的呢？这个同步屏障涉及到MessageQueue的以下方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@UnsupportedAppUsage</span></span><br><span class="line"><span class="meta">@TestApi</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">postSyncBarrier</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> postSyncBarrier(SystemClock.uptimeMillis());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">postSyncBarrier</span><span class="params">(<span class="keyword">long</span> when)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Enqueue a new sync barrier token.</span></span><br><span class="line">    <span class="comment">// We don't need to wake the queue because the purpose of a barrier is to stall it.</span></span><br><span class="line">    <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> token = mNextBarrierToken++;</span><br><span class="line">        <span class="keyword">final</span> Message msg = Message.obtain();</span><br><span class="line">        msg.markInUse();</span><br><span class="line">        msg.when = when;</span><br><span class="line">        msg.arg1 = token;</span><br><span class="line"></span><br><span class="line">        Message prev = <span class="keyword">null</span>;</span><br><span class="line">        Message p = mMessages;</span><br><span class="line">        <span class="keyword">if</span> (when != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">while</span> (p != <span class="keyword">null</span> &amp;&amp; p.when &lt;= when) &#123;</span><br><span class="line">                prev = p;</span><br><span class="line">                p = p.next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (prev != <span class="keyword">null</span>) &#123; <span class="comment">// invariant: p == prev.next</span></span><br><span class="line">            msg.next = p;</span><br><span class="line">            prev.next = msg;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            msg.next = p;</span><br><span class="line">            mMessages = msg;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> token;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Removes a synchronization barrier.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> token The synchronization barrier token that was returned by</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> #postSyncBarrier&#125;.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IllegalStateException if the barrier was not found.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@hide</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@UnsupportedAppUsage</span></span><br><span class="line"><span class="meta">@TestApi</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeSyncBarrier</span><span class="params">(<span class="keyword">int</span> token)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Remove a sync barrier token from the queue.</span></span><br><span class="line">    <span class="comment">// If the queue is no longer stalled by a barrier then wake it.</span></span><br><span class="line">    <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">        Message prev = <span class="keyword">null</span>;</span><br><span class="line">        Message p = mMessages;</span><br><span class="line">        <span class="keyword">while</span> (p != <span class="keyword">null</span> &amp;&amp; (p.target != <span class="keyword">null</span> || p.arg1 != token)) &#123;</span><br><span class="line">            prev = p;</span><br><span class="line">            p = p.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (p == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"The specified message queue synchronization "</span></span><br><span class="line">                    + <span class="string">" barrier token has not been posted or has already been removed."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">boolean</span> needWake;</span><br><span class="line">        <span class="keyword">if</span> (prev != <span class="keyword">null</span>) &#123;</span><br><span class="line">            prev.next = p.next;</span><br><span class="line">            needWake = <span class="keyword">false</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            mMessages = p.next;</span><br><span class="line">            needWake = mMessages == <span class="keyword">null</span> || mMessages.target != <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        p.recycleUnchecked();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// If the loop is quitting then it is already awake.</span></span><br><span class="line">        <span class="comment">// We can assume mPtr != 0 when mQuitting is false.</span></span><br><span class="line">        <span class="keyword">if</span> (needWake &amp;&amp; !mQuitting) &#123;</span><br><span class="line">            nativeWake(mPtr);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过postSyncBarrier方法来建立一个同步屏障，插入到Message链表合适的位置，然后通过removeSyncBarrier来移除一个同步屏障，那么这两个方法啥时候会调用呢？通过全局搜索系统源码，发现ViewRootImpl里面有如下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@UnsupportedAppUsage</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">scheduleTraversals</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!mTraversalScheduled) &#123;</span><br><span class="line">        mTraversalScheduled = <span class="keyword">true</span>;</span><br><span class="line">        mTraversalBarrier = mHandler.getLooper().getQueue().postSyncBarrier();</span><br><span class="line">        mChoreographer.postCallback(</span><br><span class="line">                Choreographer.CALLBACK_TRAVERSAL, mTraversalRunnable, <span class="keyword">null</span>);</span><br><span class="line">        notifyRendererOfFramePending();</span><br><span class="line">        pokeDrawLockIfNeeded();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">doTraversal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (mTraversalScheduled) &#123;</span><br><span class="line">        mTraversalScheduled = <span class="keyword">false</span>;</span><br><span class="line">        mHandler.getLooper().getQueue().removeSyncBarrier(mTraversalBarrier);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (mProfile) &#123;</span><br><span class="line">            Debug.startMethodTracing(<span class="string">"ViewAncestor"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        performTraversals();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (mProfile) &#123;</span><br><span class="line">            Debug.stopMethodTracing();</span><br><span class="line">            mProfile = <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">TraversalRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        doTraversal();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看出，在调用scheduleTraversals的时候，会post一个SyncBarrier建立屏障，然后调用mChoreographer.postCallback方法post一个runnable，在这个runnable里面会执行doTraversal方法，然后在这个doTraversal方法里面会removeSyncBarrier移除屏障。看到这个performTraversals大家应该比较熟悉了，这里面就就会递归进行整个界面View树的绘制</p><p>那么问题来了，这里为啥要使用同步屏障呢？post到Choreographer的runnable啥时候执行呢？为了一探究竟，我们继续深入看下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@UnsupportedAppUsage</span></span><br><span class="line"><span class="meta">@TestApi</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postCallback</span><span class="params">(<span class="keyword">int</span> callbackType, Runnable action, Object token)</span> </span>&#123;</span><br><span class="line">    postCallbackDelayed(callbackType, action, token, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@UnsupportedAppUsage</span></span><br><span class="line"><span class="meta">@TestApi</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postCallbackDelayed</span><span class="params">(<span class="keyword">int</span> callbackType,</span></span></span><br><span class="line"><span class="function"><span class="params">        Runnable action, Object token, <span class="keyword">long</span> delayMillis)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (action == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"action must not be null"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (callbackType &lt; <span class="number">0</span> || callbackType &gt; CALLBACK_LAST) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"callbackType is invalid"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    postCallbackDelayedInternal(callbackType, action, token, delayMillis);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">postCallbackDelayedInternal</span><span class="params">(<span class="keyword">int</span> callbackType,</span></span></span><br><span class="line"><span class="function"><span class="params">        Object action, Object token, <span class="keyword">long</span> delayMillis)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (DEBUG_FRAMES) &#123;</span><br><span class="line">        Log.d(TAG, <span class="string">"PostCallback: type="</span> + callbackType</span><br><span class="line">                + <span class="string">", action="</span> + action + <span class="string">", token="</span> + token</span><br><span class="line">                + <span class="string">", delayMillis="</span> + delayMillis);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">synchronized</span> (mLock) &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">long</span> now = SystemClock.uptimeMillis();</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">long</span> dueTime = now + delayMillis;</span><br><span class="line">        mCallbackQueues[callbackType].addCallbackLocked(dueTime, action, token);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (dueTime &lt;= now) &#123;</span><br><span class="line">            scheduleFrameLocked(now);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Message msg = mHandler.obtainMessage(MSG_DO_SCHEDULE_CALLBACK, action);</span><br><span class="line">            msg.arg1 = callbackType;</span><br><span class="line">            msg.setAsynchronous(<span class="keyword">true</span>);</span><br><span class="line">            mHandler.sendMessageAtTime(msg, dueTime);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以发现传入的action会先放入到mCallbackQueues保存起来，然后进入到了scheduleFrameLocked方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">scheduleFrameLocked</span><span class="params">(<span class="keyword">long</span> now)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!mFrameScheduled) &#123;</span><br><span class="line">        mFrameScheduled = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (USE_VSYNC) &#123;</span><br><span class="line">            <span class="keyword">if</span> (DEBUG_FRAMES) &#123;</span><br><span class="line">                Log.d(TAG, <span class="string">"Scheduling next frame on vsync."</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// If running on the Looper thread, then schedule the vsync immediately,</span></span><br><span class="line">            <span class="comment">// otherwise post a message to schedule the vsync from the UI thread</span></span><br><span class="line">            <span class="comment">// as soon as possible.</span></span><br><span class="line">            <span class="keyword">if</span> (isRunningOnLooperThreadLocked()) &#123;</span><br><span class="line">                scheduleVsyncLocked();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                Message msg = mHandler.obtainMessage(MSG_DO_SCHEDULE_VSYNC);</span><br><span class="line">                msg.setAsynchronous(<span class="keyword">true</span>);</span><br><span class="line">                mHandler.sendMessageAtFrontOfQueue(msg);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">long</span> nextFrameTime = Math.max(</span><br><span class="line">                    mLastFrameTimeNanos / TimeUtils.NANOS_PER_MS + sFrameDelay, now);</span><br><span class="line">            <span class="keyword">if</span> (DEBUG_FRAMES) &#123;</span><br><span class="line">                Log.d(TAG, <span class="string">"Scheduling next frame in "</span> + (nextFrameTime - now) + <span class="string">" ms."</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            Message msg = mHandler.obtainMessage(MSG_DO_FRAME);</span><br><span class="line">            msg.setAsynchronous(<span class="keyword">true</span>);</span><br><span class="line">            mHandler.sendMessageAtTime(msg, nextFrameTime);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个USE_VSYNC指的是垂直同步，关于什么是垂直同步，这里不做深入讲解，只需要知道是一种屏幕刷新机制就行。如果使用垂直同步的话，就可以发现进入到了scheduleVsyncLocked方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Schedules a single vertical sync pulse to be delivered when the next</span></span><br><span class="line"><span class="comment"> * display frame begins.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">scheduleVsyncLocked</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    mDisplayEventReceiver.scheduleVsync();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据注释，这个方法其实就是在下一帧开始的时候安排一个垂直同步脉冲，然后会在FrameDisplayEventReceiver.onVsync收到回调：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Called when a vertical sync pulse is received.</span></span><br><span class="line"><span class="comment">     * The recipient should render a frame and then call &#123;<span class="doctag">@link</span> #scheduleVsync&#125;</span></span><br><span class="line"><span class="comment">     * to schedule the next vertical sync pulse.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> timestampNanos The timestamp of the pulse, in the &#123;<span class="doctag">@link</span> System#nanoTime()&#125;</span></span><br><span class="line"><span class="comment">     * timebase.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> physicalDisplayId Stable display ID that uniquely describes a (display, port) pair.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> frame The frame number.  Increases by one for each vertical sync interval.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onVsync</span><span class="params">(<span class="keyword">long</span> timestampNanos, <span class="keyword">long</span> physicalDisplayId, <span class="keyword">int</span> frame)</span> </span>&#123;</span><br><span class="line">            <span class="comment">// Post the vsync event to the Handler.</span></span><br><span class="line">            <span class="comment">// The idea is to prevent incoming vsync events from completely starving</span></span><br><span class="line">            <span class="comment">// the message queue.  If there are no messages in the queue with timestamps</span></span><br><span class="line">            <span class="comment">// earlier than the frame time, then the vsync event will be processed immediately.</span></span><br><span class="line">            <span class="comment">// Otherwise, messages that predate the vsync event will be handled first.</span></span><br><span class="line">            <span class="keyword">long</span> now = System.nanoTime();</span><br><span class="line">            <span class="keyword">if</span> (timestampNanos &gt; now) &#123;</span><br><span class="line">                Log.w(TAG, <span class="string">"Frame time is "</span> + ((timestampNanos - now) * <span class="number">0.000001f</span>)</span><br><span class="line">                        + <span class="string">" ms in the future!  Check that graphics HAL is generating vsync "</span></span><br><span class="line">                        + <span class="string">"timestamps using the correct timebase."</span>);</span><br><span class="line">                timestampNanos = now;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (mHavePendingVsync) &#123;</span><br><span class="line">                Log.w(TAG, <span class="string">"Already have a pending vsync event.  There should only be "</span></span><br><span class="line">                        + <span class="string">"one at a time."</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                mHavePendingVsync = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            mTimestampNanos = timestampNanos;</span><br><span class="line">            mFrame = frame;</span><br><span class="line">            Message msg = Message.obtain(mHandler, <span class="keyword">this</span>);</span><br><span class="line">            msg.setAsynchronous(<span class="keyword">true</span>);</span><br><span class="line">            mHandler.sendMessageAtTime(msg, timestampNanos / TimeUtils.NANOS_PER_MS);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>从方法的注释可以看出，当一个垂直同步脉冲达到的时候就会回调这个方法，在这个方法里面会render frame，然后调用scheduleVsync开始安排下一个垂直同步脉冲。</p><p>从上面代码可以看出，在onVsync这个方法里面，<font color="#ff0000"> 会发送一个异步的Message</font>，前面我们说过，设置了同步屏障之后，只允许异步的Message得到执行，我们来看下这个Message的callBack执行代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    mHavePendingVsync = <span class="keyword">false</span>;</span><br><span class="line">    doFrame(mTimestampNanos, mFrame);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这里会执行doFrame方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">doFrame</span><span class="params">(<span class="keyword">long</span> frameTimeNanos, <span class="keyword">int</span> frame)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">final</span> <span class="keyword">long</span> startNanos;</span><br><span class="line">       <span class="keyword">synchronized</span> (mLock) &#123;</span><br><span class="line">           <span class="keyword">if</span> (!mFrameScheduled) &#123;</span><br><span class="line">               <span class="keyword">return</span>; <span class="comment">// no work to do</span></span><br><span class="line">           &#125;</span><br><span class="line">           ............</span><br><span class="line">           <span class="keyword">long</span> intendedFrameTimeNanos = frameTimeNanos;</span><br><span class="line">           startNanos = System.nanoTime();</span><br><span class="line">           <span class="keyword">final</span> <span class="keyword">long</span> jitterNanos = startNanos - frameTimeNanos;</span><br><span class="line">           <span class="keyword">if</span> (jitterNanos &gt;= mFrameIntervalNanos) &#123;</span><br><span class="line">               <span class="keyword">final</span> <span class="keyword">long</span> skippedFrames = jitterNanos / mFrameIntervalNanos;</span><br><span class="line">               <span class="keyword">if</span> (skippedFrames &gt;= SKIPPED_FRAME_WARNING_LIMIT) &#123;</span><br><span class="line">                   Log.i(TAG, <span class="string">"Skipped "</span> + skippedFrames + <span class="string">" frames!  "</span></span><br><span class="line">                           + <span class="string">"The application may be doing too much work on its main thread."</span>);</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="keyword">final</span> <span class="keyword">long</span> lastFrameOffset = jitterNanos % mFrameIntervalNanos;</span><br><span class="line">               <span class="keyword">if</span> (DEBUG_JANK) &#123;</span><br><span class="line">                   Log.d(TAG, <span class="string">"Missed vsync by "</span> + (jitterNanos * <span class="number">0.000001f</span>) + <span class="string">" ms "</span></span><br><span class="line">                           + <span class="string">"which is more than the frame interval of "</span></span><br><span class="line">                           + (mFrameIntervalNanos * <span class="number">0.000001f</span>) + <span class="string">" ms!  "</span></span><br><span class="line">                           + <span class="string">"Skipping "</span> + skippedFrames + <span class="string">" frames and setting frame "</span></span><br><span class="line">                           + <span class="string">"time to "</span> + (lastFrameOffset * <span class="number">0.000001f</span>) + <span class="string">" ms in the past."</span>);</span><br><span class="line">               &#125;</span><br><span class="line">               frameTimeNanos = startNanos - lastFrameOffset;</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           <span class="keyword">if</span> (frameTimeNanos &lt; mLastFrameTimeNanos) &#123;</span><br><span class="line">               <span class="keyword">if</span> (DEBUG_JANK) &#123;</span><br><span class="line">                   Log.d(TAG, <span class="string">"Frame time appears to be going backwards.  May be due to a "</span></span><br><span class="line">                           + <span class="string">"previously skipped frame.  Waiting for next vsync."</span>);</span><br><span class="line">               &#125;</span><br><span class="line">               scheduleVsyncLocked();</span><br><span class="line">               <span class="keyword">return</span>;</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           <span class="keyword">if</span> (mFPSDivisor &gt; <span class="number">1</span>) &#123;</span><br><span class="line">               <span class="keyword">long</span> timeSinceVsync = frameTimeNanos - mLastFrameTimeNanos;</span><br><span class="line">               <span class="keyword">if</span> (timeSinceVsync &lt; (mFrameIntervalNanos * mFPSDivisor) &amp;&amp; timeSinceVsync &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                   scheduleVsyncLocked();</span><br><span class="line">                   <span class="keyword">return</span>;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           mFrameInfo.setVsync(intendedFrameTimeNanos, frameTimeNanos);</span><br><span class="line">           mFrameScheduled = <span class="keyword">false</span>;</span><br><span class="line">           mLastFrameTimeNanos = frameTimeNanos;</span><br><span class="line">       &#125;  </span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           Trace.traceBegin(Trace.TRACE_TAG_VIEW, <span class="string">"Choreographer#doFrame"</span>);</span><br><span class="line">           AnimationUtils.lockAnimationClock(frameTimeNanos / TimeUtils.NANOS_PER_MS);</span><br><span class="line"></span><br><span class="line">           mFrameInfo.markInputHandlingStart();</span><br><span class="line">           doCallbacks(Choreographer.CALLBACK_INPUT, frameTimeNanos);</span><br><span class="line"></span><br><span class="line">           mFrameInfo.markAnimationsStart();</span><br><span class="line">           doCallbacks(Choreographer.CALLBACK_ANIMATION, frameTimeNanos);</span><br><span class="line">           doCallbacks(Choreographer.CALLBACK_INSETS_ANIMATION, frameTimeNanos);</span><br><span class="line"></span><br><span class="line">           mFrameInfo.markPerformTraversalsStart();</span><br><span class="line">           doCallbacks(Choreographer.CALLBACK_TRAVERSAL, frameTimeNanos);</span><br><span class="line"></span><br><span class="line">           doCallbacks(Choreographer.CALLBACK_COMMIT, frameTimeNanos);</span><br><span class="line">       &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">           AnimationUtils.unlockAnimationClock();</span><br><span class="line">           Trace.traceEnd(Trace.TRACE_TAG_VIEW);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>可以看出，在这个doFrame方法里面，会先判断如果出现了丢帧现象就会调用scheduleVsyncLocked方法开始安排下一个垂直同步脉冲，否则就会把mFrameScheduled设置为false，停止监听这个Vsync信号。虽然系统会每隔16.6ms执行一次屏幕刷新，但是app上层不一定会监听这个Vsync事件，只有是调用了scheduleFrameLocked方法才会开始监听这个Vsync信号，app上层才会收到回调。比如界面需要进行刷新了，才会调用scheduleFrameLocked方法来监听屏幕刷新信号，遍历绘制View树来重新计算屏幕数据。如果界面一直不需要进行刷新，那么app上层就不会去接收每隔16.6ms回调的屏幕刷新信号了。</p><p>然后继续往下走的话会执行doCallbacks(Choreographer.CALLBACK_TRAVERSAL, frameTimeNanos)代码，这个代码里面最终会执行最开始说的TraversalRunnable来进行UI刷新，然后会调用removeSyncBarrier解除屏障。</p><p>同时，我们再来回顾一下前面分析的MessageQueue.next方法里面的一段代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// If first time idle, then get the number of idlers to run.</span></span><br><span class="line"><span class="comment">// Idle handles only run if the queue is empty or if the first message</span></span><br><span class="line"><span class="comment">// in the queue (possibly a barrier) is due to be handled in the future.</span></span><br><span class="line"><span class="keyword">if</span> (pendingIdleHandlerCount &lt; <span class="number">0</span></span><br><span class="line">        &amp;&amp; (mMessages == <span class="keyword">null</span> || now &lt; mMessages.when)) &#123;</span><br><span class="line">    pendingIdleHandlerCount = mIdleHandlers.size();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (pendingIdleHandlerCount &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">// No idle handlers to run.  Loop and wait some more.</span></span><br><span class="line">    mBlocked = <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有同步屏障的情况下，这个mMessage就是这个同步屏障Message ,这个now肯定是要大于mMessages.when的，因为同步屏障是在scheduleTraversals方法里面就加入了，因此如果屏障不解除，那么idle就永远得不到执行！</p><p>总结一下：</p><blockquote><p>1、从以上的分析过程来看，使用同步屏障主要是与Vsync配合使用来做屏幕刷新的，开始安排一个Vsync的时候设置一个同步屏障，只有当收到Vsync回调的时候才会解除屏障。<br>2、这里使用同步屏障的目的主要是为了保证收到Vsync信号的时候能够第一时间响应遍历绘制View树的工作，不然就会造成丢帧现象<br>3、从以上分析可以进一步看出：当我们调用invalidate等刷新界面的时候，并不是马上就会执行UI刷新操作的，而是先通过ViewRootImpl的scheduleTraversals方法向底层注册监听下一个垂直同步信号，等这个垂直同步信号来了之后，才会通过performTraversals方法来刷新界面<br>4、其实以上分析就是Android的屏幕刷新机制</p></blockquote><h2 id="onDraw里面调用invalidate为啥会导致IdleHandler得不到执行？"><a href="#onDraw里面调用invalidate为啥会导致IdleHandler得不到执行？" class="headerlink" title="onDraw里面调用invalidate为啥会导致IdleHandler得不到执行？"></a>onDraw里面调用invalidate为啥会导致IdleHandler得不到执行？</h2><p>当我们在onDraw方法里面调用invalidate方法的时候，会调用到ViewRootImpl的scheduleTraversals方法，里面会发送一个同步屏障，然后收到onVsync回调最终执行到TraversalRunnable的时候会解除屏障，同时调用performTraversals方法，这个方法里面又会调用onDraw方法，从而形成死循环，导致屏障刚被解除马上又发送了一个新的屏障，这样idle一直得不到执行。</p><p>因此为了避免这种case，尽量不要在onDraw方法里面调用invalidate方法！</p><h2 id="ViewAnimation循环执行为啥会导致IdleHandler得不到执行-而使用属性动画就没有这个问题？"><a href="#ViewAnimation循环执行为啥会导致IdleHandler得不到执行-而使用属性动画就没有这个问题？" class="headerlink" title="ViewAnimation循环执行为啥会导致IdleHandler得不到执行,而使用属性动画就没有这个问题？"></a>ViewAnimation循环执行为啥会导致IdleHandler得不到执行,而使用属性动画就没有这个问题？</h2><p>ViewAnimation底层也是通过调用invalidate来实现的，无限循环动画就会导致无限调用invalidate，就会导致idle得不到执行。</p><p>属性动画的实现原理不同于View动画。View动画的每一帧都是通过invalidate方法来触发重绘，而属性动画每一帧的绘制都是通过Choreographer的回调实现。因此，本质上来说，属性动画少了一个很重要的步骤，就是post一个同步屏障。在属性动画中，没有同步屏障，那么后续的任务能够继续执行，当队列中没有任务时，自然就会回调IdleHandler了。</p><p>关于属性动画的底层实现原理，后续有机会会进行分析</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本篇文章主要是从源码的角度分析了Handler消息机制的底层实现原理，包括阻塞与同步、同步屏障、android屏幕刷新机制、idleHandler得不到执行的问题等，希望通过阅读本篇文章，能够对Handler消息机制有一个全新的认识，能够达到知其然且知其所以然</p>]]></content>
    
    <summary type="html">
    
      Handler消息机制深入解析
    
    </summary>
    
      <category term="Android源码解析" scheme="http://easyliu.com/categories/Android%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
    
    
      <category term="Android" scheme="http://easyliu.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>hexo博客添加评论、字数、阅读时间以及访问量</title>
    <link href="http://easyliu.com/2021/02/18/hexo/hexo_comment/"/>
    <id>http://easyliu.com/2021/02/18/hexo/hexo_comment/</id>
    <published>2021-02-18T11:24:38.000Z</published>
    <updated>2022-02-17T07:18:27.839Z</updated>
    
    <content type="html"><![CDATA[<h2 id="hexo添加评论及访问量"><a href="#hexo添加评论及访问量" class="headerlink" title="hexo添加评论及访问量"></a>hexo添加评论及访问量</h2><p>这里我们使用valine评论系统，大部分的hexo主题已经集成了valine评论系统了，关于valine的更多细节，参考：<a href="https://valine.js.org/quickstart.html" target="_blank" rel="noopener">https://valine.js.org/quickstart.html</a></p><p>1、首先去<a href="https://www.leancloud.cn" target="_blank" rel="noopener">https://www.leancloud.cn</a>注册一个账户，注册完以后需要创建一个应用，名字可以随便起，然后 进入应用-&gt;设置-&gt;应用key ,获取你的 appid 和 appkey</p><p>2、 打开主题配置文件 搜索valine，填入appid 和 appkey，这里我使用的是hueman主题：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"># Comment</span><br><span class="line">comment:</span><br><span class="line">    <span class="comment">//对于hueman主题来说，特别注意这里需要去掉disqus后面的字符串，不然会默认使用disqus评论系统的</span></span><br><span class="line">    disqus: # enter disqus shortname here </span><br><span class="line">    duoshuo: # enter duoshuo shortname here</span><br><span class="line">    youyan: # enter youyan uid here</span><br><span class="line">    facebook: # enter true to enable</span><br><span class="line">    isso: # options for isso. All fields below are OPTIONAL (except for site). See https://posativ.org/isso/docs/configuration/client/ for more information.</span><br><span class="line">        on: # enter true to enable isso</span><br><span class="line">        site: # enter the domain name of your own comment isso server, eg. comments.example.com</span><br><span class="line">        lang: # two letter language code, eg. en</span><br><span class="line">        reply-to-self: # true when your server spam guard has this value set</span><br><span class="line">        require-author: # true when your server spam guard has this value set</span><br><span class="line">        require-email: # true when your server spam guard has this value set</span><br><span class="line">        max-comments-top: # number of top level comments to show, specify "inf" for all</span><br><span class="line">        max-comments-nested: # number of nested comments to show.</span><br><span class="line">        reveal-on-click: # number of comments to reveal when clicking "hidden" link</span><br><span class="line">        avatar: # true|false, setting to enable avatar generation</span><br><span class="line">        avatar-bg: # background color of avatar, i.e. "#f0f0f0"</span><br><span class="line">        avatar-fg: # set pallet of foreground colors (up to 8) i.e. "#9abf88 #5698c4 #e279a3 #9163b6"</span><br><span class="line">        vote: # true|false, setting to enable voting feature on client side.</span><br><span class="line">        vote-levels: # levels to customize appearance of comments, eg. "[-5, 5, 15]" or "0,5,10"</span><br><span class="line">    changyan:</span><br><span class="line">        appId: # enter the changyan appId here</span><br><span class="line">        appKey: # enter the changyan appKey here</span><br><span class="line">        on: # enter true to enable</span><br><span class="line">    <span class="comment">//valine配置开始</span></span><br><span class="line">    valine: # Valine Comment System https://github.com/xCss/Valine</span><br><span class="line">        on: true # true设置为开启valine评论系统</span><br><span class="line">        appId: HTT9HtdG3ACsrMQEd8X7aSD5-gzGzoHsz</span><br><span class="line">        appKey: gEf913xnOAwiO8lVEWztLOQC</span><br><span class="line">        notify: false # enter true to enable &lt;Mail notifier&gt;, default: false; https://github.com/xCss/Valine/wiki/Valine-%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F%E4%B8%AD%E7%9A%84%E9%82%AE%E4%BB%B6%E6%8F%90%E9%86%92%E8%AE%BE%E7%BD%AE</span><br><span class="line">        verify: false # enter true to enable &lt;Validation code&gt;, default: false</span><br><span class="line">        placeholder: Just Do It # enter the comment box placeholder</span><br><span class="line">        avatar: mm # (''/mm/identicon/monsterid/wavatar/retro/hide), more to see https://valine.js.org/avatar.html</span><br><span class="line">        avatar_cdn: https:<span class="comment">//gravatar.loli.net/avatar/ # avatar CDN address, default gravatar.cat.net</span></span><br><span class="line">        pageSize: 10 # comments of one page</span><br><span class="line">        <span class="comment">// 开启文章访问量</span></span><br><span class="line">        visitor: true # count reading numbers; If true, the numbers will also show below the title of every post</span><br><span class="line">        recordip: true #false # If true, record commenter's ip, which is shown in LeanCloud pannel</span><br><span class="line">    <span class="comment">//valine配置结束       </span></span><br><span class="line">    gitalk:</span><br><span class="line">        on: # enter true to enable gitalk</span><br><span class="line">        owner: # GitHub user name</span><br><span class="line">        repo: # GitHub repository name</span><br><span class="line">        client_id: # OAuth application client id</span><br><span class="line">        client_secret: # OAuth application client secret</span><br><span class="line">        admin: # GitHub repo owner and collaborators who can initialize github issues</span><br><span class="line">               # Can either be a string or an array.</span><br></pre></td></tr></table></figure><p>这样评论系统以及访问量就弄好了。</p><h3 id="自定义表情包"><a href="#自定义表情包" class="headerlink" title="自定义表情包"></a>自定义表情包</h3><p>valine还支持自定义头像<a href="https://valine.js.org/avatar.html" target="_blank" rel="noopener">https://valine.js.org/avatar.html</a>以及自定义表情包<a href="https://valine.js.org/emoji.html" target="_blank" rel="noopener">https://valine.js.org/emoji.html</a>等高级功能。</p><p>这里我们以hueman主题为例来实践一下自定义表情包功能。</p><p>首先找到hueman主题下的valine.ejs，路径如下所示：<br>/Users/easyliu/Documents/hexoBlog/themes/hueman/layout/comment/valine.ejs</p><p>打开之后如下所示：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;% <span class="keyword">if</span> (<span class="keyword">typeof</span>(script) !== <span class="string">'undefined'</span> &amp;&amp; script) &#123; %&gt;</span><br><span class="line">    &lt;script src=<span class="string">"//unpkg.com/valine/dist/Valine.min.js"</span>&gt;&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">    &lt;script&gt;</span></span><br><span class="line"><span class="regexp">        var GUEST = ['nick','mail','link'];</span></span><br><span class="line"><span class="regexp">        var meta = '&lt;%= theme.comment.valine.meta %&gt;';</span></span><br><span class="line"><span class="regexp">        meta = meta.split(',').filter(function (item) &#123;</span></span><br><span class="line"><span class="regexp">            return GUEST.indexOf(item)&gt;-1;</span></span><br><span class="line"><span class="regexp">        &#125;);</span></span><br><span class="line"><span class="regexp">        var avatarcdn = '&lt;%= theme.comment.valine.avatar_cdn %&gt;' == true;</span></span><br><span class="line"><span class="regexp">        new Valine(&#123;</span></span><br><span class="line"><span class="regexp">            el: '.vcomments',</span></span><br><span class="line"><span class="regexp">            notify: "&lt;%= theme.comment.valine.notify %&gt;",</span></span><br><span class="line"><span class="regexp">            verify: "&lt;%= theme.comment.valine.verify %&gt;",</span></span><br><span class="line"><span class="regexp">            appId: "&lt;%= theme.comment.valine.appId %&gt;",</span></span><br><span class="line"><span class="regexp">            appKey: "&lt;%= theme.comment.valine.appKey %&gt;",</span></span><br><span class="line"><span class="regexp">            placeholder: "&lt;%= theme.comment.valine.placeholder %&gt;",</span></span><br><span class="line"><span class="regexp">            avatar:"&lt;%= theme.comment.valine.avatar %&gt;",</span></span><br><span class="line"><span class="regexp">            recordIP:"&lt;%= theme.comment.valine.recordip %&gt;",</span></span><br><span class="line"><span class="regexp">            visitor: "&lt;%= theme.comment.valine.visitor %&gt;"</span></span><br><span class="line"><span class="regexp">        &#125;);</span></span><br><span class="line"><span class="regexp">    &lt;/</span>script&gt;</span><br><span class="line">&lt;% &#125; <span class="keyword">else</span> &#123; %&gt;</span><br><span class="line">    &lt;!-- Valine --&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"vcomments"</span>&gt;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;% &#125; %&gt;</span></span><br></pre></td></tr></table></figure><p>我们可以编辑这个valine.ejs，添加表情包：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">&lt;% <span class="keyword">if</span> (<span class="keyword">typeof</span>(script) !== <span class="string">'undefined'</span> &amp;&amp; script) &#123; %&gt;</span><br><span class="line">    &lt;script src=<span class="string">"//unpkg.com/valine/dist/Valine.min.js"</span>&gt;&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">    &lt;script&gt;</span></span><br><span class="line"><span class="regexp">        var GUEST = ['nick','mail','link'];</span></span><br><span class="line"><span class="regexp">        var meta = '&lt;%= theme.comment.valine.meta %&gt;';</span></span><br><span class="line"><span class="regexp">        meta = meta.split(',').filter(function (item) &#123;</span></span><br><span class="line"><span class="regexp">            return GUEST.indexOf(item)&gt;-1;</span></span><br><span class="line"><span class="regexp">        &#125;);</span></span><br><span class="line"><span class="regexp">        var avatarcdn = '&lt;%= theme.comment.valine.avatar_cdn %&gt;' == true;</span></span><br><span class="line"><span class="regexp">        new Valine(&#123;</span></span><br><span class="line"><span class="regexp">            el: '.vcomments',</span></span><br><span class="line"><span class="regexp">            notify: "&lt;%= theme.comment.valine.notify %&gt;",</span></span><br><span class="line"><span class="regexp">            verify: "&lt;%= theme.comment.valine.verify %&gt;",</span></span><br><span class="line"><span class="regexp">            appId: "&lt;%= theme.comment.valine.appId %&gt;",</span></span><br><span class="line"><span class="regexp">            appKey: "&lt;%= theme.comment.valine.appKey %&gt;",</span></span><br><span class="line"><span class="regexp">            placeholder: "&lt;%= theme.comment.valine.placeholder %&gt;",</span></span><br><span class="line"><span class="regexp">            avatar:"&lt;%= theme.comment.valine.avatar %&gt;",</span></span><br><span class="line"><span class="regexp">            recordIP:"&lt;%= theme.comment.valine.recordip %&gt;",</span></span><br><span class="line"><span class="regexp">            visitor: "&lt;%= theme.comment.valine.visitor %&gt;",</span></span><br><span class="line"><span class="regexp">            /</span><span class="regexp">/ 设置Bilibili表情包地址</span></span><br><span class="line"><span class="regexp">            emojiCDN: '/</span><span class="regexp">/i0.hdslb.com/</span>bfs/emote/<span class="string">', </span></span><br><span class="line"><span class="string">            // 表情title和图片映射</span></span><br><span class="line"><span class="string">            emojiMaps: &#123;</span></span><br><span class="line"><span class="string">                "doge": "6ea59c827c414b4a2955fe79e0f6fd3dcd515e24.png",</span></span><br><span class="line"><span class="string">                "亲亲": "a8111ad55953ef5e3be3327ef94eb4a39d535d06.png",</span></span><br><span class="line"><span class="string">                "偷笑": "bb690d4107620f1c15cff29509db529a73aee261.png",</span></span><br><span class="line"><span class="string">                "再见": "180129b8ea851044ce71caf55cc8ce44bd4a4fc8.png",</span></span><br><span class="line"><span class="string">                "冷漠": "b9cbc755c2b3ee43be07ca13de84e5b699a3f101.png",</span></span><br><span class="line"><span class="string">                "发怒": "34ba3cd204d5b05fec70ce08fa9fa0dd612409ff.png",</span></span><br><span class="line"><span class="string">                "发财": "34db290afd2963723c6eb3c4560667db7253a21a.png",</span></span><br><span class="line"><span class="string">                "可爱": "9e55fd9b500ac4b96613539f1ce2f9499e314ed9.png",</span></span><br><span class="line"><span class="string">                "吐血": "09dd16a7aa59b77baa1155d47484409624470c77.png",</span></span><br><span class="line"><span class="string">                "呆": "fe1179ebaa191569b0d31cecafe7a2cd1c951c9d.png",</span></span><br><span class="line"><span class="string">                "呕吐": "9f996894a39e282ccf5e66856af49483f81870f3.png",</span></span><br><span class="line"><span class="string">                "困": "241ee304e44c0af029adceb294399391e4737ef2.png",</span></span><br><span class="line"><span class="string">                "坏笑": "1f0b87f731a671079842116e0991c91c2c88645a.png",</span></span><br><span class="line"><span class="string">                "大佬": "093c1e2c490161aca397afc45573c877cdead616.png",</span></span><br><span class="line"><span class="string">                "大哭": "23269aeb35f99daee28dda129676f6e9ea87934f.png",</span></span><br><span class="line"><span class="string">                "委屈": "d04dba7b5465779e9755d2ab6f0a897b9b33bb77.png",</span></span><br><span class="line"><span class="string">                "害羞": "a37683fb5642fa3ddfc7f4e5525fd13e42a2bdb1.png",</span></span><br><span class="line"><span class="string">                "尴尬": "7cfa62dafc59798a3d3fb262d421eeeff166cfa4.png",</span></span><br><span class="line"><span class="string">                "微笑": "70dc5c7b56f93eb61bddba11e28fb1d18fddcd4c.png",</span></span><br><span class="line"><span class="string">                "思考": "90cf159733e558137ed20aa04d09964436f618a1.png",</span></span><br><span class="line"><span class="string">                "惊吓": "0d15c7e2ee58e935adc6a7193ee042388adc22af.png",</span></span><br><span class="line"><span class="string">                 // ... 更多表情</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">        &#125;);</span></span><br><span class="line"><span class="string">    &lt;/script&gt;</span></span><br><span class="line"><span class="string">&lt;% &#125; else &#123; %&gt;</span></span><br><span class="line"><span class="string">    &lt;!-- Valine --&gt;</span></span><br><span class="line"><span class="string">    &lt;div class="vcomments"&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="string">&lt;% &#125; %&gt;</span></span><br></pre></td></tr></table></figure><p>表情包效果可以在评论区查看</p><h2 id="字数及阅读时间展示"><a href="#字数及阅读时间展示" class="headerlink" title="字数及阅读时间展示"></a>字数及阅读时间展示</h2><p>安装如下插件即可：</p><p>npm install –save hexo-wordcount</p>]]></content>
    
    <summary type="html">
    
      hexo博客添加评论、字数、阅读时间以及访问量
    
    </summary>
    
      <category term="开发工具" scheme="http://easyliu.com/categories/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="hexo进阶" scheme="http://easyliu.com/tags/hexo%E8%BF%9B%E9%98%B6/"/>
    
  </entry>
  
  <entry>
    <title>Glide系列之——Glide对象创建及功能扩展</title>
    <link href="http://easyliu.com/2021/02/07/android_source_analysis/glide_new/"/>
    <id>http://easyliu.com/2021/02/07/android_source_analysis/glide_new/</id>
    <published>2021-02-07T01:51:51.000Z</published>
    <updated>2022-02-17T07:17:28.173Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Glide是一个优秀的开源图片加载组件，广泛应用在各大App当中，并且也是Google官方强力推荐的一个图片加载库，根据<a href="https://github.com/bumptech/glide/tree/master" target="_blank" rel="noopener">官方文档介绍</a>：</p><p>Glide是一个快速高效的Android图片加载库，注重于平滑的滚动。Glide提供了易用的API，高性能、可扩展的图片解码管道（decode pipeline），以及自动的资源池技术。Glide 支持拉取，解码和展示视频快照，图片，和GIF动画。Glide的Api是如此的灵活，开发者甚至可以插入和替换成自己喜爱的任何网络栈。默认情况下，Glide使用的是一个定制化的基于HttpUrlConnection的栈，但同时也提供了与Google Volley和Square OkHttp快速集成的工具库。虽然Glide 的主要目标是让任何形式的图片列表的滚动尽可能地变得更快、更平滑，但实际上，Glide几乎能满足你对远程图片的拉取/缩放/显示的一切需求。</p><p>可以看出，Glide功能是非常强大的。这么优秀的开源组件，肯定是非常值得学习的。</p><p>本系列主要是分为以下几个部分：</p><p>1、<a href="https://easyliu-ly.github.io/2021/01/16/android_source_analysis/glide_use/" target="_blank" rel="noopener">Glide系列之——初识Glide</a></p><p>2、<a href="https://easyliu-ly.github.io/2021/02/07/android_source_analysis/glide_new/" target="_blank" rel="noopener">Glide系列之——Glide对象创建及功能扩展</a></p><p>3、Glide系列之——Glide的Request执行流程及回调</p><p>4、Glide系列之——Glide缓存机制</p><p>5、Glide系列之——图片变换功能Transformation</p><p><font size="3" color="red">这篇文章为第二篇：Glide系列之——Glide对象创建及功能扩展</font></p><h2 id="Glide功能扩展"><a href="#Glide功能扩展" class="headerlink" title="Glide功能扩展"></a>Glide功能扩展</h2><p>首先来看下Glide的功能扩展</p><h3 id="GlideModule"><a href="#GlideModule" class="headerlink" title="@GlideModule"></a>@GlideModule</h3><p>通过Glide的使用方式就可以发现Glide是一个全局的对象，在上一篇文章当中，讲到了RequestManagerRetriever对象的获取方式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@NonNull</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> RequestManagerRetriever <span class="title">getRetriever</span><span class="params">(@Nullable Context context)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// Context could be null for other reasons (ie the user passes in null), but in practice it will</span></span><br><span class="line">  <span class="comment">// only occur due to errors with the Fragment lifecycle.</span></span><br><span class="line">  Preconditions.checkNotNull(</span><br><span class="line">      context,</span><br><span class="line">      <span class="string">"You cannot start a load on a not yet attached View or a Fragment where getActivity() "</span></span><br><span class="line">          + <span class="string">"returns null (which usually occurs when getActivity() is called before the Fragment "</span></span><br><span class="line">          + <span class="string">"is attached or after the Fragment is destroyed)."</span>);</span><br><span class="line">  <span class="keyword">return</span> Glide.get(context).getRequestManagerRetriever();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看出Glide对象的获取方式是通过Glide.get(context)方法来获取的，来看下这个get方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> Glide glide;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Get the singleton.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> the singleton</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@NonNull</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Glide <span class="title">get</span><span class="params">(@NonNull Context context)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (glide == <span class="keyword">null</span>) &#123;</span><br><span class="line">      GeneratedAppGlideModule annotationGeneratedModule =</span><br><span class="line">          getAnnotationGeneratedGlideModules(context.getApplicationContext());</span><br><span class="line">      <span class="keyword">synchronized</span> (Glide<span class="class">.<span class="keyword">class</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (glide == <span class="keyword">null</span>) &#123;</span><br><span class="line">          checkAndInitializeGlide(context, annotationGeneratedModule);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> glide;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>可以看出是使用double-check的单例方式来获取Glide对象的。在对象创建的时候，首先会通过getAnnotationGeneratedGlideModules方法获取到一个GeneratedAppGlideModule对象，我们先来看下这个getAnnotationGeneratedGlideModules方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> GeneratedAppGlideModule <span class="title">getAnnotationGeneratedGlideModules</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">  GeneratedAppGlideModule result = <span class="keyword">null</span>;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    Class&lt;GeneratedAppGlideModule&gt; clazz =</span><br><span class="line">        (Class&lt;GeneratedAppGlideModule&gt;)</span><br><span class="line">            Class.forName(<span class="string">"com.bumptech.glide.GeneratedAppGlideModuleImpl"</span>);</span><br><span class="line">    result =</span><br><span class="line">        clazz.getDeclaredConstructor(Context<span class="class">.<span class="keyword">class</span>).<span class="title">newInstance</span>(<span class="title">context</span>.<span class="title">getApplicationContext</span>())</span>;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">    <span class="keyword">if</span> (Log.isLoggable(TAG, Log.WARN)) &#123;</span><br><span class="line">      Log.w(</span><br><span class="line">          TAG,</span><br><span class="line">          <span class="string">"Failed to find GeneratedAppGlideModule. You should include an"</span></span><br><span class="line">              + <span class="string">" annotationProcessor compile dependency on com.github.bumptech.glide:compiler"</span></span><br><span class="line">              + <span class="string">" in your application and a @GlideModule annotated AppGlideModule implementation"</span></span><br><span class="line">              + <span class="string">" or LibraryGlideModules will be silently ignored"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// These exceptions can't be squashed across all versions of Android.</span></span><br><span class="line">  &#125; <span class="keyword">catch</span> (InstantiationException e) &#123;</span><br><span class="line">    throwIncorrectGlideModule(e);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">    throwIncorrectGlideModule(e);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (NoSuchMethodException e) &#123;</span><br><span class="line">    throwIncorrectGlideModule(e);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</span><br><span class="line">    throwIncorrectGlideModule(e);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上代码就非常简单了，就是通过反射创建一个GeneratedAppGlideModuleImpl对象，然后强转为GeneratedAppGlideModule类型，说明这个GeneratedAppGlideModuleImpl肯定是继承自GeneratedAppGlideModule的。到这里，很自然的我们就会去看下这个GeneratedAppGlideModuleImpl到底是个什么东东。你会发现，根本找不到GeneratedAppGlideModuleImpl这个类！那么这个类是什么时候才会生成呢？</p><p>有一定经验的同学肯定会猜想应该是使用了编译时注解或者自定义plugin在编译的时候自动生成的。没错，就是使用编译时注解自动生成的，生成方式如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GlideModule</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyGlideModule</span> <span class="keyword">extends</span> <span class="title">AppGlideModule</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">applyOptions</span><span class="params">(@NonNull Context context,</span></span></span><br><span class="line"><span class="function"><span class="params">                             @NonNull GlideBuilder builder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.applyOptions(context, builder);</span><br><span class="line">        <span class="comment">//内存缓存相关,默认是24m</span></span><br><span class="line">        <span class="keyword">int</span> memoryCacheSizeBytes = <span class="number">1024</span> * <span class="number">1024</span> * <span class="number">20</span>; <span class="comment">// 20mb</span></span><br><span class="line">        builder.setMemoryCache(<span class="keyword">new</span> LruResourceCache(memoryCacheSizeBytes));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isManifestParsingEnabled</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerComponents</span><span class="params">(@NonNull @NotNull Context context,</span></span></span><br><span class="line"><span class="function"><span class="params">                                   @NonNull @NotNull Glide glide,</span></span></span><br><span class="line"><span class="function"><span class="params">                                   @NonNull @NotNull Registry registry)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.registerComponents(context, glide, registry);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>自定义MyGlideModule继承自AppGlideModule，并且给MyGlideModule打上@GlideModule注解，这样在编译的时候就会自动生成GeneratedAppGlideModuleImpl：<br><img src="/2021/02/07/android_source_analysis/glide_new/glide_aop.png" alt="glide_aop"><br>来看下GeneratedAppGlideModuleImpl这个类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bumptech.glide;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.content.Context;</span><br><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line"><span class="keyword">import</span> androidx.annotation.NonNull;</span><br><span class="line"><span class="keyword">import</span> com.easyliu.demo.glide_demo.MyGlideModule;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"deprecation"</span>)</span><br><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">GeneratedAppGlideModuleImpl</span> <span class="keyword">extends</span> <span class="title">GeneratedAppGlideModule</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> MyGlideModule appGlideModule;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">GeneratedAppGlideModuleImpl</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">    appGlideModule = <span class="keyword">new</span> MyGlideModule();</span><br><span class="line">    <span class="keyword">if</span> (Log.isLoggable(<span class="string">"Glide"</span>, Log.DEBUG)) &#123;</span><br><span class="line">      Log.d(<span class="string">"Glide"</span>, <span class="string">"Discovered AppGlideModule from annotation: com.easyliu.demo.glide_demo.MyGlideModule"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">applyOptions</span><span class="params">(@NonNull Context context, @NonNull GlideBuilder builder)</span> </span>&#123;</span><br><span class="line">    appGlideModule.applyOptions(context, builder);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerComponents</span><span class="params">(@NonNull Context context, @NonNull Glide glide,</span></span></span><br><span class="line"><span class="function"><span class="params">      @NonNull Registry registry)</span> </span>&#123;</span><br><span class="line">    appGlideModule.registerComponents(context, glide, registry);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isManifestParsingEnabled</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> appGlideModule.isManifestParsingEnabled();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="meta">@NonNull</span></span><br><span class="line">  <span class="keyword">public</span> Set&lt;Class&lt;?&gt;&gt; getExcludedModuleClasses() &#123;</span><br><span class="line">    <span class="keyword">return</span> Collections.emptySet();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="meta">@NonNull</span></span><br><span class="line">  <span class="function">GeneratedRequestManagerFactory <span class="title">getRequestManagerFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> GeneratedRequestManagerFactory();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看出这个类里面就是使用代理的方式调用了我们自定义的类MyGlideModule的相应的方法。</p><p>通过自定义AppGlideModule，我们可以通过GlideBuilder做很多定制化的操作，比如在MyGlideModule里面我们就把内存缓存设置为了20MB，默认是24MB的。</p><p>在MyGlideModule里面我们还覆写了isManifestParsingEnabled方法，返回false。这个方法是用来干嘛的呢？</p><p>目前我们分析的Glide源码是基于v4版本的，在Glide的v3版本的时候，并不是使用编译时注解来扩展Glide功能的，而是通过在Manifest里面添加meta-data来实现的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Deprecated</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">GlideModule</span> <span class="keyword">extends</span> <span class="title">RegistersComponents</span>, <span class="title">AppliesOptions</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//自定义类继承自GlideModule</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FlickrGlideModule</span> <span class="keyword">implements</span> <span class="title">GlideModule</span> </span>&#123;</span><br><span class="line">        &#123;<span class="meta">@literal</span> @&#125;Override</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">applyOptions</span><span class="params">(Context context, GlideBuilder builder)</span> </span>&#123;</span><br><span class="line">                    builder.setDecodeFormat(DecodeFormat.ALWAYS_ARGB_8888);</span><br><span class="line">                    &#125;                         </span><br><span class="line">        &#123;<span class="meta">@literal</span> @&#125;Override</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerComponents</span><span class="params">(Context context, Glide glide)</span> </span>&#123;</span><br><span class="line">                    glide.register(Model<span class="class">.<span class="keyword">class</span>, <span class="title">Data</span>.<span class="title">class</span>, <span class="title">new</span> <span class="title">MyModelLoader</span>())</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Manifest：</span></span><br><span class="line">&lt;meta-data</span><br><span class="line">   android:name=<span class="string">"com.bumptech.glide.samples.flickr.FlickrGlideModule"</span></span><br><span class="line">   android:value=<span class="string">"GlideModule"</span> /&gt;</span><br></pre></td></tr></table></figure><p>因此这个isManifestParsingEnabled是V4版本为了兼容v3版本做的处理，后续Glide继续更新的话，对应这些兼容逻辑估计会去掉的。</p><h3 id="GlideExtension"><a href="#GlideExtension" class="headerlink" title="GlideExtension"></a>GlideExtension</h3><p>我们发现编译时注解在自动生成GeneratedAppGlideModuleImpl的同时，也自动生成了一些其他的类，比如GlideApp、GlideOptions等，如下所示：<br><img src="/2021/02/07/android_source_analysis/glide_new/generated_api.png" alt="generated_api"></p><p>生成这些类是干嘛的呢？根据官方文档<a href="https://muyangmin.github.io/glide-docs-cn/doc/generatedapi.html#使用-generated-api" target="_blank" rel="noopener">使用-generated-api</a>说明，这个GlideApp其实就是Generated API，用于扩展Glide的功能，为啥叫<strong>GlideApp</strong>这个名字呢？这个名字其实就是注解GlideModule里面的默认值，自定义的时候可以自行修改即可：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>(ElementType.TYPE)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.CLASS)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> GlideModule &#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Returns the name of the class that will be used as a replacement for &#123;<span class="doctag">@code</span></span></span><br><span class="line"><span class="comment">   * com.bumptech.glide.Glide&#125; in Applications that depend on Glide's generated code.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function">String <span class="title">glideName</span><span class="params">()</span> <span class="keyword">default</span> "GlideApp"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>GlideApp使用方式如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">GlideApp.with(fragment)</span><br><span class="line">   .load(myUrl)</span><br><span class="line">   .placeholder(R.drawable.placeholder)</span><br><span class="line">   .fitCenter()</span><br><span class="line">   .into(imageView);</span><br></pre></td></tr></table></figure><p>到这里大家肯定心想，这个跟直接使用Glide.with有啥区别啊？为啥要来这一出呢？</p><p>刚刚我们也说了，这个GlideApp是用于扩展Glide的功能的，那么具体怎么扩展呢？来看下如下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GlideExtension</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAppGlideExtension</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Size of mini thumb in pixels.</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MINI_THUMB_SIZE = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">MyAppGlideExtension</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NonNull</span></span><br><span class="line">    <span class="meta">@GlideOption</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> BaseRequestOptions&lt;?&gt; miniThumb(BaseRequestOptions&lt;?&gt; options) &#123;</span><br><span class="line">        <span class="keyword">return</span> options</span><br><span class="line">                .fitCenter()</span><br><span class="line">                .override(MINI_THUMB_SIZE);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>自定义一个类MyAppGlideExtension,打上GlideExtension注解，给里面的静态方法miniThumb打上一个GlideOption注解，然后我们来编译一下代码，就会发现GlideOptions类里面多了如下代码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> MyAppGlideExtension#miniThumb(BaseRequestOptions)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line"><span class="meta">@CheckResult</span></span><br><span class="line"><span class="meta">@NonNull</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> GlideOptions <span class="title">miniThumb</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (GlideOptions) MyAppGlideExtension.miniThumb(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> MyAppGlideExtension#miniThumb(BaseRequestOptions)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@CheckResult</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> GlideOptions <span class="title">miniThumbOf</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> GlideOptions().miniThumb();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用方式如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">GlideApp.with(fragment)</span><br><span class="line">   .load(url)</span><br><span class="line">   .miniThumb(thumbnailSize)</span><br><span class="line">   .into(imageView);</span><br></pre></td></tr></table></figure><p>到这里大家就明白是怎么回事了：</p><p>1、@GlideExtension注解用于标识一个扩展Glide API的类。注意：被 @GlideExtension 注解的类应以工具类的思维编写。这种类应该有一个私有的、空的构造方法，应为 final 类型，并且仅包含静态方法。被注解的类可以含有静态变量，可以引用其他的类或对象</p><p>2、使用@GlideOption注解为RequestOptions添加一个自定义的选项</p><p>3、通过自动生成的GlideApp来使用自定义的RequestOptions，从而达到扩展Glide功能的目的</p><p>4、还支持使用@GlideType注解添加对新的资源类型的支持(GIF，SVG 等等)，使用方式参考：<a href="https://muyangmin.github.io/glide-docs-cn/doc/generatedapi.html#使用-generated-api" target="_blank" rel="noopener">使用-generated-api</a></p><p>以上就是Glide v4 功能扩展的实现原理，使用编译时注解的方式实现的。关于Processor的具体实现，参考github上Glide的源代码。</p><h2 id="Glide对象创建"><a href="#Glide对象创建" class="headerlink" title="Glide对象创建"></a>Glide对象创建</h2><p>回到最开始，得到annotationGeneratedModule之后，就会调用checkAndInitializeGlide方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">synchronized</span> (Glide<span class="class">.<span class="keyword">class</span>) </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (glide == <span class="keyword">null</span>) &#123;</span><br><span class="line">         checkAndInitializeGlide(context, annotationGeneratedModule);</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure><p>在这个方法会对Glide对象进行初始化,来看下这个方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GuardedBy</span>(<span class="string">"Glide.class"</span>)</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">checkAndInitializeGlide</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    @NonNull Context context, @Nullable GeneratedAppGlideModule generatedAppGlideModule)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// In the thread running initGlide(), one or more classes may call Glide.get(context).</span></span><br><span class="line">  <span class="comment">// Without this check, those calls could trigger infinite recursion.</span></span><br><span class="line">  <span class="keyword">if</span> (isInitializing) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(</span><br><span class="line">        <span class="string">"You cannot call Glide.get() in registerComponents(),"</span></span><br><span class="line">            + <span class="string">" use the provided Glide instance instead"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  isInitializing = <span class="keyword">true</span>;</span><br><span class="line">  initializeGlide(context, generatedAppGlideModule);</span><br><span class="line">  isInitializing = <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个方法里面会进一步调用initializeGlide方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GuardedBy</span>(<span class="string">"Glide.class"</span>)</span><br><span class="line"> <span class="meta">@SuppressWarnings</span>(<span class="string">"deprecation"</span>)</span><br><span class="line"> <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">initializeGlide</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">     @NonNull Context context,</span></span></span><br><span class="line"><span class="function"><span class="params">     @NonNull GlideBuilder builder,</span></span></span><br><span class="line"><span class="function"><span class="params">     @Nullable GeneratedAppGlideModule annotationGeneratedModule)</span> </span>&#123;</span><br><span class="line">   Context applicationContext = context.getApplicationContext();</span><br><span class="line">   List&lt;com.bumptech.glide.<span class="keyword">module</span>.GlideModule&gt; manifestModules = Collections.emptyList();</span><br><span class="line">   <span class="comment">//没有读取到annotationGeneratedModule或者允许解析Manifest</span></span><br><span class="line">   <span class="keyword">if</span> (annotationGeneratedModule == <span class="keyword">null</span> || annotationGeneratedModule.isManifestParsingEnabled()) &#123;</span><br><span class="line">     <span class="comment">//解析manifest，获取到GlideModule列表</span></span><br><span class="line">     manifestModules = <span class="keyword">new</span> ManifestParser(applicationContext).parse();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//以下逻辑主要是从manifestModules里面剔除不包括在内的GlideModule对象</span></span><br><span class="line">   <span class="keyword">if</span> (annotationGeneratedModule != <span class="keyword">null</span></span><br><span class="line">       &amp;&amp; !annotationGeneratedModule.getExcludedModuleClasses().isEmpty()) &#123;</span><br><span class="line">     Set&lt;Class&lt;?&gt;&gt; excludedModuleClasses = annotationGeneratedModule.getExcludedModuleClasses();</span><br><span class="line">     Iterator&lt;com.bumptech.glide.<span class="keyword">module</span>.GlideModule&gt; iterator = manifestModules.iterator();</span><br><span class="line">     <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">       com.bumptech.glide.<span class="keyword">module</span>.GlideModule current = iterator.next();</span><br><span class="line">       <span class="keyword">if</span> (!excludedModuleClasses.contains(current.getClass())) &#123;</span><br><span class="line">         <span class="keyword">continue</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">if</span> (Log.isLoggable(TAG, Log.DEBUG)) &#123;</span><br><span class="line">         Log.d(TAG, <span class="string">"AppGlideModule excludes manifest GlideModule: "</span> + current);</span><br><span class="line">       &#125;</span><br><span class="line">       iterator.remove();</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> (Log.isLoggable(TAG, Log.DEBUG)) &#123;</span><br><span class="line">     <span class="keyword">for</span> (com.bumptech.glide.<span class="keyword">module</span>.GlideModule glideModule : manifestModules) &#123;</span><br><span class="line">       Log.d(TAG, <span class="string">"Discovered GlideModule from manifest: "</span> + glideModule.getClass());</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   RequestManagerRetriever.RequestManagerFactory factory =</span><br><span class="line">       annotationGeneratedModule != <span class="keyword">null</span></span><br><span class="line">           ? annotationGeneratedModule.getRequestManagerFactory()</span><br><span class="line">           : <span class="keyword">null</span>;</span><br><span class="line">   builder.setRequestManagerFactory(factory);</span><br><span class="line">   <span class="comment">// 调用GlideModule的applyOptions方法给GlideBuilder设置相关参数</span></span><br><span class="line">   <span class="keyword">for</span> (com.bumptech.glide.<span class="keyword">module</span>.GlideModule <span class="keyword">module</span> : manifestModules) &#123;</span><br><span class="line">     <span class="keyword">module</span>.applyOptions(applicationContext, builder);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">// 调用annotationGeneratedModule的applyOptions方法给GlideBuilder设置相关参数</span></span><br><span class="line">   <span class="keyword">if</span> (annotationGeneratedModule != <span class="keyword">null</span>) &#123;</span><br><span class="line">     annotationGeneratedModule.applyOptions(applicationContext, builder);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//调用GlideBuilder.build方法创建Glide对象</span></span><br><span class="line">   Glide glide = builder.build(applicationContext);</span><br><span class="line">   <span class="keyword">for</span> (com.bumptech.glide.<span class="keyword">module</span>.GlideModule <span class="keyword">module</span> : manifestModules) &#123;</span><br><span class="line">     <span class="keyword">try</span> &#123;</span><br><span class="line">       <span class="keyword">module</span>.registerComponents(applicationContext, glide, glide.registry);</span><br><span class="line">     &#125; <span class="keyword">catch</span> (AbstractMethodError e) &#123;</span><br><span class="line">       <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(</span><br><span class="line">           <span class="string">"Attempting to register a Glide v3 module. If you see this, you or one of your"</span></span><br><span class="line">               + <span class="string">" dependencies may be including Glide v3 even though you're using Glide v4."</span></span><br><span class="line">               + <span class="string">" You'll need to find and remove (or update) the offending dependency."</span></span><br><span class="line">               + <span class="string">" The v3 module name is: "</span></span><br><span class="line">               + <span class="keyword">module</span>.getClass().getName(),</span><br><span class="line">           e);</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">if</span> (annotationGeneratedModule != <span class="keyword">null</span>) &#123;</span><br><span class="line">     annotationGeneratedModule.registerComponents(applicationContext, glide, glide.registry);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//注册Application的ComponentCallback回调</span></span><br><span class="line">   applicationContext.registerComponentCallbacks(glide);</span><br><span class="line">   <span class="comment">//最终给单例对象进行赋值</span></span><br><span class="line">   Glide.glide = glide;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>可以看出，Glide对象创建过程主要是传入GlideBuilder以及GeneratedAppGlideModule，通过调用GeneratedAppGlideModule的相关方法进行Glide功能扩展，在中间也对v3版本进行了兼容性处理，在最后还注册了Application的ComponentCallback回调，注册这个回调是用来干嘛的呢？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Glide</span> <span class="keyword">implements</span> <span class="title">ComponentCallbacks2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onTrimMemory</span><span class="params">(<span class="keyword">int</span> level)</span> </span>&#123;</span><br><span class="line">    trimMemory(level);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onConfigurationChanged</span><span class="params">(Configuration newConfig)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Do nothing.</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onLowMemory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    clearMemory();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Clears as much memory as possible.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@see</span> android.content.ComponentCallbacks#onLowMemory()</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@see</span> android.content.ComponentCallbacks2#onLowMemory()</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clearMemory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Engine asserts this anyway when removing resources, fail faster and consistently</span></span><br><span class="line">    Util.assertMainThread();</span><br><span class="line">    <span class="comment">// memory cache needs to be cleared before bitmap pool to clear re-pooled Bitmaps too. See #687.</span></span><br><span class="line">    memoryCache.clearMemory();</span><br><span class="line">    bitmapPool.clearMemory();</span><br><span class="line">    arrayPool.clearMemory();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Clears some memory with the exact amount depending on the given level.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@see</span> android.content.ComponentCallbacks2#onTrimMemory(int)</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">trimMemory</span><span class="params">(<span class="keyword">int</span> level)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Engine asserts this anyway when removing resources, fail faster and consistently</span></span><br><span class="line">    Util.assertMainThread();</span><br><span class="line">    <span class="comment">// Request managers need to be trimmed before the caches and pools, in order for the latter to</span></span><br><span class="line">    <span class="comment">// have the most benefit.</span></span><br><span class="line">    <span class="keyword">for</span> (RequestManager manager : managers) &#123;</span><br><span class="line">      manager.onTrimMemory(level);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// memory cache needs to be trimmed before bitmap pool to trim re-pooled Bitmaps too. See #687.</span></span><br><span class="line">    memoryCache.trimMemory(level);</span><br><span class="line">    bitmapPool.trimMemory(level);</span><br><span class="line">    arrayPool.trimMemory(level);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>可以看出，Glide在接收到TriMemory以及lowMemory回调的时候会做一些内存清理操作，降低内存的消耗，这个思想是值得借鉴的。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这篇文章主要对Glide功能扩展及Glide对象创建进行了简要分析。通过这篇文章相信大家对Glide的扩展功能以及对其对象创建过程有了一定的了解，欢迎继续学习：<a href>Glide系列之——Glide的Request执行流程及回调</a></p><p>本篇文章到此就结束了，感谢耐心阅读，不对之处，敬请指出～</p>]]></content>
    
    <summary type="html">
    
      Glide系列之——Glide对象创建及功能扩展
    
    </summary>
    
      <category term="Android源码解析" scheme="http://easyliu.com/categories/Android%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
    
    
      <category term="Android" scheme="http://easyliu.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Glide系列之——初识Glide</title>
    <link href="http://easyliu.com/2021/01/16/android_source_analysis/glide_use/"/>
    <id>http://easyliu.com/2021/01/16/android_source_analysis/glide_use/</id>
    <published>2021-01-16T07:02:12.000Z</published>
    <updated>2022-02-17T07:17:37.465Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Glide是一个优秀的开源图片加载组件，广泛应用在各大App当中，并且也是Google官方强力推荐的一个图片加载库，根据<a href="https://github.com/bumptech/glide/tree/master" target="_blank" rel="noopener">官方文档介绍</a>：</p><p>Glide是一个快速高效的Android图片加载库，注重于平滑的滚动。Glide提供了易用的API，高性能、可扩展的图片解码管道（decode pipeline），以及自动的资源池技术。Glide 支持拉取，解码和展示视频快照，图片，和GIF动画。Glide的Api是如此的灵活，开发者甚至可以插入和替换成自己喜爱的任何网络栈。默认情况下，Glide使用的是一个定制化的基于HttpUrlConnection的栈，但同时也提供了与Google Volley和Square OkHttp快速集成的工具库。虽然Glide 的主要目标是让任何形式的图片列表的滚动尽可能地变得更快、更平滑，但实际上，Glide几乎能满足你对远程图片的拉取/缩放/显示的一切需求。</p><p>可以看出，Glide功能是非常强大的。这么优秀的开源组件，肯定是非常值得学习的。</p><p>本系列主要是分为以下几个部分：</p><p>1、<a href="https://easyliu-ly.github.io/2021/01/16/android_source_analysis/glide_use/" target="_blank" rel="noopener">Glide系列之——初识Glide</a></p><p>2、<a href="https://easyliu-ly.github.io/2021/02/07/android_source_analysis/glide_new/" target="_blank" rel="noopener">Glide系列之——Glide对象创建及功能扩展</a></p><p>3、Glide系列之——Glide的Request执行流程及回调</p><p>4、Glide系列之——Glide缓存机制</p><p>5、Glide系列之——图片变换功能Transformation</p><p><font size="3" color="red">这篇文章为第一篇：Glide系列之——初识Glide</font></p><h2 id="接入及使用"><a href="#接入及使用" class="headerlink" title="接入及使用"></a>接入及使用</h2><p>首先我们来看下Glide的接入以及使用方式，接入方式也比较简单，通过gradle引入即可：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">repositories &#123;</span><br><span class="line">  google()</span><br><span class="line">  jcenter()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">  implementation <span class="string">'com.github.bumptech.glide:glide:4.11.0'</span></span><br><span class="line">  annotationProcessor <span class="string">'com.github.bumptech.glide:compiler:4.11.0'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Glide最吸引人的莫过于其使用方式了：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Glide.with(<span class="keyword">this</span>)</span><br><span class="line">        .load(<span class="string">"http://goo.gl/gEgYUd"</span>)</span><br><span class="line">        .centerCrop() <span class="comment">//centerCrop缩放模式</span></span><br><span class="line">        .circleCrop() <span class="comment">//裁剪为圆形</span></span><br><span class="line">        .placeholder(ColorDrawable(Color.RED)) <span class="comment">//占位drawable</span></span><br><span class="line">        .into(img);</span><br></pre></td></tr></table></figure><p>使用链式调用的方式，使用起来非常方便简洁。短短这几行代码的背后，glide做了大量的工作，因此glide代码量也是相当多的，在进行源码分析的时候只会对整个框架流程进行分析，不会涉及到具体代码细节的分析，感兴趣的同学可以把源码下载下来进行仔细研读</p><p>接下来分析一下Glide.with方法里面做了一些什么事情</p><h2 id="Glide-with"><a href="#Glide-with" class="headerlink" title="Glide.with"></a>Glide.with</h2><p>可以看出，Glide.with有挺多重载方法的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@NonNull</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> RequestManager <span class="title">with</span><span class="params">(@NonNull Context context)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> getRetriever(context).get(context);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@NonNull</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> RequestManager <span class="title">with</span><span class="params">(@NonNull Activity activity)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> getRetriever(activity).get(activity);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@NonNull</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> RequestManager <span class="title">with</span><span class="params">(@NonNull FragmentActivity activity)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> getRetriever(activity).get(activity);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@NonNull</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> RequestManager <span class="title">with</span><span class="params">(@NonNull Fragment fragment)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> getRetriever(fragment.getContext()).get(fragment);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"deprecation"</span>)</span><br><span class="line"><span class="meta">@Deprecated</span></span><br><span class="line"><span class="meta">@NonNull</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> RequestManager <span class="title">with</span><span class="params">(@NonNull android.app.Fragment fragment)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> getRetriever(fragment.getActivity()).get(fragment);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@NonNull</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> RequestManager <span class="title">with</span><span class="params">(@NonNull View view)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> getRetriever(view.getContext()).get(view);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以传入FragmentActivity、Activity、Context、Fragment以及View，然后都会调用getRetriever(@Nullable Context context)来获取到一个RequestManagerRetriever对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@NonNull</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> RequestManagerRetriever <span class="title">getRetriever</span><span class="params">(@Nullable Context context)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// Context could be null for other reasons (ie the user passes in null), but in practice it will</span></span><br><span class="line">  <span class="comment">// only occur due to errors with the Fragment lifecycle.</span></span><br><span class="line">  Preconditions.checkNotNull(</span><br><span class="line">      context,</span><br><span class="line">      <span class="string">"You cannot start a load on a not yet attached View or a Fragment where getActivity() "</span></span><br><span class="line">          + <span class="string">"returns null (which usually occurs when getActivity() is called before the Fragment "</span></span><br><span class="line">          + <span class="string">"is attached or after the Fragment is destroyed)."</span>);</span><br><span class="line">  <span class="keyword">return</span> Glide.get(context).getRequestManagerRetriever();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Glide.get(context)方法用于获取Glide对象，Glide是一个单例，全局只有一个，由于构造Glide对象比较复杂，在后续的文章中会进行详细分析。</p><h2 id="RequestManagerRetriever"><a href="#RequestManagerRetriever" class="headerlink" title="RequestManagerRetriever"></a>RequestManagerRetriever</h2><p>获取到RequestManagerRetriever之后，就会调用其get方法返回一个RequestManager，同样<br>RequestManagerRetriever.get方法也是有很多重载方法的,也是可以传入FragmentActivity、Activity、Context、Fragment以及View参数的，我们来挑一个复杂点的：<br>public RequestManager get(@NonNull View view)来看下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@NonNull</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> RequestManager <span class="title">get</span><span class="params">(@NonNull View view)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">if</span> (Util.isOnBackgroundThread()) &#123;</span><br><span class="line">     <span class="keyword">return</span> get(view.getContext().getApplicationContext());</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   Preconditions.checkNotNull(view);</span><br><span class="line">   Preconditions.checkNotNull(</span><br><span class="line">       view.getContext(), <span class="string">"Unable to obtain a request manager for a view without a Context"</span>);</span><br><span class="line">   Activity activity = findActivity(view.getContext());</span><br><span class="line">   <span class="comment">// The view might be somewhere else, like a service.</span></span><br><span class="line">   <span class="keyword">if</span> (activity == <span class="keyword">null</span>) &#123;</span><br><span class="line">     <span class="keyword">return</span> get(view.getContext().getApplicationContext());</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// Support Fragments.</span></span><br><span class="line">   <span class="comment">// Although the user might have non-support Fragments attached to FragmentActivity, searching</span></span><br><span class="line">   <span class="comment">// for non-support Fragments is so expensive pre O and that should be rare enough that we</span></span><br><span class="line">   <span class="comment">// prefer to just fall back to the Activity directly.</span></span><br><span class="line">   <span class="keyword">if</span> (activity <span class="keyword">instanceof</span> FragmentActivity) &#123;</span><br><span class="line">     Fragment fragment = findSupportFragment(view, (FragmentActivity) activity);</span><br><span class="line">     <span class="keyword">return</span> fragment != <span class="keyword">null</span> ? get(fragment) : get((FragmentActivity) activity);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// Standard Fragments.</span></span><br><span class="line">   android.app.Fragment fragment = findFragment(view, activity);</span><br><span class="line">   <span class="keyword">if</span> (fragment == <span class="keyword">null</span>) &#123;</span><br><span class="line">     <span class="keyword">return</span> get(activity);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> get(fragment);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="meta">@NonNull</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> RequestManager <span class="title">get</span><span class="params">(@NonNull Context context)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">if</span> (context == <span class="keyword">null</span>) &#123;</span><br><span class="line">     <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"You cannot start a load on a null Context"</span>);</span><br><span class="line">   &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Util.isOnMainThread() &amp;&amp; !(context <span class="keyword">instanceof</span> Application)) &#123;</span><br><span class="line">     <span class="keyword">if</span> (context <span class="keyword">instanceof</span> FragmentActivity) &#123;</span><br><span class="line">       <span class="keyword">return</span> get((FragmentActivity) context);</span><br><span class="line">     &#125; <span class="keyword">else</span> <span class="keyword">if</span> (context <span class="keyword">instanceof</span> Activity) &#123;</span><br><span class="line">       <span class="keyword">return</span> get((Activity) context);</span><br><span class="line">     &#125; <span class="keyword">else</span> <span class="keyword">if</span> (context <span class="keyword">instanceof</span> ContextWrapper</span><br><span class="line">         <span class="comment">// Only unwrap a ContextWrapper if the baseContext has a non-null application context.</span></span><br><span class="line">         <span class="comment">// Context#createPackageContext may return a Context without an Application instance,</span></span><br><span class="line">         <span class="comment">// in which case a ContextWrapper may be used to attach one.</span></span><br><span class="line">         &amp;&amp; ((ContextWrapper) context).getBaseContext().getApplicationContext() != <span class="keyword">null</span>) &#123;</span><br><span class="line">       <span class="keyword">return</span> get(((ContextWrapper) context).getBaseContext());</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> getApplicationManager(context);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>可以看出，主要是分为几部分：</p><p>1、如果是子线程，会调用get(context)方法，最终会调用getApplicationManager(context)方法</p><p>2、然后会进行View以及View.geContext()的合法性检查，不合法就会抛出异常。不过这里写的有点问题：如果view.getContext()返回null的话，那么在第一步就会crash了，这里是不是可以提一个issue了 ^_^</p><p>3、接下来会通过view.getContext找到对应的Activity，如果找不到对应的Activity，同样也是走getApplicationManager(context)逻辑。这里通过context找activity是我们日常开发中经常会遇到的问题，可以学习一下实现方式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Activity <span class="title">findActivity</span><span class="params">(@NonNull Context context)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (context <span class="keyword">instanceof</span> Activity) &#123;</span><br><span class="line">    <span class="keyword">return</span> (Activity) context;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (context <span class="keyword">instanceof</span> ContextWrapper) &#123;</span><br><span class="line">    <span class="keyword">return</span> findActivity(((ContextWrapper) context).getBaseContext());</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4、如果acivity属于FragmentAcivity类型，就会找到对应的supportFragment。在这段代码上有一段注释，大概意思是：尽管会有非support类型的Fragment会在FragmentActivity上面，但是找non-support Fragments 非常耗时且这种case非常少，因此就直接使用FragmentActivity进行判断了。如果找到的support fragment不为空，就会调用get(fragment)方法，否则调用get(fragmentActivity)方法</p><p>5、如果activty不属于FragmentActivity类型，就会走non-support Fragment逻辑</p><p>接下来我们来看下get(support fragment)方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@NonNull</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> RequestManager <span class="title">get</span><span class="params">(@NonNull Fragment fragment)</span> </span>&#123;</span><br><span class="line">  Preconditions.checkNotNull(</span><br><span class="line">      fragment.getContext(),</span><br><span class="line">      <span class="string">"You cannot start a load on a fragment before it is attached or after it is destroyed"</span>);</span><br><span class="line">  <span class="keyword">if</span> (Util.isOnBackgroundThread()) &#123;</span><br><span class="line">    <span class="keyword">return</span> get(fragment.getContext().getApplicationContext());</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    FragmentManager fm = fragment.getChildFragmentManager();</span><br><span class="line">    <span class="keyword">return</span> supportFragmentGet(fragment.getContext(), fm, fragment, fragment.isVisible());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看出，如果是主线程，会走supportFragmentGet方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@NonNull</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> RequestManager <span class="title">supportFragmentGet</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    @NonNull Context context,</span></span></span><br><span class="line"><span class="function"><span class="params">    @NonNull FragmentManager fm,</span></span></span><br><span class="line"><span class="function"><span class="params">    @Nullable Fragment parentHint,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">boolean</span> isParentVisible)</span> </span>&#123;</span><br><span class="line">  SupportRequestManagerFragment current =</span><br><span class="line">      getSupportRequestManagerFragment(fm, parentHint, isParentVisible);</span><br><span class="line">  RequestManager requestManager = current.getRequestManager();</span><br><span class="line">  <span class="keyword">if</span> (requestManager == <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="comment">// TODO(b/27524013): Factor out this Glide.get() call.</span></span><br><span class="line">    Glide glide = Glide.get(context);</span><br><span class="line">    requestManager =</span><br><span class="line">        factory.build(</span><br><span class="line">            glide, current.getGlideLifecycle(), current.getRequestManagerTreeNode(), context);</span><br><span class="line">    current.setRequestManager(requestManager);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> requestManager;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个方法里面，会通过getSupportRequestManagerFragment方法创建一个SupportRequestManagerFragment，然后里面会有一个RequestManager对象，如果这个RequestManager对象为null，会通过factory新建一个RequestManager然后塞给这个SupportRequestManagerFragment。注意一下，在通过factory创建RequestManager的时候，传入一个参数类型为:ActivityFragmentLifecycle,并且是从SupportRequestManagerFragment里面获取的，说明SupportRequestManagerFragment里面持有了一个ActivityFragmentLifecycle对象，根据这个名字大概可以猜出来是跟生命周期相关的。</p><p>在Glide官方文档里面也说了，Glide会自动感应页面的生命周期，在页面pause和resume的时候会自动起停load任务。</p><p>那么大概就可以看出RequestManager里面会通过这个ActivityFragmentLifecycle来感应生命周期的变化，而由于SupportRequestManagerFragment持有ActivityFragmentLifecycle对象，因此整个生命周期回调链路应该就是：</p><blockquote><p>SupportRequestManagerFragment -&gt; ActivityFragmentLifecycle  -&gt; RequestManager</p></blockquote><p>接下来我们来看下ActivityFragmentLifecycle：</p><h2 id="ActivityFragmentLifecycle"><a href="#ActivityFragmentLifecycle" class="headerlink" title="ActivityFragmentLifecycle"></a>ActivityFragmentLifecycle</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ActivityFragmentLifecycle</span> <span class="keyword">implements</span> <span class="title">Lifecycle</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Set&lt;LifecycleListener&gt; lifecycleListeners =</span><br><span class="line">      Collections.newSetFromMap(<span class="keyword">new</span> WeakHashMap&lt;LifecycleListener, Boolean&gt;());</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">boolean</span> isStarted;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">boolean</span> isDestroyed;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addListener</span><span class="params">(@NonNull LifecycleListener listener)</span> </span>&#123;</span><br><span class="line">    lifecycleListeners.add(listener);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (isDestroyed) &#123;</span><br><span class="line">      listener.onDestroy();</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isStarted) &#123;</span><br><span class="line">      listener.onStart();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      listener.onStop();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeListener</span><span class="params">(@NonNull LifecycleListener listener)</span> </span>&#123;</span><br><span class="line">    lifecycleListeners.remove(listener);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">onStart</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    isStarted = <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">for</span> (LifecycleListener lifecycleListener : Util.getSnapshot(lifecycleListeners)) &#123;</span><br><span class="line">      lifecycleListener.onStart();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">onStop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    isStarted = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">for</span> (LifecycleListener lifecycleListener : Util.getSnapshot(lifecycleListeners)) &#123;</span><br><span class="line">      lifecycleListener.onStop();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    isDestroyed = <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">for</span> (LifecycleListener lifecycleListener : Util.getSnapshot(lifecycleListeners)) &#123;</span><br><span class="line">      lifecycleListener.onDestroy();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Lifecycle</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">addListener</span><span class="params">(@NonNull LifecycleListener listener)</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">removeListener</span><span class="params">(@NonNull LifecycleListener listener)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">LifecycleListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">onStart</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">onStop</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看出ActivityFragmentLifecycle实现了一个Lifecycle接口，里面有addListener以及removeListener两个方法用于添加LifecycleListener接口，在ActivityFragmentLifecycle里面还有onStart、onStop以及onDestory方法，这些方法应该是供SupportRequestManagerFragment调用的。接下来看下SupportRequestManagerFragment的代码：</p><h2 id="SupportRequestManagerFragment"><a href="#SupportRequestManagerFragment" class="headerlink" title="SupportRequestManagerFragment"></a>SupportRequestManagerFragment</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SupportRequestManagerFragment</span> <span class="keyword">extends</span> <span class="title">Fragment</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"SupportRMFragment"</span>;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> ActivityFragmentLifecycle lifecycle;</span><br><span class="line"> </span><br><span class="line">  <span class="meta">@Nullable</span> <span class="keyword">private</span> RequestManager requestManager;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">SupportRequestManagerFragment</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>(<span class="keyword">new</span> ActivityFragmentLifecycle());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@VisibleForTesting</span></span><br><span class="line">  <span class="meta">@SuppressLint</span>(<span class="string">"ValidFragment"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">SupportRequestManagerFragment</span><span class="params">(@NonNull ActivityFragmentLifecycle lifecycle)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.lifecycle = lifecycle;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Sets the current &#123;<span class="doctag">@link</span> com.bumptech.glide.RequestManager&#125;.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> requestManager The manager to put.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRequestManager</span><span class="params">(@Nullable RequestManager requestManager)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.requestManager = requestManager;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@NonNull</span></span><br><span class="line">  <span class="function">ActivityFragmentLifecycle <span class="title">getGlideLifecycle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> lifecycle;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/** Returns the current &#123;<span class="doctag">@link</span> com.bumptech.glide.RequestManager&#125; or null if none is put. */</span></span><br><span class="line">  <span class="meta">@Nullable</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> RequestManager <span class="title">getRequestManager</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> requestManager;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">//............</span></span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStart</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onStart();</span><br><span class="line">    lifecycle.onStart();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onStop();</span><br><span class="line">    lifecycle.onStop();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onDestroy();</span><br><span class="line">    lifecycle.onDestroy();</span><br><span class="line">    unregisterFragmentWithRoot();</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">//.............</span></span><br></pre></td></tr></table></figure><p>可以看出在SupportRequestManagerFragment的生命周期方法里面会自动调用ActivityFragmentLifecycle对应的方法。</p><p>以上分析了fragment生命周期感应的执行流程。既然是生命周期监听，肯定是有地方会调用Lifecycle的addListener方法来监听页面生命周期，由于RequestManager创建的时候传入了Lifecycle，因此接下来看下RequestManager的构造方法:</p><h2 id="RequestManager"><a href="#RequestManager" class="headerlink" title="RequestManager"></a>RequestManager</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">RequestManager</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">      @NonNull Glide glide,</span></span></span><br><span class="line"><span class="function"><span class="params">      @NonNull Lifecycle lifecycle,</span></span></span><br><span class="line"><span class="function"><span class="params">      @NonNull RequestManagerTreeNode treeNode,</span></span></span><br><span class="line"><span class="function"><span class="params">      @NonNull Context context)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>(</span><br><span class="line">        glide,</span><br><span class="line">        lifecycle,</span><br><span class="line">        treeNode,</span><br><span class="line">        <span class="keyword">new</span> RequestTracker(),</span><br><span class="line">        glide.getConnectivityMonitorFactory(),</span><br><span class="line">        context);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Our usage is safe here.</span></span><br><span class="line">  <span class="meta">@SuppressWarnings</span>(<span class="string">"PMD.ConstructorCallsOverridableMethod"</span>)</span><br><span class="line">  RequestManager(</span><br><span class="line">      Glide glide,</span><br><span class="line">      Lifecycle lifecycle,</span><br><span class="line">      RequestManagerTreeNode treeNode,</span><br><span class="line">      RequestTracker requestTracker,</span><br><span class="line">      ConnectivityMonitorFactory factory,</span><br><span class="line">      Context context) &#123;</span><br><span class="line">    <span class="keyword">this</span>.glide = glide;</span><br><span class="line">    <span class="keyword">this</span>.lifecycle = lifecycle;</span><br><span class="line">    <span class="keyword">this</span>.treeNode = treeNode;</span><br><span class="line">    <span class="keyword">this</span>.requestTracker = requestTracker;</span><br><span class="line">    <span class="keyword">this</span>.context = context;</span><br><span class="line"></span><br><span class="line">    connectivityMonitor =</span><br><span class="line">        factory.build(</span><br><span class="line">            context.getApplicationContext(),</span><br><span class="line">            <span class="keyword">new</span> RequestManagerConnectivityListener(requestTracker));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// If we're the application level request manager, we may be created on a background thread.</span></span><br><span class="line">    <span class="comment">// In that case we cannot risk synchronously pausing or resuming requests, so we hack around the</span></span><br><span class="line">    <span class="comment">// issue by delaying adding ourselves as a lifecycle listener by posting to the main thread.</span></span><br><span class="line">    <span class="comment">// This should be entirely safe.</span></span><br><span class="line">    <span class="keyword">if</span> (Util.isOnBackgroundThread()) &#123;</span><br><span class="line">      mainHandler.post(addSelfToLifecycle);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      lifecycle.addListener(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    lifecycle.addListener(connectivityMonitor);</span><br><span class="line"></span><br><span class="line">    defaultRequestListeners =</span><br><span class="line">        <span class="keyword">new</span> CopyOnWriteArrayList&lt;&gt;(glide.getGlideContext().getDefaultRequestListeners());</span><br><span class="line">    setRequestOptions(glide.getGlideContext().getDefaultRequestOptions());</span><br><span class="line"></span><br><span class="line">    glide.registerRequestManager(<span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>在构造方法里面会先lifecycle.addListener(this)注册生命周期监听，来看下监听回调里面干啥了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">onStart</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   resumeRequests();</span><br><span class="line">   targetTracker.onStart();</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">onStop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   pauseRequests();</span><br><span class="line">   targetTracker.onStop();</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   targetTracker.onDestroy();</span><br><span class="line">   <span class="keyword">for</span> (Target&lt;?&gt; target : targetTracker.getAll()) &#123;</span><br><span class="line">     clear(target);</span><br><span class="line">   &#125;</span><br><span class="line">   targetTracker.clear();</span><br><span class="line">   requestTracker.clearRequests();</span><br><span class="line">   lifecycle.removeListener(<span class="keyword">this</span>);</span><br><span class="line">   lifecycle.removeListener(connectivityMonitor);</span><br><span class="line">   mainHandler.removeCallbacks(addSelfToLifecycle);</span><br><span class="line">   glide.unregisterRequestManager(<span class="keyword">this</span>);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>可以看出在onStart的时候Glide会自动重启request，然后在onStop的时候会自动暂停request，以及在onDestory里面会进行一些清理操作。</p><h2 id="ConnectivityMonitor"><a href="#ConnectivityMonitor" class="headerlink" title="ConnectivityMonitor"></a>ConnectivityMonitor</h2><p>在构造函数里面同时注册了一个ConnectivityMonitor网络变化监听器，这个网络变化监听器是用来干嘛的呢？来看下其实现类DefaultConnectivityMonitor:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultConnectivityMonitor</span> <span class="keyword">implements</span> <span class="title">ConnectivityMonitor</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"ConnectivityMonitor"</span>;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Context context;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@SuppressWarnings</span>(<span class="string">"WeakerAccess"</span>)</span><br><span class="line">  <span class="meta">@Synthetic</span></span><br><span class="line">  <span class="keyword">final</span> ConnectivityListener listener;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@SuppressWarnings</span>(<span class="string">"WeakerAccess"</span>)</span><br><span class="line">  <span class="meta">@Synthetic</span></span><br><span class="line">  <span class="keyword">boolean</span> isConnected;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">boolean</span> isRegistered;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> BroadcastReceiver connectivityReceiver =</span><br><span class="line">      <span class="keyword">new</span> BroadcastReceiver() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceive</span><span class="params">(@NonNull Context context, Intent intent)</span> </span>&#123;</span><br><span class="line">          <span class="keyword">boolean</span> wasConnected = isConnected;</span><br><span class="line">          isConnected = isConnected(context);</span><br><span class="line">          <span class="keyword">if</span> (wasConnected != isConnected) &#123;</span><br><span class="line">            <span class="keyword">if</span> (Log.isLoggable(TAG, Log.DEBUG)) &#123;</span><br><span class="line">              Log.d(TAG, <span class="string">"connectivity changed, isConnected: "</span> + isConnected);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            listener.onConnectivityChanged(isConnected);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;;</span><br><span class="line"></span><br><span class="line">  DefaultConnectivityMonitor(<span class="meta">@NonNull</span> Context context, <span class="meta">@NonNull</span> ConnectivityListener listener) &#123;</span><br><span class="line">    <span class="keyword">this</span>.context = context.getApplicationContext();</span><br><span class="line">    <span class="keyword">this</span>.listener = listener;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">register</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (isRegistered) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Initialize isConnected.</span></span><br><span class="line">    isConnected = isConnected(context);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// See #1405</span></span><br><span class="line">      context.registerReceiver(</span><br><span class="line">          connectivityReceiver, <span class="keyword">new</span> IntentFilter(ConnectivityManager.CONNECTIVITY_ACTION));</span><br><span class="line">      isRegistered = <span class="keyword">true</span>;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (SecurityException e) &#123;</span><br><span class="line">      <span class="comment">// See #1417, registering the receiver can throw SecurityException.</span></span><br><span class="line">      <span class="keyword">if</span> (Log.isLoggable(TAG, Log.WARN)) &#123;</span><br><span class="line">        Log.w(TAG, <span class="string">"Failed to register"</span>, e);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">unregister</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!isRegistered) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    context.unregisterReceiver(connectivityReceiver);</span><br><span class="line">    isRegistered = <span class="keyword">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@SuppressWarnings</span>(<span class="string">"WeakerAccess"</span>)</span><br><span class="line">  <span class="meta">@Synthetic</span></span><br><span class="line">  <span class="comment">// Permissions are checked in the factory instead.</span></span><br><span class="line">  <span class="meta">@SuppressLint</span>(<span class="string">"MissingPermission"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">boolean</span> <span class="title">isConnected</span><span class="params">(@NonNull Context context)</span> </span>&#123;</span><br><span class="line">    ConnectivityManager connectivityManager =</span><br><span class="line">        Preconditions.checkNotNull(</span><br><span class="line">            (ConnectivityManager) context.getSystemService(Context.CONNECTIVITY_SERVICE));</span><br><span class="line">    NetworkInfo networkInfo;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      networkInfo = connectivityManager.getActiveNetworkInfo();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (RuntimeException e) &#123;</span><br><span class="line">      <span class="comment">// #1405 shows that this throws a SecurityException.</span></span><br><span class="line">      <span class="comment">// b/70869360 shows that this throws NullPointerException on APIs 22, 23, and 24.</span></span><br><span class="line">      <span class="comment">// b/70869360 also shows that this throws RuntimeException on API 24 and 25.</span></span><br><span class="line">      <span class="keyword">if</span> (Log.isLoggable(TAG, Log.WARN)) &#123;</span><br><span class="line">        Log.w(TAG, <span class="string">"Failed to determine connectivity status when connectivity changed"</span>, e);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// Default to true;</span></span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> networkInfo != <span class="keyword">null</span> &amp;&amp; networkInfo.isConnected();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStart</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    register();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    unregister();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Do nothing.</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>可以看出其主要做的事情是在onStart的时候会注册一个广播，当网络状态发生改变的时候会通过ConnectivityListener接口通知出去，然后在onStop的时候会反注册广播。来看下ConnectivityListener接口的实现类:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestManagerConnectivityListener</span></span></span><br><span class="line"><span class="class">    <span class="keyword">implements</span> <span class="title">ConnectivityMonitor</span>.<span class="title">ConnectivityListener</span> </span>&#123;</span><br><span class="line">  <span class="meta">@GuardedBy</span>(<span class="string">"RequestManager.this"</span>)</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> RequestTracker requestTracker;</span><br><span class="line"></span><br><span class="line">  RequestManagerConnectivityListener(<span class="meta">@NonNull</span> RequestTracker requestTracker) &#123;</span><br><span class="line">    <span class="keyword">this</span>.requestTracker = requestTracker;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onConnectivityChanged</span><span class="params">(<span class="keyword">boolean</span> isConnected)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (isConnected) &#123;</span><br><span class="line">      <span class="keyword">synchronized</span> (RequestManager.<span class="keyword">this</span>) &#123;</span><br><span class="line">        requestTracker.restartRequests();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看出这里做了一件事情：当网络重新链接上的时候会自动重启request来加载图片。</p><blockquote><p>可以看出Glide里面对页面的生命周期以及网络变化均进行了自动监听，不需要业务接入方再做额外的逻辑，这个也是Glide组件相比于其他图片组件的优势之一。这种思想非常值得借鉴，可以用于我们的日常开发当中。关于生命周期自动监听，MVVM框架中LiveData就是使用这一思想来避免内存泄漏问题及实现LifecycleOwner变成active自动实现observer的notify功能。</p></blockquote><p>到这里，我们就获取到了一个RequestManager对象，接下来看下load方法：</p><h2 id="RequestManager-load"><a href="#RequestManager-load" class="headerlink" title="RequestManager.load"></a>RequestManager.load</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">ModelTypes</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">  <span class="meta">@NonNull</span></span><br><span class="line">  <span class="meta">@CheckResult</span></span><br><span class="line">  <span class="function">T <span class="title">load</span><span class="params">(@Nullable Bitmap bitmap)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@NonNull</span></span><br><span class="line">  <span class="meta">@CheckResult</span></span><br><span class="line">  <span class="function">T <span class="title">load</span><span class="params">(@Nullable Drawable drawable)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@NonNull</span></span><br><span class="line">  <span class="meta">@CheckResult</span></span><br><span class="line">  <span class="function">T <span class="title">load</span><span class="params">(@Nullable String string)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@NonNull</span></span><br><span class="line">  <span class="meta">@CheckResult</span></span><br><span class="line">  <span class="function">T <span class="title">load</span><span class="params">(@Nullable Uri uri)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@NonNull</span></span><br><span class="line">  <span class="meta">@CheckResult</span></span><br><span class="line">  <span class="function">T <span class="title">load</span><span class="params">(@Nullable File file)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@NonNull</span></span><br><span class="line">  <span class="meta">@CheckResult</span></span><br><span class="line">  <span class="function">T <span class="title">load</span><span class="params">(@RawRes @DrawableRes @Nullable Integer resourceId)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Deprecated</span></span><br><span class="line">  <span class="meta">@CheckResult</span></span><br><span class="line">  <span class="function">T <span class="title">load</span><span class="params">(@Nullable URL url)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@NonNull</span></span><br><span class="line">  <span class="meta">@CheckResult</span></span><br><span class="line">  <span class="function">T <span class="title">load</span><span class="params">(@Nullable <span class="keyword">byte</span>[] model)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@NonNull</span></span><br><span class="line">  <span class="meta">@CheckResult</span></span><br><span class="line">  <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">  <span class="function">T <span class="title">load</span><span class="params">(@Nullable Object model)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看出load方法是有很多重载方法的，可以加载各种资源类型，这里来看下load(String string)方法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@NonNull</span></span><br><span class="line">  <span class="meta">@CheckResult</span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> RequestBuilder&lt;Drawable&gt; <span class="title">load</span><span class="params">(@Nullable String string)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> asDrawable().load(string);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>load方法会先调用asDrawable方法,在RequestManager里面还有两个类似的方法asBitmap以及asGif，如下所示:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@NonNull</span></span><br><span class="line"><span class="meta">@CheckResult</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> RequestBuilder&lt;Bitmap&gt; <span class="title">asBitmap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> as(Bitmap<span class="class">.<span class="keyword">class</span>).<span class="title">apply</span>(<span class="title">DECODE_TYPE_BITMAP</span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@NonNull</span></span><br><span class="line"><span class="meta">@CheckResult</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> RequestBuilder&lt;GifDrawable&gt; <span class="title">asGif</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> as(GifDrawable<span class="class">.<span class="keyword">class</span>).<span class="title">apply</span>(<span class="title">DECODE_TYPE_GIF</span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@NonNull</span></span><br><span class="line"><span class="meta">@CheckResult</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> RequestBuilder&lt;Drawable&gt; <span class="title">asDrawable</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> as(Drawable<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@NonNull</span></span><br><span class="line"><span class="meta">@CheckResult</span></span><br><span class="line"><span class="keyword">public</span> &lt;ResourceType&gt; <span class="function">RequestBuilder&lt;ResourceType&gt; <span class="title">as</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    @NonNull Class&lt;ResourceType&gt; resourceClass)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> RequestBuilder&lt;&gt;(glide, <span class="keyword">this</span>, resourceClass, context);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看出as方法里面会生成一个RequestBuilder对象，这个resourceClass代表最终需要传给com.bumptech.glide.request.target.Target的资源类型，是Bitmap、Drawable以及GifDrawable里面的一种。关于这个Target，后续的文章会进行讲解。</p><h2 id="RequestBuilder-load"><a href="#RequestBuilder-load" class="headerlink" title="RequestBuilder.load"></a>RequestBuilder.load</h2><p>调用RequestManager的asDrawable得到RequestBuilder之后，会调用RequestBuilder的load方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@NonNull</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@CheckResult</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> RequestBuilder&lt;TranscodeType&gt; <span class="title">load</span><span class="params">(@Nullable String string)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> loadGeneric(string);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@NonNull</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> RequestBuilder&lt;TranscodeType&gt; <span class="title">loadGeneric</span><span class="params">(@Nullable Object model)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.model = model;</span><br><span class="line">  isModelSet = <span class="keyword">true</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>load方法里面主要是把传入的url给保存起来</p><h2 id="RequestBuider-into"><a href="#RequestBuider-into" class="headerlink" title="RequestBuider.into"></a>RequestBuider.into</h2><p>分析到这，我们再来回顾一下最开始我们使用Glide加载图片的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Glide.with(<span class="keyword">this</span>)</span><br><span class="line">        .load(<span class="string">"http://i.gtimg.cn/qqlive/images/20191209/i1575881814_1.jpg"</span>)</span><br><span class="line">        .centerCrop()</span><br><span class="line">        .circleCrop()</span><br><span class="line">        .placeholder(ColorDrawable(Color.RED))</span><br><span class="line">        .into(img);</span><br></pre></td></tr></table></figure><p>可以看出调用load之后，接下来会调用RequestBuilder的centerCrop和circleCrop方法，这两个是Transformation，用于设置缩放模式以及裁切为圆形，关于Transformation后续会单独讲解。</p><p>设置了Transformation之后，通过placeHolder设置一个占位的drawable，然后into方法传入ImageView，接下来看下into方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ViewTarget&lt;ImageView, TranscodeType&gt; <span class="title">into</span><span class="params">(@NonNull ImageView view)</span> </span>&#123;</span><br><span class="line">   Util.assertMainThread();</span><br><span class="line">   Preconditions.checkNotNull(view);</span><br><span class="line"></span><br><span class="line">   BaseRequestOptions&lt;?&gt; requestOptions = <span class="keyword">this</span>;</span><br><span class="line">   <span class="keyword">if</span> (!requestOptions.isTransformationSet()</span><br><span class="line">       &amp;&amp; requestOptions.isTransformationAllowed()</span><br><span class="line">       &amp;&amp; view.getScaleType() != <span class="keyword">null</span>) &#123;</span><br><span class="line">     <span class="comment">// Clone in this method so that if we use this RequestBuilder to load into a View and then</span></span><br><span class="line">     <span class="comment">// into a different target, we don't retain the transformation applied based on the previous</span></span><br><span class="line">     <span class="comment">// View's scale type.</span></span><br><span class="line">     <span class="keyword">switch</span> (view.getScaleType()) &#123;</span><br><span class="line">       <span class="keyword">case</span> CENTER_CROP:</span><br><span class="line">         requestOptions = requestOptions.clone().optionalCenterCrop();</span><br><span class="line">         <span class="keyword">break</span>;</span><br><span class="line">       <span class="keyword">case</span> CENTER_INSIDE:</span><br><span class="line">         requestOptions = requestOptions.clone().optionalCenterInside();</span><br><span class="line">         <span class="keyword">break</span>;</span><br><span class="line">       <span class="keyword">case</span> FIT_CENTER:</span><br><span class="line">       <span class="keyword">case</span> FIT_START:</span><br><span class="line">       <span class="keyword">case</span> FIT_END:</span><br><span class="line">         requestOptions = requestOptions.clone().optionalFitCenter();</span><br><span class="line">         <span class="keyword">break</span>;</span><br><span class="line">       <span class="keyword">case</span> FIT_XY:</span><br><span class="line">         requestOptions = requestOptions.clone().optionalCenterInside();</span><br><span class="line">         <span class="keyword">break</span>;</span><br><span class="line">       <span class="keyword">case</span> CENTER:</span><br><span class="line">       <span class="keyword">case</span> MATRIX:</span><br><span class="line">       <span class="keyword">default</span>:</span><br><span class="line">         <span class="comment">// Do nothing.</span></span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> into(</span><br><span class="line">       glideContext.buildImageViewTarget(view, transcodeClass),</span><br><span class="line">       <span class="comment">/*targetListener=*/</span> <span class="keyword">null</span>,</span><br><span class="line">       requestOptions,</span><br><span class="line">       Executors.mainThreadExecutor());</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>可以看出into方法必须运行在主线程，然后如果没有设置过Transformation，会根据ImageView的缩放类型设置对应的Transformation,然后调用下面的into方法开始执行图片加载：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> &lt;Y extends Target&lt;TranscodeType&gt;&gt; <span class="function">Y <span class="title">into</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">     @NonNull Y target,</span></span></span><br><span class="line"><span class="function"><span class="params">     @Nullable RequestListener&lt;TranscodeType&gt; targetListener,</span></span></span><br><span class="line"><span class="function"><span class="params">     BaseRequestOptions&lt;?&gt; options,</span></span></span><br><span class="line"><span class="function"><span class="params">     Executor callbackExecutor)</span> </span>&#123;</span><br><span class="line">   Preconditions.checkNotNull(target);</span><br><span class="line">   <span class="keyword">if</span> (!isModelSet) &#123;</span><br><span class="line">     <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"You must call #load() before calling #into()"</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   Request request = buildRequest(target, targetListener, options, callbackExecutor);</span><br><span class="line"></span><br><span class="line">   Request previous = target.getRequest();</span><br><span class="line">   <span class="keyword">if</span> (request.isEquivalentTo(previous)</span><br><span class="line">       &amp;&amp; !isSkipMemoryCacheWithCompletePreviousRequest(options, previous)) &#123;</span><br><span class="line">     <span class="comment">// If the request is completed, beginning again will ensure the result is re-delivered,</span></span><br><span class="line">     <span class="comment">// triggering RequestListeners and Targets. If the request is failed, beginning again will</span></span><br><span class="line">     <span class="comment">// restart the request, giving it another chance to complete. If the request is already</span></span><br><span class="line">     <span class="comment">// running, we can let it continue running without interruption.</span></span><br><span class="line">     <span class="keyword">if</span> (!Preconditions.checkNotNull(previous).isRunning()) &#123;</span><br><span class="line">       <span class="comment">// Use the previous request rather than the new one to allow for optimizations like skipping</span></span><br><span class="line">       <span class="comment">// setting placeholders, tracking and un-tracking Targets, and obtaining View dimensions</span></span><br><span class="line">       <span class="comment">// that are done in the individual Request.</span></span><br><span class="line">       previous.begin();</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> target;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   requestManager.clear(target);</span><br><span class="line">   target.setRequest(request);</span><br><span class="line">   requestManager.track(target, request);</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> target;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>可以看出，首先会创建一个Request对象，最后通过requestManager.track(target, request)发起request请求加载图片。</p><p>到此，这篇文章就接近尾声了，总结一下：</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这篇文章主要讲了一下Glide的使用方式、Glide生命周期及网络变化自动化监听处理，对Glide的with、load以及into方法进行了初步的分析。通过这篇文章相信大家对Glide应该有了一个整体的认识，欢迎继续学习：<a href="https://easyliu-ly.github.io/2021/02/07/android_source_analysis/glide_new/" target="_blank" rel="noopener">Glide系列之——Glide对象创建及功能扩展</a></p><p>本篇文章到此就结束了，感谢耐心阅读，不对之处，敬请指出～</p>]]></content>
    
    <summary type="html">
    
      Glide系列之——初识Glide
    
    </summary>
    
      <category term="Android源码解析" scheme="http://easyliu.com/categories/Android%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
    
    
      <category term="Android" scheme="http://easyliu.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>LeakCanary源码解析之——dump堆栈</title>
    <link href="http://easyliu.com/2020/12/26/android_source_analysis/leakcanary_dump/"/>
    <id>http://easyliu.com/2020/12/26/android_source_analysis/leakcanary_dump/</id>
    <published>2020-12-26T02:11:07.000Z</published>
    <updated>2022-02-17T07:17:50.412Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在前一篇文章<a href="https://easyliu-ly.github.io/2020/12/19/android_source_analysis/leakcanary/" target="_blank" rel="noopener">LeakCanary源码解析之——内存泄漏监测</a>当中从源码的角度对Leakcanary中内存泄漏监测原理进行了剖析。既然监测到了内存泄漏，那么接下来就是要把堆栈给dump出来，进行堆栈分析，最终以图形化的方式展示内存泄漏堆栈。本篇文章就从源码的角度分析一下dump堆栈的过程。</p><p>本次分析的源码基于：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">dependencies</span> &#123;</span><br><span class="line">  debugImplementation <span class="string">'com.squareup.leakcanary:leakcanary-android:2.5'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="InternalLeakCanary"><a href="#InternalLeakCanary" class="headerlink" title="InternalLeakCanary"></a>InternalLeakCanary</h2><p>在前一篇文章<a href="https://easyliu-ly.github.io/2020/12/19/android_source_analysis/leakcanary/" target="_blank" rel="noopener">LeakCanary源码解析之——内存泄漏监测</a>当中我们分析到，当发现可能有内存泄漏之后，就会通过OnObjectRetainedListener接口通知出去，那么我们看下谁实现了这个接口：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">internal</span> <span class="keyword">object</span> InternalLeakCanary : (Application) -&gt; <span class="built_in">Unit</span>, OnObjectRetainedListener &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">lateinit</span> <span class="keyword">var</span> heapDumpTrigger: HeapDumpTrigger</span><br><span class="line"></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">invoke</span><span class="params">(application: <span class="type">Application</span>)</span></span> &#123;</span><br><span class="line">    _application = application</span><br><span class="line"></span><br><span class="line">    checkRunningInDebuggableBuild()</span><br><span class="line"></span><br><span class="line">    AppWatcher.objectWatcher.addOnObjectRetainedListener(<span class="keyword">this</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> heapDumper = AndroidHeapDumper(application, createLeakDirectoryProvider(application))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> gcTrigger = GcTrigger.Default</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> configProvider = &#123; LeakCanary.config &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> handlerThread = HandlerThread(LEAK_CANARY_THREAD_NAME)</span><br><span class="line">    handlerThread.start()</span><br><span class="line">    <span class="keyword">val</span> backgroundHandler = Handler(handlerThread.looper)</span><br><span class="line"></span><br><span class="line">    heapDumpTrigger = HeapDumpTrigger(</span><br><span class="line">      application, backgroundHandler, AppWatcher.objectWatcher, gcTrigger, heapDumper,</span><br><span class="line">      configProvider</span><br><span class="line">    )</span><br><span class="line">    application.registerVisibilityListener &#123; applicationVisible -&gt;</span><br><span class="line">      <span class="keyword">this</span>.applicationVisible = applicationVisible</span><br><span class="line">      heapDumpTrigger.onApplicationVisibilityChanged(applicationVisible)</span><br><span class="line">    &#125;</span><br><span class="line">    registerResumedActivityListener(application)</span><br><span class="line">    <span class="comment">//添加桌面快捷方式</span></span><br><span class="line">    addDynamicShortcut(application)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// We post so that the log happens after Application.onCreate()</span></span><br><span class="line">    Handler().post &#123;</span><br><span class="line">      <span class="comment">// https://github.com/square/leakcanary/issues/1981</span></span><br><span class="line">      <span class="comment">// We post to a background handler because HeapDumpControl.iCanHasHeap() checks a shared pref</span></span><br><span class="line">      <span class="comment">// which blocks until loaded and that creates a StrictMode violation.</span></span><br><span class="line">      backgroundHandler.post &#123;</span><br><span class="line">        SharkLog.d &#123;</span><br><span class="line">          <span class="keyword">when</span> (<span class="keyword">val</span> iCanHasHeap = HeapDumpControl.iCanHasHeap()) &#123;</span><br><span class="line">            <span class="keyword">is</span> Yup -&gt; application.getString(R.string.leak_canary_heap_dump_enabled_text)</span><br><span class="line">            <span class="keyword">is</span> Nope -&gt; application.getString(</span><br><span class="line">              R.string.leak_canary_heap_dump_disabled_text, iCanHasHeap.reason()</span><br><span class="line">            )</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Suppress(<span class="meta-string">"ReturnCount"</span>)</span></span><br><span class="line">  <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">addDynamicShortcut</span><span class="params">(application: <span class="type">Application</span>)</span></span> &#123;</span><br><span class="line">    <span class="comment">//...........省略</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      shortcutManager.addDynamicShortcuts(listOf(shortcut))</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ignored: Throwable) &#123;</span><br><span class="line">      SharkLog.d(ignored) &#123;</span><br><span class="line">        <span class="string">"Could not add dynamic shortcut. "</span> +</span><br><span class="line">          <span class="string">"shortcutCount=<span class="variable">$shortcutCount</span>, "</span> +</span><br><span class="line">          <span class="string">"maxShortcutCountPerActivity=<span class="subst">$&#123;shortcutManager.maxShortcutCountPerActivity&#125;</span>"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onObjectRetained</span><span class="params">()</span></span> = scheduleRetainedObjectCheck()</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">fun</span> <span class="title">scheduleRetainedObjectCheck</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>::heapDumpTrigger.isInitialized) &#123;</span><br><span class="line">      heapDumpTrigger.scheduleRetainedObjectCheck()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>发现是一个内部类InternalLeakCanary实现了这个接口，是通过在invoke方法里面通过AppWatcher.objectWatcher.addOnObjectRetainedListener(this)方式实现的这个接口，在这个invoke方法里面还初始化了一个HeapDumpTrigger对象，当收到OnObjectRetainedListener接口的onObjectRetained回调的时候，会调用scheduleRetainedObjectCheck方法，在这个方法里面会调用heapDumpTrigger.scheduleRetainedObjectCheck方法，那么可以看出这个heapDumpTrigger肯定是用于dump堆栈的（从名字也可以很明显看出来）。</p><p>到这里大家可能会抛出一个疑问：这个InternalLeakCanary是一个internal内部类，那么它的invoke方法是谁调用的呢？</p><p>在InternalAppWatcher类的init方法里面有如下一段代码：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">internal</span> <span class="keyword">object</span> InternalAppWatcher &#123;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">val</span> onAppWatcherInstalled: (Application) -&gt; <span class="built_in">Unit</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">init</span> &#123;</span><br><span class="line">    <span class="keyword">val</span> internalLeakCanary = <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">val</span> leakCanaryListener = Class.forName(<span class="string">"leakcanary.internal.InternalLeakCanary"</span>)</span><br><span class="line">      leakCanaryListener.getDeclaredField(<span class="string">"INSTANCE"</span>)</span><br><span class="line">        .<span class="keyword">get</span>(<span class="literal">null</span>)</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ignored: Throwable) &#123;</span><br><span class="line">      NoLeakCanary</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@kotlin</span>.Suppress(<span class="string">"UNCHECKED_CAST"</span>)</span><br><span class="line">    onAppWatcherInstalled = internalLeakCanary <span class="keyword">as</span> (Application) -&gt; <span class="built_in">Unit</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为InternalLeakCanary是一个单例，可以看出，在InternalAppWatcher的初始化方法里面，先通过反射获取到了InternalLeakCanary对象，然后我们可以看到InternalLeakCanary是实现了一个函数类型接口的：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">InternalLeakCanary : (Application) -&gt; <span class="built_in">Unit</span></span><br></pre></td></tr></table></figure><p>关于什么是：函数类型，参考:<a href="https://www.kotlincn.net/docs/reference/lambdas.html#函数类型" target="_blank" rel="noopener">https://www.kotlincn.net/docs/reference/lambdas.html#函数类型</a>。然后把internalLeakCanary强转为(Application) -&gt; Unit，保存为onAppWatcherInstalled变量。最后在InternalAppWatcher的install方法的最后面会执行这个函数类型实例调用：onAppWatcherInstalled(application)，也就会调用InternalLeakCanary的fun invoke(application: Application) 方法。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">install</span><span class="params">(application: <span class="type">Application</span>)</span></span> &#123;</span><br><span class="line">  <span class="comment">//省略</span></span><br><span class="line">  onAppWatcherInstalled(application)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>刚刚上面也说了，当收到OnObjectRetainedListener接口的onObjectRetained回调的时候，会调用scheduleRetainedObjectCheck方法，在这个方法里面会调用heapDumpTrigger.scheduleRetainedObjectCheck方法</p><h2 id="heapDumpTrigger-scheduleRetainedObjectCheck"><a href="#heapDumpTrigger-scheduleRetainedObjectCheck" class="headerlink" title="heapDumpTrigger.scheduleRetainedObjectCheck"></a>heapDumpTrigger.scheduleRetainedObjectCheck</h2><p>接下来看下scheduleRetainedObjectCheck方法：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">scheduleRetainedObjectCheck</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">  delayMillis: <span class="type">Long</span> = <span class="number">0</span>L</span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span> &#123;</span><br><span class="line">  <span class="keyword">val</span> checkCurrentlyScheduledAt = checkScheduledAt</span><br><span class="line">  <span class="keyword">if</span> (checkCurrentlyScheduledAt &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  checkScheduledAt = SystemClock.uptimeMillis() + delayMillis</span><br><span class="line">  backgroundHandler.postDelayed(&#123;</span><br><span class="line">    checkScheduledAt = <span class="number">0</span></span><br><span class="line">    checkRetainedObjects()</span><br><span class="line">  &#125;, delayMillis)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里首先会判断当前是否正在执行schedule，如果当前正在执行schedule就返回。然后会记录checkScheduledAt，根据传入的delayMillis延时之后执行checkRetainedObjects方法，在InternalLeakCanary里面调用heapDumpTrigger.scheduleRetainedObjectCheck没有传入参数，因此默认是不延时</p><h2 id="heapDumpTrigger-checkRetainedObjects"><a href="#heapDumpTrigger-checkRetainedObjects" class="headerlink" title="heapDumpTrigger.checkRetainedObjects"></a>heapDumpTrigger.checkRetainedObjects</h2><p>接下来看下checkRetainedObjects方法：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">checkRetainedObjects</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> iCanHasHeap = HeapDumpControl.iCanHasHeap()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> config = configProvider()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (iCanHasHeap <span class="keyword">is</span> Nope) &#123;</span><br><span class="line">      <span class="keyword">if</span> (iCanHasHeap <span class="keyword">is</span> NotifyingNope) &#123;</span><br><span class="line">        <span class="comment">// Before notifying that we can't dump heap, let's check if we still have retained object.</span></span><br><span class="line">        <span class="keyword">var</span> retainedReferenceCount = objectWatcher.retainedObjectCount</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (retainedReferenceCount &gt; <span class="number">0</span>) &#123;</span><br><span class="line">          gcTrigger.runGc()</span><br><span class="line">          retainedReferenceCount = objectWatcher.retainedObjectCount</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">val</span> nopeReason = iCanHasHeap.reason()</span><br><span class="line">        <span class="keyword">val</span> wouldDump = !checkRetainedCount(</span><br><span class="line">          retainedReferenceCount, config.retainedVisibleThreshold, nopeReason</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (wouldDump) &#123;</span><br><span class="line">          <span class="keyword">val</span> uppercaseReason = nopeReason[<span class="number">0</span>].toUpperCase() + nopeReason.substring(<span class="number">1</span>)</span><br><span class="line">          onRetainInstanceListener.onEvent(DumpingDisabled(uppercaseReason))</span><br><span class="line">          showRetainedCountNotification(</span><br><span class="line">            objectCount = retainedReferenceCount,</span><br><span class="line">            contentText = uppercaseReason</span><br><span class="line">          )</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        SharkLog.d &#123;</span><br><span class="line">          application.getString(</span><br><span class="line">            R.string.leak_canary_heap_dump_disabled_text, iCanHasHeap.reason()</span><br><span class="line">          )</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//获取残留对象的个数</span></span><br><span class="line">    <span class="keyword">var</span> retainedReferenceCount = objectWatcher.retainedObjectCount</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (retainedReferenceCount &gt; <span class="number">0</span>) &#123;  </span><br><span class="line">      <span class="comment">//主动执行一次gc</span></span><br><span class="line">      gcTrigger.runGc()</span><br><span class="line">      <span class="comment">//再次获取残留对象的个数</span></span><br><span class="line">      retainedReferenceCount = objectWatcher.retainedObjectCount</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//这个方法里面会有一些判断条件，判断是否需要dump，如果不需要就返回false</span></span><br><span class="line">    <span class="keyword">if</span> (checkRetainedCount(retainedReferenceCount, config.retainedVisibleThreshold)) <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> now = SystemClock.uptimeMillis()</span><br><span class="line">    <span class="keyword">val</span> elapsedSinceLastDumpMillis = now - lastHeapDumpUptimeMillis</span><br><span class="line">    <span class="keyword">if</span> (elapsedSinceLastDumpMillis &lt; WAIT_BETWEEN_HEAP_DUMPS_MILLIS) &#123;</span><br><span class="line">      onRetainInstanceListener.onEvent(DumpHappenedRecently)</span><br><span class="line">      showRetainedCountNotification(</span><br><span class="line">        objectCount = retainedReferenceCount,</span><br><span class="line">        contentText = application.getString(R.string.leak_canary_notification_retained_dump_wait)</span><br><span class="line">      )</span><br><span class="line">      scheduleRetainedObjectCheck(</span><br><span class="line">        delayMillis = WAIT_BETWEEN_HEAP_DUMPS_MILLIS - elapsedSinceLastDumpMillis</span><br><span class="line">      )</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    dismissRetainedCountNotification()</span><br><span class="line">    <span class="keyword">val</span> visibility = <span class="keyword">if</span> (applicationVisible) <span class="string">"visible"</span> <span class="keyword">else</span> <span class="string">"not visible"</span></span><br><span class="line">    dumpHeap(</span><br><span class="line">      retainedReferenceCount = retainedReferenceCount,</span><br><span class="line">      retry = <span class="literal">true</span>,</span><br><span class="line">      reason = <span class="string">"<span class="variable">$retainedReferenceCount</span> retained objects, app is <span class="variable">$visibility</span>"</span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>可以看出会先通过HeapDumpControl.iCanHasHeap()方法返回一个ICanHazHeap对象，这个对象有多种类型：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">sealed</span> <span class="class"><span class="keyword">class</span> <span class="title">ICanHazHeap</span> </span>&#123;</span><br><span class="line">  <span class="keyword">object</span> Yup : ICanHazHeap()</span><br><span class="line">  <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Nope</span></span>(<span class="keyword">val</span> reason: () -&gt; String) : ICanHazHeap()</span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">SilentNope</span></span>(reason: () -&gt; String) : Nope(reason)</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Allows manual dumping via a notification</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">NotifyingNope</span></span>(reason: () -&gt; String) : Nope(reason)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>具体HeapDumpControl.iCanHasHeap()里面的实现这里就不讲了，感兴趣的同学可以深入看下。这里我们假设返回的是Yup类型，那么就会跳过第一个if条件，继续往下走。主要分为几步:</p><p>1、先通过objectWatcher.retainedObjectCount方法拿到了被objectWatcher持有的对象的个数。如果残留的对象大于0就主动执行一次gc，然后再次获取到残留对象的个数</p><p>2、通过checkRetainedCount方法判断是否需要马上dump，如果需要就返回false</p><p>3、需要马上dump之后，会检查两次dump之间的时间间隔是否小于1分钟，如果小于一分钟就会弹出一个通知说：Last heap dump was less than a minute ago，然后过一段时间再次执行scheduleRetainedObjectCheck方法</p><p>4、如果俩次dump时间间隔已经大于等于一分钟了，就会调用dumpHeap方法</p><h2 id="heapDumpTrigger-dumpHeap"><a href="#heapDumpTrigger-dumpHeap" class="headerlink" title="heapDumpTrigger.dumpHeap"></a>heapDumpTrigger.dumpHeap</h2><p>接下来看下dumpHeap方法：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">dumpHeap</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    retainedReferenceCount: <span class="type">Int</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">    retry: <span class="type">Boolean</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">    reason: <span class="type">String</span></span></span></span><br><span class="line"><span class="function"><span class="params">  )</span></span> &#123;</span><br><span class="line">    saveResourceIdNamesToMemory()</span><br><span class="line">    <span class="keyword">val</span> heapDumpUptimeMillis = SystemClock.uptimeMillis()</span><br><span class="line">    KeyedWeakReference.heapDumpUptimeMillis = heapDumpUptimeMillis</span><br><span class="line">    <span class="keyword">when</span> (<span class="keyword">val</span> heapDumpResult = heapDumper.dumpHeap()) &#123;</span><br><span class="line">      <span class="keyword">is</span> NoHeapDump -&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (retry) &#123;</span><br><span class="line">          SharkLog.d &#123; <span class="string">"Failed to dump heap, will retry in <span class="variable">$WAIT_AFTER_DUMP_FAILED_MILLIS</span> ms"</span> &#125;</span><br><span class="line">          scheduleRetainedObjectCheck(</span><br><span class="line">            delayMillis = WAIT_AFTER_DUMP_FAILED_MILLIS</span><br><span class="line">          )</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          SharkLog.d &#123; <span class="string">"Failed to dump heap, will not automatically retry"</span> &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        showRetainedCountNotification(</span><br><span class="line">          objectCount = retainedReferenceCount,</span><br><span class="line">          contentText = application.getString(</span><br><span class="line">            R.string.leak_canary_notification_retained_dump_failed</span><br><span class="line">          )</span><br><span class="line">        )</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">is</span> HeapDump -&gt; &#123;</span><br><span class="line">        lastDisplayedRetainedObjectCount = <span class="number">0</span></span><br><span class="line">        lastHeapDumpUptimeMillis = SystemClock.uptimeMillis()</span><br><span class="line">        objectWatcher.clearObjectsWatchedBefore(lastHeapDumpUptimeMillis)</span><br><span class="line">        HeapAnalyzerService.runAnalysis(</span><br><span class="line">          context = application,</span><br><span class="line">          heapDumpFile = heapDumpResult.file,</span><br><span class="line">          heapDumpDurationMillis = heapDumpResult.durationMillis,</span><br><span class="line">          heapDumpReason = reason</span><br><span class="line">        )</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>在这个方法里面会先调用heapDumper.dumpHeap()方法返回一个heapDumpResult：<br>1、如果返回类型为NoHeapDump就代表dump heap失败</p><p>2、如果返回类型为HeapDump就代表dump heap成功，会先调用objectWatcher.clearObjectsWatchedBefore(heapDumpUptimeMillis)方法，用于清除所有在lastHeapDumpUptimeMillis这个时间点之前创建的KeyedWeakReference对象，因为dump堆栈已经成功了，这里就不需要再持有了。然后会调用HeapAnalyzerService.runAnalysis进行堆栈分析</p><p>这个heapDumper是一个AndroidHeapDumper对象，来看下其dumpHeap方法：</p><h3 id="AndroidHeapDumper-dumpHeap"><a href="#AndroidHeapDumper-dumpHeap" class="headerlink" title="AndroidHeapDumper.dumpHeap"></a>AndroidHeapDumper.dumpHeap</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">dumpHeap</span><span class="params">()</span></span>: DumpHeapResult &#123;</span><br><span class="line">    <span class="keyword">val</span> heapDumpFile = leakDirectoryProvider.newHeapDumpFile() ?: <span class="keyword">return</span> NoHeapDump</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> waitingForToast = FutureResult&lt;Toast?&gt;()</span><br><span class="line">    showToast(waitingForToast)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!waitingForToast.wait(<span class="number">5</span>, SECONDS)) &#123;</span><br><span class="line">      SharkLog.d &#123; <span class="string">"Did not dump heap, too much time waiting for Toast."</span> &#125;</span><br><span class="line">      <span class="keyword">return</span> NoHeapDump</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> notificationManager =</span><br><span class="line">      context.getSystemService(Context.NOTIFICATION_SERVICE) <span class="keyword">as</span> NotificationManager</span><br><span class="line">    <span class="keyword">if</span> (Notifications.canShowNotification) &#123;</span><br><span class="line">      <span class="keyword">val</span> dumpingHeap = context.getString(R.string.leak_canary_notification_dumping)</span><br><span class="line">      <span class="keyword">val</span> builder = Notification.Builder(context)</span><br><span class="line">        .setContentTitle(dumpingHeap)</span><br><span class="line">      <span class="keyword">val</span> notification = Notifications.buildNotification(context, builder, LEAKCANARY_LOW)</span><br><span class="line">      notificationManager.notify(R.id.leak_canary_notification_dumping_heap, notification)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> toast = waitingForToast.<span class="keyword">get</span>()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">val</span> durationMillis = measureDurationMillis &#123;</span><br><span class="line">        Debug.dumpHprofData(heapDumpFile.absolutePath)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (heapDumpFile.length() == <span class="number">0L</span>) &#123;</span><br><span class="line">        SharkLog.d &#123; <span class="string">"Dumped heap file is 0 byte length"</span> &#125;</span><br><span class="line">        NoHeapDump</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        HeapDump(file = heapDumpFile, durationMillis = durationMillis)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e: Exception) &#123;</span><br><span class="line">      SharkLog.d(e) &#123; <span class="string">"Could not dump heap"</span> &#125;</span><br><span class="line">      <span class="comment">// Abort heap dump</span></span><br><span class="line">      NoHeapDump</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      cancelToast(toast)</span><br><span class="line">      notificationManager.cancel(R.id.leak_canary_notification_dumping_heap)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>可以看出主要代码是调用Debug.dumpHprofData(heapDumpFile.absolutePath)方法来dump堆栈，这个是系统的方法，调用这个方法dump堆栈的时候会造成整个界面卡住，因此你会发现每次Leakcanary开始dump堆栈的时候，整个App是没法操作的，这也是为什么前面要控制两次dump的时间间隔不能小于一分钟的原因，主要是为了防止频繁dump对开发者造成的干扰。</p><h3 id="HeapAnalyzerService-runAnalysis"><a href="#HeapAnalyzerService-runAnalysis" class="headerlink" title="HeapAnalyzerService.runAnalysis"></a>HeapAnalyzerService.runAnalysis</h3><p>最后来看下Heap分析：HeapAnalyzerService.runAnalysis方法：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">companion</span> <span class="keyword">object</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">runAnalysis</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">      context: <span class="type">Context</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">      heapDumpFile: <span class="type">File</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">      heapDumpDurationMillis: <span class="type">Long</span>? = <span class="literal">null</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">      heapDumpReason: <span class="type">String</span> = <span class="string">"Unknown"</span></span></span></span><br><span class="line"><span class="function"><span class="params">    )</span></span> &#123;</span><br><span class="line">      <span class="keyword">val</span> intent = Intent(context, HeapAnalyzerService::<span class="class"><span class="keyword">class</span>.<span class="title">java</span>)</span></span><br><span class="line">      intent.putExtra(HEAPDUMP_FILE_EXTRA, heapDumpFile)</span><br><span class="line">      intent.putExtra(HEAPDUMP_REASON_EXTRA, heapDumpReason)</span><br><span class="line">      heapDumpDurationMillis?.let &#123;</span><br><span class="line">        intent.putExtra(HEAPDUMP_DURATION_MILLIS_EXTRA, heapDumpDurationMillis)</span><br><span class="line">      &#125;</span><br><span class="line">      startForegroundService(context, intent)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">startForegroundService</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">      context: <span class="type">Context</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">      intent: <span class="type">Intent</span></span></span></span><br><span class="line"><span class="function"><span class="params">    )</span></span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (SDK_INT &gt;= <span class="number">26</span>) &#123;</span><br><span class="line">        context.startForegroundService(intent)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// Pre-O behavior.</span></span><br><span class="line">        context.startService(intent)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>可以看出这个runAnalysis方法会启动给一个ForegroundService，这个HeapAnalyzerService是继承自ForegroundService的，而ForegroundService继承自IntentService。来看下HeapAnalyzerService的onHandleIntentInForeground方法：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onHandleIntentInForeground</span><span class="params">(intent: <span class="type">Intent</span>?)</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (intent == <span class="literal">null</span> || !intent.hasExtra(HEAPDUMP_FILE_EXTRA)) &#123;</span><br><span class="line">      SharkLog.d &#123; <span class="string">"HeapAnalyzerService received a null or empty intent, ignoring."</span> &#125;</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Since we're running in the main process we should be careful not to impact it.</span></span><br><span class="line">    Process.setThreadPriority(Process.THREAD_PRIORITY_BACKGROUND)</span><br><span class="line">    <span class="keyword">val</span> heapDumpFile = intent.getSerializableExtra(HEAPDUMP_FILE_EXTRA) <span class="keyword">as</span> File</span><br><span class="line">    <span class="keyword">val</span> heapDumpReason = intent.getStringExtra(HEAPDUMP_REASON_EXTRA)</span><br><span class="line">    <span class="keyword">val</span> heapDumpDurationMillis = intent.getLongExtra(HEAPDUMP_DURATION_MILLIS_EXTRA, -<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> config = LeakCanary.config</span><br><span class="line">    <span class="keyword">val</span> heapAnalysis = <span class="keyword">if</span> (heapDumpFile.exists()) &#123;</span><br><span class="line">      analyzeHeap(heapDumpFile, config)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      missingFileFailure(heapDumpFile)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">val</span> fullHeapAnalysis = <span class="keyword">when</span> (heapAnalysis) &#123;</span><br><span class="line">      <span class="keyword">is</span> HeapAnalysisSuccess -&gt; heapAnalysis.copy(</span><br><span class="line">        dumpDurationMillis = heapDumpDurationMillis,</span><br><span class="line">        metadata = heapAnalysis.metadata + (<span class="string">"Heap dump reason"</span> to heapDumpReason)</span><br><span class="line">      )</span><br><span class="line">      <span class="keyword">is</span> HeapAnalysisFailure -&gt; heapAnalysis.copy(dumpDurationMillis = heapDumpDurationMillis)</span><br><span class="line">    &#125;</span><br><span class="line">    onAnalysisProgress(REPORTING_HEAP_ANALYSIS)</span><br><span class="line">    config.onHeapAnalyzedListener.onHeapAnalyzed(fullHeapAnalysis)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">analyzeHeap</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    heapDumpFile: <span class="type">File</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">    config: <span class="type">Config</span></span></span></span><br><span class="line"><span class="function"><span class="params">  )</span></span>: HeapAnalysis &#123;</span><br><span class="line">    <span class="keyword">val</span> heapAnalyzer = HeapAnalyzer(<span class="keyword">this</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> proguardMappingReader = <span class="keyword">try</span> &#123;</span><br><span class="line">      ProguardMappingReader(assets.<span class="keyword">open</span>(PROGUARD_MAPPING_FILE_NAME))</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e: IOException) &#123;</span><br><span class="line">      <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> heapAnalyzer.analyze(</span><br><span class="line">      heapDumpFile = heapDumpFile,</span><br><span class="line">      leakingObjectFinder = config.leakingObjectFinder,</span><br><span class="line">      referenceMatchers = config.referenceMatchers,</span><br><span class="line">      computeRetainedHeapSize = config.computeRetainedHeapSize,</span><br><span class="line">      objectInspectors = config.objectInspectors,</span><br><span class="line">      metadataExtractor = config.metadataExtractor,</span><br><span class="line">      proguardMapping = proguardMappingReader?.readProguardMapping()</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>可以看出如果heapDumpFile存在就会调用下面的analyzeHeap方法，在这个方法里面最终会new一个HeapAnalyzer对象，然后调用analyze方法进行堆栈分析。</p><p>到这里，整个dump堆栈的分析过程就结束了。</p>]]></content>
    
    <summary type="html">
    
      LeakCanary源码解析之——dump堆栈
    
    </summary>
    
      <category term="Android源码解析" scheme="http://easyliu.com/categories/Android%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
    
    
      <category term="Android" scheme="http://easyliu.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>LeakCanary源码解析之——内存泄漏监测</title>
    <link href="http://easyliu.com/2020/12/19/android_source_analysis/leakcanary/"/>
    <id>http://easyliu.com/2020/12/19/android_source_analysis/leakcanary/</id>
    <published>2020-12-19T12:51:55.000Z</published>
    <updated>2022-02-17T07:17:57.234Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在日常开发中，肯定都使用过LeakCanary这个库来监测app的内存泄漏问题。LeakCanary会自动监测、分析以及上报内存泄漏，其工作主要是分为以下四步：</p><blockquote><p>1、监测泄漏的对象</p><p>2、dump堆栈</p><p>3、分析堆栈</p><p>4、对泄漏进行归类,然后通过通知的方式上报内存泄漏</p></blockquote><p>那么LeakCanary监测内存泄漏的原理是什么呢，怎么判断一个Activity或者Fragment被泄漏了呢？本篇文章就从源码的角度来对LeakCanary工作的第一步：监测泄漏的对象 来进行剖析。</p><p>本次分析源码基于：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">dependencies</span> &#123;</span><br><span class="line">  debugImplementation <span class="string">'com.squareup.leakcanary:leakcanary-android:2.5'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对应的github官网：<a href="https://github.com/square/leakcanary" target="_blank" rel="noopener">https://github.com/square/leakcanary</a></p><p>有一个需要注意的点：</p><p>LeakCanary 2.x版本相比之前的1.x版本相比有比较大的改动，包括集成方式的改变以及使用kotlin进行了重写，如果之前项目中集成的是1.x版本，想升级到2.x版本的话，可以参考官网的升级文档：<br><a href="https://square.github.io/leakcanary/upgrading-to-leakcanary-2.0/" target="_blank" rel="noopener">https://square.github.io/leakcanary/upgrading-to-leakcanary-2.0/</a></p><p>本次源码分析是基于kotlin的，如果对kotlin不太了解，可以上kotlin中文官网学习一下：<br><a href="https://www.kotlincn.net/docs/reference/" target="_blank" rel="noopener">https://www.kotlincn.net/docs/reference/</a></p><p>关于LeakCanary更多资料参考官网：<a href="https://square.github.io/leakcanary/" target="_blank" rel="noopener">https://square.github.io/leakcanary/</a></p><h2 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h2><p>根据官方文档，升级到2.x版本之后，只需要在gradle集成一下leakcanary就行了，在2.x版本之前是需要应用的Application里面主动调用以下代码来安装Leakcanary的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExampleApplication</span> <span class="keyword">extends</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onCreate();</span><br><span class="line">    <span class="keyword">if</span> (LeakCanary.isInAnalyzerProcess(<span class="keyword">this</span>)) &#123;</span><br><span class="line">      <span class="comment">// This process is dedicated to LeakCanary for heap analysis.</span></span><br><span class="line">      <span class="comment">// You should not init your app in this process.</span></span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    LeakCanary.install(<span class="keyword">this</span>);</span><br><span class="line">    <span class="comment">// Normal app init code...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么2.x版本是怎么做到自动自动安装Leakcanary的呢？到这里大家可能会想到使用ContentProvider？</p><h3 id="LeakCanary安装"><a href="#LeakCanary安装" class="headerlink" title="LeakCanary安装"></a>LeakCanary安装</h3><p>没错，在Leakcanary里面有一个AppWatcherInstaller类，继承自ContentProvider：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Content providers are loaded before the application class is created. [AppWatcherInstaller] is</span></span><br><span class="line"><span class="comment"> * used to install [leakcanary.AppWatcher] on application start.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">internal</span> <span class="keyword">sealed</span> <span class="class"><span class="keyword">class</span> <span class="title">AppWatcherInstaller</span> : <span class="type">ContentProvider</span></span>() &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreate</span><span class="params">()</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">    <span class="keyword">val</span> application = context!!.applicationContext <span class="keyword">as</span> Application</span><br><span class="line">    AppWatcher.manualInstall(application)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>在manifest里面的定义如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">manifest</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">package</span>=<span class="string">"com.squareup.leakcanary.objectwatcher"</span> &gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">uses-sdk</span> <span class="attr">android:minSdkVersion</span>=<span class="string">"14"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">application</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">provider</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:name</span>=<span class="string">"leakcanary.internal.AppWatcherInstaller$MainProcess"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:authorities</span>=<span class="string">"$&#123;applicationId&#125;.leakcanary-installer"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:enabled</span>=<span class="string">"@bool/leak_canary_watcher_auto_install"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:exported</span>=<span class="string">"false"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">application</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br></pre></td></tr></table></figure><p>可以通过leak_canary_watcher_auto_install开关控制其是否enable。</p><p>从AppWatcherInstaller可以看出在onCreate方法里面调用了AppWatcher.manualInstall(application)方法：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">object</span> AppWatcher &#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * [AppWatcher] is automatically installed in the main process on startup. You can</span></span><br><span class="line"><span class="comment">   * disable this behavior by overriding the `leak_canary_watcher_auto_install` boolean resource:</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * </span></span><br><span class="line"><span class="comment">   * &lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="comment">   * &lt;resources&gt;</span></span><br><span class="line"><span class="comment">   *   &lt;bool name="leak_canary_watcher_auto_install"&gt;false&lt;/bool&gt;</span></span><br><span class="line"><span class="comment">   * &lt;/resources&gt;</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * If you disabled automatic install then you can call this method to install [AppWatcher].</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">fun</span> <span class="title">manualInstall</span><span class="params">(application: <span class="type">Application</span>)</span></span> &#123;</span><br><span class="line">    InternalAppWatcher.install(application)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个AppWatcher是一个单例，如果我们通过设置leak_canary_watcher_auto_install把AppWatcher自动安装给关掉了，外部可以直接调用AppWatcher.manualInstall(application)方法进行手动安装。AppWatcher还提供了一个Config类来进行一些配置，比如配置是否要监测fragment销毁，是否要监测ViewModel销毁以及监测时长等等，具体可以深入AppWatcher里面去查看，config使用方式为:</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Builder for [Config] intended to be used only from Java code.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Usage:</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * AppWatcher.Config config = AppWatcher.getConfig().newBuilder()</span></span><br><span class="line"><span class="comment"> *    .watchFragmentViews(false)</span></span><br><span class="line"><span class="comment"> *    .build();</span></span><br><span class="line"><span class="comment"> * AppWatcher.setConfig(config);</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * For idiomatic Kotlin use `copy()` method instead:</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * AppWatcher.config = AppWatcher.config.copy(watchFragmentViews = false)</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p>在AppWatcher.manualInstall里面又调用了InternalAppWatcher.install方法:</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">internal</span> <span class="keyword">object</span> InternalAppWatcher &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">val</span> checkRetainedExecutor = Executor &#123;</span><br><span class="line">    mainHandler.postDelayed(it, AppWatcher.config.watchDurationMillis)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">val</span> objectWatcher = ObjectWatcher(</span><br><span class="line">      clock = clock,</span><br><span class="line">      checkRetainedExecutor = checkRetainedExecutor,</span><br><span class="line">      isEnabled = &#123; <span class="literal">true</span> &#125;</span><br><span class="line">  )</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">fun</span> <span class="title">install</span><span class="params">(application: <span class="type">Application</span>)</span></span> &#123;</span><br><span class="line">    checkMainThread()</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>::application.isInitialized) &#123;</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    InternalAppWatcher.application = application</span><br><span class="line">    <span class="keyword">if</span> (isDebuggableBuild) &#123;</span><br><span class="line">      SharkLog.logger = DefaultCanaryLog()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> configProvider = &#123; AppWatcher.config &#125;</span><br><span class="line">    ActivityDestroyWatcher.install(application, objectWatcher, configProvider)</span><br><span class="line">    FragmentDestroyWatcher.install(application, objectWatcher, configProvider)</span><br><span class="line">    onAppWatcherInstalled(application)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在InternalAppWatcher的install当中，首先检查是否在主线程，如果不是在主线程就会抛crash。然后分别调用了ActivityDestoryWatcher.install方法以及FragmentDestroyWatcher.install方法，传入了全局的AppWatcher.config配置以及一个ObjectWatcher对象。这个ObjectWatcher才是真正的主角，稍后会讲到。接下来看下ActivityDestroyWatcher的实现原理。FragmentDestroyWatcher的实现原理也是差不多的，只不过是监听fragment的destory的回调而已，感兴趣的可以看下</p><h3 id="ActivityDestroyWatcher"><a href="#ActivityDestroyWatcher" class="headerlink" title="ActivityDestroyWatcher"></a>ActivityDestroyWatcher</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">internal</span> <span class="class"><span class="keyword">class</span> <span class="title">ActivityDestroyWatcher</span> <span class="keyword">private</span> <span class="keyword">constructor</span></span>(</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">val</span> objectWatcher: ObjectWatcher,</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">val</span> configProvider: () -&gt; Config</span><br><span class="line">) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">val</span> lifecycleCallbacks =</span><br><span class="line">    <span class="keyword">object</span> : Application.ActivityLifecycleCallbacks <span class="keyword">by</span> noOpDelegate() &#123;</span><br><span class="line">      <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onActivityDestroyed</span><span class="params">(activity: <span class="type">Activity</span>)</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (configProvider().watchActivities) &#123;</span><br><span class="line">          objectWatcher.watch(</span><br><span class="line">              activity, <span class="string">"<span class="subst">$&#123;activity::class.java.name&#125;</span> received Activity#onDestroy() callback"</span></span><br><span class="line">          )</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">companion</span> <span class="keyword">object</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">install</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">      application: <span class="type">Application</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">      objectWatcher: <span class="type">ObjectWatcher</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">      configProvider: () -&gt; <span class="type">Config</span></span></span></span><br><span class="line"><span class="function"><span class="params">    )</span></span> &#123;</span><br><span class="line">      <span class="keyword">val</span> activityDestroyWatcher =</span><br><span class="line">        ActivityDestroyWatcher(objectWatcher, configProvider)</span><br><span class="line">      application.registerActivityLifecycleCallbacks(activityDestroyWatcher.lifecycleCallbacks)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看出install方法里面就是往application里面注册了一个ActivityLifecycleCallbacks，当activity销毁的时候，就会调用objectWatcher的watch方法来观察这个对象。那么监测activity是否泄漏的逻辑肯定是在这个watch方法里面了！刚刚前面前面也说了ObjectWatcher才是真正的主角，那么我们来重点分析一下这个ObjectWatcher：</p><h3 id="ObjectWatcher"><a href="#ObjectWatcher" class="headerlink" title="ObjectWatcher"></a>ObjectWatcher</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * [ObjectWatcher] can be passed objects to [watch]. It will create [KeyedWeakReference] instances</span></span><br><span class="line"><span class="comment"> * that reference watches objects, and check if those references have been cleared as expected on</span></span><br><span class="line"><span class="comment"> * the [checkRetainedExecutor] executor. If not, these objects are considered retained and</span></span><br><span class="line"><span class="comment"> * [ObjectWatcher] will then notify the [onObjectRetainedListener] on that executor thread.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * [checkRetainedExecutor] is expected to run its tasks on a background thread, with a significant</span></span><br><span class="line"><span class="comment"> * to give the GC the opportunity to identify weakly reachable objects.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * [ObjectWatcher] is thread safe.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// Thread safe by locking on all methods, which is reasonably efficient given how often</span></span><br><span class="line"><span class="comment">// these methods are accessed.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ObjectWatcher</span> <span class="keyword">constructor</span></span>(</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">val</span> clock: Clock,</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">val</span> checkRetainedExecutor: Executor,</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Calls to [watch] will be ignored when [isEnabled] returns false</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">val</span> isEnabled: () -&gt; <span class="built_in">Boolean</span> = &#123; <span class="literal">true</span> &#125;</span><br><span class="line">) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">val</span> onObjectRetainedListeners = mutableSetOf&lt;OnObjectRetainedListener&gt;()</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * References passed to [watch].</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">val</span> watchedObjects = mutableMapOf&lt;String, KeyedWeakReference&gt;()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">val</span> queue = ReferenceQueue&lt;Any&gt;()</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Synchronized</span> <span class="function"><span class="keyword">fun</span> <span class="title">addOnObjectRetainedListener</span><span class="params">(listener: <span class="type">OnObjectRetainedListener</span>)</span></span> &#123;</span><br><span class="line">    onObjectRetainedListeners.add(listener)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Synchronized</span> <span class="function"><span class="keyword">fun</span> <span class="title">removeOnObjectRetainedListener</span><span class="params">(listener: <span class="type">OnObjectRetainedListener</span>)</span></span> &#123;</span><br><span class="line">    onObjectRetainedListeners.remove(listener)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Synchronized</span> <span class="function"><span class="keyword">fun</span> <span class="title">watch</span><span class="params">(watchedObject: <span class="type">Any</span>)</span></span> &#123;</span><br><span class="line">    watch(watchedObject, <span class="string">""</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Watches the provided [watchedObject].</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> description Describes why the object is watched.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@Synchronized</span> <span class="function"><span class="keyword">fun</span> <span class="title">watch</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    watchedObject: <span class="type">Any</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">    description: <span class="type">String</span></span></span></span><br><span class="line"><span class="function"><span class="params">  )</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!isEnabled()) &#123;</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    removeWeaklyReachableObjects()</span><br><span class="line">    <span class="keyword">val</span> key = UUID.randomUUID()</span><br><span class="line">        .toString()</span><br><span class="line">    <span class="keyword">val</span> watchUptimeMillis = clock.uptimeMillis()</span><br><span class="line">    <span class="keyword">val</span> reference =</span><br><span class="line">      KeyedWeakReference(watchedObject, key, description, watchUptimeMillis, queue)</span><br><span class="line">    SharkLog.d &#123;</span><br><span class="line">      <span class="string">"Watching "</span> +</span><br><span class="line">          (<span class="keyword">if</span> (watchedObject <span class="keyword">is</span> Class&lt;*&gt;) watchedObject.toString() <span class="keyword">else</span> <span class="string">"instance of <span class="subst">$&#123;watchedObject.javaClass.name&#125;</span>"</span>) +</span><br><span class="line">          (<span class="keyword">if</span> (description.isNotEmpty()) <span class="string">" (<span class="variable">$description</span>)"</span> <span class="keyword">else</span> <span class="string">""</span>) +</span><br><span class="line">          <span class="string">" with key <span class="variable">$key</span>"</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    watchedObjects[key] = reference</span><br><span class="line">    checkRetainedExecutor.execute &#123;</span><br><span class="line">      moveToRetained(key)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Synchronized</span> <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">moveToRetained</span><span class="params">(key: <span class="type">String</span>)</span></span> &#123;</span><br><span class="line">    removeWeaklyReachableObjects()</span><br><span class="line">    <span class="keyword">val</span> retainedRef = watchedObjects[key]</span><br><span class="line">    <span class="keyword">if</span> (retainedRef != <span class="literal">null</span>) &#123;</span><br><span class="line">      retainedRef.retainedUptimeMillis = clock.uptimeMillis()</span><br><span class="line">      onObjectRetainedListeners.forEach &#123; it.onObjectRetained() &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">removeWeaklyReachableObjects</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// WeakReferences are enqueued as soon as the object to which they point to becomes weakly</span></span><br><span class="line">    <span class="comment">// reachable. This is before finalization or garbage collection has actually happened.</span></span><br><span class="line">    <span class="keyword">var</span> ref: KeyedWeakReference?</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">      ref = queue.poll() <span class="keyword">as</span> KeyedWeakReference?</span><br><span class="line">      <span class="keyword">if</span> (ref != <span class="literal">null</span>) &#123;</span><br><span class="line">        watchedObjects.remove(ref.key)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">while</span> (ref != <span class="literal">null</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在watch方法当中，首先会调用一个removeWeaklyReachableObjects方法。在这里先引入一个知识点：</p><blockquote><p>Java的WeakRefrence可以关联一个queue，当弱引用保存的对象被回收了，就会把这个弱引用对象放入这个队列里面。</p></blockquote><p>因此removeWeaklyReachableObjects方法主要做的事情是：从queue里面获取到一个弱引用对象，如果这个弱引用对象不为空，就把这个弱引用对象对应的对象从watchedObjects里面给移除掉，代表这个对象被回收了，没有泄漏。</p><p>执行removeWeaklyReachableObjects方法之后就会把传入的观察对象封装成一个KeyedWeakReference对象放入watchedObjects这个map当中保存起来。</p><p>最后会调用checkRetainedExecutor线程池来执行一个task。这个线程池的实现也挺简单的:</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">val</span> checkRetainedExecutor = Executor &#123;</span><br><span class="line">  mainHandler.postDelayed(it, AppWatcher.config.watchDurationMillis)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>就是延时一段时间来执行task,这个延时时间默认是5s，外部可配置。</p><p>延时一段时候之后，执行这个task,这个task里面会调用moveToRetained方法。可以看出这个方法也会先调用一下removeWeaklyReachableObjects方法，把可以被回收的对象从map里面移掉，然后再判断map里面是否还保存这个key对应的弱引用对象，如果还保存说明可能发生内存泄漏了！这个时候就会通过onObjectRetainedListeners通知出去交给下一步：dump堆栈 进行处理。在dump堆栈这步里面会先执行gc来进行对象回收，然后再次通过removeWeaklyReachableObjects方法来判断是否真正发生了内存泄漏，如果出现了内存泄漏就会进行dump堆栈处理，最终通过通知的方式上报内存泄漏。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>以上主要是针对Leakcnary中的内存泄漏监测这一部分，从源码的角度进行了分析，总结如下：</p><p>1、通过ContentProvier来进行Leakcanary自动安装（也可以采取手动安装的方式）</p><p>2、通过Lifecycle来监听activity或者fragment的destory回调</p><p>3、利用Java当中WeakRefrenece+ReferenceQueue的特性来判断弱引用对象是否被泄漏了</p><p>Leakcanary监控到有内存泄漏只是第一步，后续还有dump堆栈，分析堆栈等，后续有时间也会对这些部分进行学习。</p><p>做为一个开源库，Leakcanary框架源码还是挺值得学习的，其思想非常值得我们学习，并且个人觉得里面的kotlin代码还是写的挺好的，是学习kotlin的好材料。</p>]]></content>
    
    <summary type="html">
    
      LeakCanary源码解析之——内存泄漏监测
    
    </summary>
    
      <category term="Android源码解析" scheme="http://easyliu.com/categories/Android%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
    
    
      <category term="Android" scheme="http://easyliu.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Jetpack Compose初体验</title>
    <link href="http://easyliu.com/2020/12/12/android_jetpack/compose/"/>
    <id>http://easyliu.com/2020/12/12/android_jetpack/compose/</id>
    <published>2020-12-12T14:21:06.000Z</published>
    <updated>2022-02-17T07:16:37.294Z</updated>
    
    <content type="html"><![CDATA[<h2 id="关于Jetpack-Compose"><a href="#关于Jetpack-Compose" class="headerlink" title="关于Jetpack Compose"></a>关于Jetpack Compose</h2><blockquote><p>Android Jetpack Compose是2019 Google/IO大会上推出的一种声明式的UI开发框架，经过一年左右的演进，现在到了alpha阶段。Jetpack Compose是用于构建原生界面的新款Android工具包。它可简化并加快Android上的界面开发。使用更少的代码、强大的工具和直观的KotlinAPI，快速让应用生动而精彩，从此不再需要写xml，使用声明式的Compose函数来构建页面UI。</p></blockquote><p>听起来是不是很厉害的样子？以下是android官方介绍：</p><p><img src="/2020/12/12/android_jetpack/compose/compose_feature.png" alt="compose_feature"><br>从介绍可以看来google对compose还是给予厚望的。</p><p>Jetpack Compose 目前为Alpha版。API Surface尚未最终确定，预计后续会有变动。</p><p>接下来就来开启我们的Compose之旅吧，刚好还可以顺带学习一下kotlin，compose版本基于1.0.0-alpha04</p><h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><h3 id="安装Android-Studio"><a href="#安装Android-Studio" class="headerlink" title="安装Android Studio"></a>安装Android Studio</h3><p>首先需要安装最新Canary版Android Studio预览版本，当您搭配使用Android Studio和 Jetpack Compose开发应用时，可以从智能编辑器功能中受益，这些功能包括“新建项目”模板和立即预览 Compose 界面等。下载链接：<a href="https://developer.android.com/studio/preview" target="_blank" rel="noopener">https://developer.android.com/studio/preview</a></p><h3 id="创建Jetpack-Compose项目"><a href="#创建Jetpack-Compose项目" class="headerlink" title="创建Jetpack Compose项目"></a>创建Jetpack Compose项目</h3><p>关于如何创建Jetpack Compose项目，参考：<a href="https://developer.android.com/jetpack/compose/setup" target="_blank" rel="noopener">https://developer.android.com/jetpack/compose/setup</a></p><h2 id="基础入门"><a href="#基础入门" class="headerlink" title="基础入门"></a>基础入门</h2><p>首先来认识一个非常重要的概念：@Composable<br>在Jetpack Compose中，一切UI的绘制均基于可组合函数。在开发Jetpack Compose程序过程中，基本上都是与@Composable这个注解打交道。使用Composable注解可以标记一个函数为可组合函数，可组合函数可用于描述UI界面中的具体展示内容或绘制规则。通过不同的Compose的组合或嵌套，可以很灵活的完成复杂UI的展示。<br>比如我们在界面上展示一个简单的text，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">class MainActivity : AppCompatActivity() &#123;</span><br><span class="line">    <span class="function">override fun <span class="title">onCreate</span><span class="params">(savedInstanceState: Bundle?)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState)</span><br><span class="line">        setContent &#123;</span><br><span class="line">            Text(text = <span class="string">"hello world!"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行效果如下：<br><img src="/2020/12/12/android_jetpack/compose/compose_simple.png" alt="compose_simple"><br>是不是很神奇！<br>其实对于setContent来说，其接受@Compose注解的子元素，Text其实就是一个组合函数，在Jetpack Compose当中类似于TextView提供文本展示的能力。我们还可以换一种写法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">class MainActivity : AppCompatActivity() &#123;</span><br><span class="line">    <span class="function">override fun <span class="title">onCreate</span><span class="params">(savedInstanceState: Bundle?)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState)</span><br><span class="line">        setContent &#123;</span><br><span class="line">            hello(name = <span class="string">"hello world!"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function">fun <span class="title">hello</span><span class="params">(name: String)</span> </span>&#123;</span><br><span class="line">    Text(text = name)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行效果也是一样的。在Compose的世界里，万物皆@Compose注解。</p><p>上面只是简单的展示了一个文本，我们还可以给这个文本设置一些属性，比如常见的文本颜色，文字大小等，还可以使用Modifier来设置背景颜色、上下padding等:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">class MainActivity : AppCompatActivity() &#123;</span><br><span class="line">    <span class="function">override fun <span class="title">onCreate</span><span class="params">(savedInstanceState: Bundle?)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState)</span><br><span class="line">        setContent &#123;</span><br><span class="line">            Greeting(name = <span class="string">"hello world!"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function">fun <span class="title">Greeting</span><span class="params">(name: String)</span> </span>&#123;</span><br><span class="line">    Text(</span><br><span class="line">            text = name,</span><br><span class="line">            fontSize = TextUnit.Companion.Sp(<span class="number">15</span>),</span><br><span class="line">            fontStyle = FontStyle.Italic,</span><br><span class="line">            maxLines = <span class="number">2</span>,</span><br><span class="line">            color = Color.Blue,</span><br><span class="line">            modifier = Modifier.background(</span><br><span class="line">                    color = Color.Red,</span><br><span class="line">                    shape = RoundedCornerShape(<span class="number">20</span>)</span><br><span class="line">            ).padding(<span class="number">10</span>.dp)</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行效果如下：<br><img src="/2020/12/12/android_jetpack/compose/compose_text_advanced.png" alt="compose_text_advanced"></p><h2 id="预览"><a href="#预览" class="headerlink" title="预览"></a>预览</h2><p>使用@Preview注解支持预览功能，只需要在@Composable函数上面添加@Preview注解是可以进行预览，如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//预览</span></span><br><span class="line"><span class="meta">@Preview</span>(showBackground = <span class="keyword">true</span>)</span><br><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function">fun <span class="title">DefaultPreview</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   Greeting()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function">fun <span class="title">Greeting</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Greeting(name = <span class="string">"hello world!"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function">fun <span class="title">Greeting</span><span class="params">(name: String)</span> </span>&#123;</span><br><span class="line">    Text(</span><br><span class="line">            text = name,</span><br><span class="line">            fontSize = TextUnit.Companion.Sp(<span class="number">15</span>),</span><br><span class="line">            fontStyle = FontStyle.Italic,</span><br><span class="line">            maxLines = <span class="number">2</span>,</span><br><span class="line">            color = Color.Blue,</span><br><span class="line">            modifier = Modifier.background(</span><br><span class="line">                    color = Color.Red,</span><br><span class="line">                    shape = RoundedCornerShape(<span class="number">20</span>)</span><br><span class="line">            ).padding(<span class="number">10</span>.dp)</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2020/12/12/android_jetpack/compose/preview.png" alt="preview"></p><p>接下来讲一下Compose当中一些常用的布局方式</p><h2 id="常用布局"><a href="#常用布局" class="headerlink" title="常用布局"></a>常用布局</h2><p>在日常开发中，铁定是少不了各种布局方式的，Jetpack compose也提供了相当多的布局方式，首先是横向布局Row。</p><h3 id="Row"><a href="#Row" class="headerlink" title="Row"></a>Row</h3><p>Row提供了横向布局的能力，如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Row</span></span><br><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function">fun <span class="title">RowTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> nameList = listOf(<span class="string">"1"</span>, <span class="string">"2"</span>, <span class="string">"3"</span>)</span><br><span class="line">    Row(</span><br><span class="line">            modifier = Modifier.padding(<span class="number">0</span>.dp, <span class="number">16</span>.dp),</span><br><span class="line">            verticalAlignment = Alignment.CenterVertically</span><br><span class="line">    ) &#123;</span><br><span class="line">        nameList.forEach() &#123; name -&gt;</span><br><span class="line">            <span class="comment">//进行3等分，居中展示</span></span><br><span class="line">            Text(</span><br><span class="line">                    text = <span class="string">"Row $name"</span>,</span><br><span class="line">                    fontSize = TextUnit.Companion.Sp(<span class="number">15</span>),</span><br><span class="line">                    fontStyle = FontStyle.Normal,</span><br><span class="line">                    maxLines = <span class="number">2</span>,</span><br><span class="line">                    modifier = Modifier.background(</span><br><span class="line">                            color = Color.LightGray,</span><br><span class="line">                            shape = RoundedCornerShape(<span class="number">20</span>)</span><br><span class="line">                    ).padding(<span class="number">10</span>.dp)</span><br><span class="line">                            .weight(<span class="number">0.3f</span>),</span><br><span class="line">                    textAlign = TextAlign.Center</span><br><span class="line">            );</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果如下所示：<br><img src="/2020/12/12/android_jetpack/compose/row_demo.png" alt="row_demo"><br>这里使用了weight属性进行等分，类似于LinearLayout的weight属性</p><h3 id="Column"><a href="#Column" class="headerlink" title="Column"></a>Column</h3><p>Column提供了纵向布局的能力，如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function">fun <span class="title">ColumnTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> nameList = listOf(<span class="string">"1"</span>, <span class="string">"2"</span>, <span class="string">"3"</span>)</span><br><span class="line">    Column(</span><br><span class="line">            modifier = Modifier.padding(<span class="number">0</span>.dp, <span class="number">16</span>.dp),</span><br><span class="line">            horizontalAlignment = Alignment.CenterHorizontally</span><br><span class="line">    ) &#123;</span><br><span class="line">        nameList.forEach &#123; name -&gt;</span><br><span class="line">            Text(</span><br><span class="line">                    text = <span class="string">"Column $name"</span>,</span><br><span class="line">                    fontSize = TextUnit.Companion.Sp(<span class="number">15</span>),</span><br><span class="line">                    fontStyle = FontStyle.Italic,</span><br><span class="line">                    maxLines = <span class="number">2</span>,</span><br><span class="line">                    modifier = Modifier.background(</span><br><span class="line">                            color = Color.LightGray,</span><br><span class="line">                            shape = RoundedCornerShape(<span class="number">20</span>)</span><br><span class="line">                    ).padding(<span class="number">10</span>.dp)</span><br><span class="line">            );</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果如下所示：</p><p><img src="/2020/12/12/android_jetpack/compose/column_demo.png" alt="column_demo"></p><h3 id="Box"><a href="#Box" class="headerlink" title="Box"></a>Box</h3><p>Box提供了叠放的效果，类似于FrameLayout:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Stack Box</span></span><br><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function">fun <span class="title">StackDemo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Box(modifier = Modifier.padding(<span class="number">0</span>.dp, <span class="number">16</span>.dp)) &#123;</span><br><span class="line">        Text(</span><br><span class="line">                text = <span class="string">"layer one"</span>,</span><br><span class="line">                fontSize = TextUnit.Companion.Sp(<span class="number">30</span>),</span><br><span class="line">                color = Color.Blue,</span><br><span class="line">                fontStyle = FontStyle.Italic</span><br><span class="line">        )</span><br><span class="line">        Text(text = <span class="string">"layer two"</span>, fontSize = TextUnit.Companion.Sp(<span class="number">10</span>))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果如下所示：<br><img src="/2020/12/12/android_jetpack/compose/box_demo.png" alt="box_demo"></p><h3 id="滚动列表"><a href="#滚动列表" class="headerlink" title="滚动列表"></a>滚动列表</h3><p>使用ScrollableRow或ScrollableColumn可使Row或Column内的元素滚动,来看下ScrollableColumn的用法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Artist</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> avatarImg: Int = R.drawable.icon;</span><br><span class="line">    <span class="keyword">var</span> name: String? = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">var</span> intro: String? = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">var</span> img: Int = R.drawable.img;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function">fun <span class="title">ArtistCard</span><span class="params">(artist: Artist, onSelected: (Artist)</span> -&gt; Unit) </span>&#123;</span><br><span class="line">    Column(</span><br><span class="line">        Modifier</span><br><span class="line">            .fillMaxWidth()</span><br><span class="line">            .padding(<span class="number">16</span>.dp)</span><br><span class="line">            .clickable(onClick = &#123; onSelected(artist) &#125;)</span><br><span class="line">    ) &#123;</span><br><span class="line">        Row() &#123;</span><br><span class="line">            val avatarImg = imageResource(artist.avatarImg)</span><br><span class="line">            Image(</span><br><span class="line">                avatarImg,</span><br><span class="line">                modifier = Modifier.background(</span><br><span class="line">                    color = Color.Transparent,</span><br><span class="line">                    shape = RoundedCornerShape(<span class="number">20</span>.dp)</span><br><span class="line">                )</span><br><span class="line">                    .width(<span class="number">60</span>.dp).height(<span class="number">60</span>.dp)</span><br><span class="line">            )</span><br><span class="line">            Column(</span><br><span class="line">                    verticalArrangement = Arrangement.Center,</span><br><span class="line">                    horizontalAlignment = Alignment.CenterHorizontally,</span><br><span class="line">            ) &#123;</span><br><span class="line">                artist.name?.let &#123; Text(text = it) &#125;</span><br><span class="line">                artist.intro?.let &#123;</span><br><span class="line">                    Text(text = it, modifier = Modifier.padding(<span class="number">0</span>.dp, <span class="number">8</span>.dp, <span class="number">0</span>.dp, <span class="number">0</span>.dp))</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        val img = imageResource(artist.img)</span><br><span class="line">        Image(</span><br><span class="line">            img, modifier = Modifier.height(<span class="number">250</span>.dp).padding(<span class="number">0</span>.dp, <span class="number">16</span>.dp, <span class="number">0</span>.dp, <span class="number">0</span>.dp)</span><br><span class="line">                .background(color = Color.LightGray, shape = RoundedCornerShape(<span class="number">20</span>.dp))</span><br><span class="line">                .fillMaxWidth()</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function">fun <span class="title">Feed</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    feedItems: List&lt;Artist&gt;,</span></span></span><br><span class="line"><span class="function"><span class="params">    onSelected: (Artist)</span> -&gt; Unit</span></span><br><span class="line"><span class="function">) </span>&#123;</span><br><span class="line">    <span class="comment">//ScrollableColumn</span></span><br><span class="line">    ScrollableColumn(Modifier.fillMaxSize()) &#123;</span><br><span class="line">        feedItems.forEach &#123;</span><br><span class="line">            ArtistCard(it, onSelected)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> fun <span class="title">ListDemo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    val artistOne = Artist()</span><br><span class="line">    artistOne.name = <span class="string">"张三"</span></span><br><span class="line">    artistOne.intro = <span class="string">"哈哈哈哈"</span></span><br><span class="line">    artistOne.avatarImg = R.drawable.icon</span><br><span class="line">    artistOne.img = R.drawable.img</span><br><span class="line"></span><br><span class="line">    val artistTwo = Artist()</span><br><span class="line">    artistTwo.name = <span class="string">"张三"</span></span><br><span class="line">    artistTwo.intro = <span class="string">"哈哈哈哈"</span></span><br><span class="line">    artistTwo.avatarImg = R.drawable.icon</span><br><span class="line">    artistTwo.img = R.drawable.img</span><br><span class="line"></span><br><span class="line">    val artistThree = Artist()</span><br><span class="line">    artistThree.name = <span class="string">"张三"</span></span><br><span class="line">    artistThree.intro = <span class="string">"哈哈哈哈"</span></span><br><span class="line">    artistThree.avatarImg = R.drawable.icon</span><br><span class="line">    artistThree.img = R.drawable.img</span><br><span class="line"></span><br><span class="line">    Feed(feedItems = listOf(artistOne, artistTwo, artistThree), onSelected = &#123;</span><br><span class="line">        <span class="comment">// Toast.makeText(this, it.name, Toast.LENGTH_SHORT).show();</span></span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><p>效果如下所示：<br><img src="/2020/12/12/android_jetpack/compose/scrollable_column_demo.png" alt="scrollable_column_demo"></p><p>这个ScrollableColumn就类似于Android的ScrollView，如果要显示的元素很少，这种方法效果很好，但对于大型数据集，很快就会出现性能问题。如需仅显示屏幕上可见的部分元素，可以使用LazyColumnFor或LazyRowFor：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function">fun <span class="title">Feed</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">  feedItems: List&lt;Artist&gt;,</span></span></span><br><span class="line"><span class="function"><span class="params">  onSelected: (Artist)</span> -&gt; Unit</span></span><br><span class="line"><span class="function">) </span>&#123;</span><br><span class="line">  Surface(Modifier.fillMaxSize()) &#123;</span><br><span class="line">    LazyColumnFor(feedItems) &#123; item -&gt;</span><br><span class="line">      ArtistCard(item, onSelected(item))</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>以上只是Jetpack Compose的一个简单使用，还有很多高级的知识点没有涉及，包括ConstraintLayout、自定义布局、内置 Material组件、动画、主题，状态以及框架的实现原理等，如下所示：</p><p><img src="/2020/12/12/android_jetpack/compose/compose_pack.png" alt="compose_pack"></p><p>感兴趣的同学可以花时间进行深入研究一番，应该会有收获。</p><p>总体使用下来的感受的话，结合kotlin搭配使用还是挺灵活的，第一次接触这种声明式UI的写法，还是觉得挺新奇的，做为一个新的知识点还是值得学习一下的～～～。</p><p>官方Sample里面有很多优秀的案例可以参考：<br><a href="https://github.com/android/compose-samples" target="_blank" rel="noopener">https://github.com/android/compose-samples</a></p><p>参考：<br><a href="https://developer.android.com/jetpack/compose" target="_blank" rel="noopener">https://developer.android.com/jetpack/compose</a><br><a href="https://developer.android.com/jetpack/compose/layout" target="_blank" rel="noopener">https://developer.android.com/jetpack/compose/layout</a><br><a href="https://developer.android.com/jetpack/compose/mental-model" target="_blank" rel="noopener">https://developer.android.com/jetpack/compose/mental-model</a></p>]]></content>
    
    <summary type="html">
    
      Jetpack Compose初体验
    
    </summary>
    
      <category term="Android架构学习" scheme="http://easyliu.com/categories/Android%E6%9E%B6%E6%9E%84%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Android" scheme="http://easyliu.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>hexo插入音频和视频</title>
    <link href="http://easyliu.com/2020/11/22/hexo/insert_video/"/>
    <id>http://easyliu.com/2020/11/22/hexo/insert_video/</id>
    <published>2020-11-22T04:08:15.000Z</published>
    <updated>2021-02-18T11:57:32.993Z</updated>
    
    <content type="html"><![CDATA[<h2 id="音视频准备"><a href="#音视频准备" class="headerlink" title="音视频准备"></a>音视频准备</h2><h3 id="在线音视频"><a href="#在线音视频" class="headerlink" title="在线音视频"></a>在线音视频</h3><p>如果是在线音视频的话，只要有url就行</p><h3 id="本地音视频"><a href="#本地音视频" class="headerlink" title="本地音视频"></a>本地音视频</h3><p>在public文件夹下面新建一个resources目录，把视频和音频放在这个目录里面，这里我把视频放在video子目录下面，把音频放在audio子目录下面。</p><blockquote><p>为啥要把资源放在public？只有把资源放在public文件夹下面，网页才能访问！！最开始就是在这里卡了很久一直没法播放，原来是路径设置不对导致没法访问</p></blockquote><h2 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h2><p>安装aplayer以及dplayer:</p><blockquote><p>npm install hexo-tag-aplayer</p><p>npm install hexo-tag-dplayer</p></blockquote><p>关于aplayer以及dplayer语法，参考：</p><p><a href="https://github.com/MoePlayer/hexo-tag-aplayer" target="_blank" rel="noopener">hexo-tag-aplayer</a></p><p><a href="https://github.com/MoePlayer/hexo-tag-dplayer" target="_blank" rel="noopener">hexo-tag-dplayer</a></p><p><a href="https://www.jianshu.com/p/26a7fc7cc185" target="_blank" rel="noopener">Hexo博客中插入音乐/视频/</a></p><p><a href="https://github.com/DIYgod/DPlayer" target="_blank" rel="noopener">DPlayer</a></p><p><a href="http://dplayer.js.org/guide.html#quick-start" target="_blank" rel="noopener">http://dplayer.js.org/guide.html#quick-start</a></p><p>然后在md文件中插入如下代码，视频就正常加载起播了，这里播放的是本地视频！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&#123;% </span><br><span class="line">    dplayer     </span><br><span class="line">    <span class="string">"url=/resources/video/scenery.mp4"</span>  <span class="comment">//设置视频目录，这里我放在了网站根目录下面，也就是public目录下面 </span></span><br><span class="line">    <span class="string">"pic=/resources/images/scenery_three.jpeg"</span> <span class="comment">//设置封面图，同样是放在根目录下面 </span></span><br><span class="line">    <span class="string">"loop=yes"</span>  <span class="comment">//循环播放</span></span><br><span class="line">    <span class="string">"theme=#FADFA3"</span>   <span class="comment">//主题</span></span><br><span class="line">    <span class="string">"autoplay=true"</span>  <span class="comment">//自动播放</span></span><br><span class="line">    <span class="string">"screenshot=true"</span> <span class="comment">//允许截屏</span></span><br><span class="line">    <span class="string">"hotkey=true"</span> <span class="comment">//允许hotKey，比如点击空格暂停视频等操作</span></span><br><span class="line">    <span class="string">"preload=auto"</span> <span class="comment">//预加载：auto</span></span><br><span class="line">    <span class="string">"volume=0.9"</span>  <span class="comment">//初始音量</span></span><br><span class="line">    <span class="string">"playbackSpeed=1"</span><span class="comment">//播放速度1倍速，可以选择1.5,2等</span></span><br><span class="line">    <span class="string">"lang=zh-cn"</span><span class="comment">//语言</span></span><br><span class="line">    <span class="string">"mutex=true"</span><span class="comment">//播放互斥，就比如其他视频播放就会导致这个视频自动暂停</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//下面是弹幕相关</span></span><br><span class="line">    <span class="string">"id=9E2E3368B56CD123BB4"</span></span><br><span class="line">    <span class="string">"api=https://api.prprpr.me/dplayer/"</span></span><br><span class="line">    <span class="string">"token=tokendemo"</span></span><br><span class="line">    <span class="string">"maximum=1000"</span></span><br><span class="line">    <span class="string">"addition=['https://api.prprpr.me/dplayer/v3/bilibili?aid=4157142']"</span></span><br><span class="line">    <span class="string">"user=DIYgod"</span></span><br><span class="line">    <span class="string">"bottom=15%"</span></span><br><span class="line">    <span class="string">"unlimited=true"</span></span><br><span class="line">%&#125;</span><br></pre></td></tr></table></figure><p>以上只是部分设置，更多参数设置参考<a href="https://github.com/DIYgod/DPlayer" target="_blank" rel="noopener">DPlayer</a></p><div id="dplayer2" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer2"),"autoplay":true,"theme":"#FADFA3","loop":true,"lang":"zh-cn","screenshot":true,"hotkey":true,"preload":"auto","volume":0.9,"mutex":true,"video":{"url":"/resources/video/scenery.mp4","pic":"/resources/images/scenery_three.jpeg"},"danmaku":{"id":"9E2E3368B56CD123BB4","api":"https://api.prprpr.me/dplayer/","token":"tokendemo","maximum":1000,"addition":["['https://api.prprpr.me/dplayer/v3/bilibili?aid=4157142']"]}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script><p>插入音频代码,音频就正常加载起播了，这里播放的是在线音频！</p><p>aplayer安装不了，先注释：</p><hr align="center" width="“100%”" color="#0e0e0e" size="1"><font size="3" color="red">如果您觉得写的还不错，感谢支持：</font><p align="center"><img src="/resources/images/wechat_pay.png" width="150/"><img src="/resources/images/ali_pay.jpeg" width="150/"></p>]]></content>
    
    <summary type="html">
    
      hexo插入音频和视频
    
    </summary>
    
      <category term="开发工具" scheme="http://easyliu.com/categories/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="hexo进阶" scheme="http://easyliu.com/tags/hexo%E8%BF%9B%E9%98%B6/"/>
    
  </entry>
  
  <entry>
    <title>厦门——2020.11.22-24</title>
    <link href="http://easyliu.com/2020/11/22/life/2020_11_22-24-xiamen/"/>
    <id>http://easyliu.com/2020/11/22/life/2020_11_22-24-xiamen/</id>
    <published>2020-11-22T02:39:18.000Z</published>
    <updated>2021-02-18T11:58:18.067Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2020/11/22/life/2020_11_22-24-xiamen/WechatIMG18.jpeg" alt="WechatIMG18"><br><img src="/2020/11/22/life/2020_11_22-24-xiamen/WechatIMG19.jpeg" alt="WechatIMG19"><br><img src="/2020/11/22/life/2020_11_22-24-xiamen/WechatIMG20.jpeg" alt="WechatIMG20"><br><img src="/2020/11/22/life/2020_11_22-24-xiamen/WechatIMG21.jpeg" alt="WechatIMG21"><br><img src="/2020/11/22/life/2020_11_22-24-xiamen/WechatIMG22.jpeg" alt="WechatIMG22"><br><img src="/2020/11/22/life/2020_11_22-24-xiamen/WechatIMG23.jpeg" alt="WechatIMG23"><br><img src="/2020/11/22/life/2020_11_22-24-xiamen/WechatIMG24.jpeg" alt="WechatIMG24"><br><img src="/2020/11/22/life/2020_11_22-24-xiamen/WechatIMG25.jpeg" alt="WechatIMG25"><br><img src="/2020/11/22/life/2020_11_22-24-xiamen/WechatIMG26.jpeg" alt="WechatIMG26"><br><img src="/2020/11/22/life/2020_11_22-24-xiamen/WechatIMG27.jpeg" alt="WechatIMG27"><br><img src="/2020/11/22/life/2020_11_22-24-xiamen/WechatIMG28.jpeg" alt="WechatIMG28"><br><img src="/2020/11/22/life/2020_11_22-24-xiamen/WechatIMG29.jpeg" alt="WechatIMG29"><br><img src="/2020/11/22/life/2020_11_22-24-xiamen/WechatIMG30.jpeg" alt="WechatIMG30"></p>]]></content>
    
    <summary type="html">
    
      厦门——2020.11.22-24
    
    </summary>
    
      <category term="旅游" scheme="http://easyliu.com/categories/%E6%97%85%E6%B8%B8/"/>
    
    
      <category term="日常生活" scheme="http://easyliu.com/tags/%E6%97%A5%E5%B8%B8%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>梧桐山——2020.11.21</title>
    <link href="http://easyliu.com/2020/11/22/life/2020_11_21_wutong_mountain/"/>
    <id>http://easyliu.com/2020/11/22/life/2020_11_21_wutong_mountain/</id>
    <published>2020-11-22T02:10:28.000Z</published>
    <updated>2021-02-18T11:58:18.067Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2020/11/22/life/2020_11_21_wutong_mountain/one.jpeg" alt="one"><br><img src="/2020/11/22/life/2020_11_21_wutong_mountain/two.jpeg" alt="two"><br><img src="/2020/11/22/life/2020_11_21_wutong_mountain/three.jpeg" alt="three"></p><h2 id="看我犀利的眼神"><a href="#看我犀利的眼神" class="headerlink" title="看我犀利的眼神"></a>看我犀利的眼神</h2><p><img src="/2020/11/22/life/2020_11_21_wutong_mountain/four.jpeg" alt="four"><br><img src="/2020/11/22/life/2020_11_21_wutong_mountain/five.jpeg" alt="five"><br><img src="/2020/11/22/life/2020_11_21_wutong_mountain/six.jpeg" alt="six"><br><img src="/2020/11/22/life/2020_11_21_wutong_mountain/seven.jpeg" alt="seven"><br><img src="/2020/11/22/life/2020_11_21_wutong_mountain/eight.jpeg" alt="eight"></p><h2 id="置身仙境"><a href="#置身仙境" class="headerlink" title="置身仙境"></a>置身仙境</h2><p><img src="/2020/11/22/life/2020_11_21_wutong_mountain/nine.jpeg" alt="nine"></p>]]></content>
    
    <summary type="html">
    
      梧桐山——2020.11.21
    
    </summary>
    
      <category term="周末活动" scheme="http://easyliu.com/categories/%E5%91%A8%E6%9C%AB%E6%B4%BB%E5%8A%A8/"/>
    
    
      <category term="日常生活" scheme="http://easyliu.com/tags/%E6%97%A5%E5%B8%B8%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>Android MVVM框架之Livedata以及ViewModel</title>
    <link href="http://easyliu.com/2020/11/07/android_jetpack/livedata/"/>
    <id>http://easyliu.com/2020/11/07/android_jetpack/livedata/</id>
    <published>2020-11-07T10:07:19.000Z</published>
    <updated>2022-02-17T07:16:54.400Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><h3 id="场景1"><a href="#场景1" class="headerlink" title="场景1:"></a>场景1:</h3><p>假设现在我们在Activity或者fragment当中会监听数据Model的回调，在回调里面会更新一些UI的状态，那么就会存在以下问题：</p><blockquote><p>1、当页面不可见的时候也是能收到回调的，相当于在后台进行UI刷新，这个其实是不对的。一般情况下如果想解决这个问题的话就需要在onStop的时候反注册Model监听，然后等页面回来onStart的时候重新注册Model监听且需要主动读取一次Model数据进行ui刷新，听起来是不是很麻烦？</p><p>2、在onDestory里面会需要主动反注册Model的回调,如果忘记反注册就会导致内存泄漏问题</p></blockquote><p>针对这个问题，google在jetpack组件的Android架构组件当中提供了LiveData类来解决这个问题</p><h3 id="场景2"><a href="#场景2" class="headerlink" title="场景2"></a>场景2</h3><p>Activity或者Fragment在后台的时候可能由于资源不足导致销毁重新创建，就会导致界面数据丢失问题，对于简单的数据，Activity 可以使用 onSaveInstanceState() 方法从 onCreate() 中的Bundle恢复其数据，但此方法仅适合可以序列化再反序列化的少量数据，而不适合数量可能较大的数据，如用户列表或位图</p><p>针对这个问题google在jetpack组件的Android架构组件当中提供了ViewModel类来解决这个问题</p><h2 id="MVVM框架"><a href="#MVVM框架" class="headerlink" title="MVVM框架"></a>MVVM框架</h2><p>大家可以看下google推荐的Android架构图,如下所示。ViewModel和LiveData是一起配套使用的，组成了MVVM架构：<br><img src="/2020/11/07/android_jetpack/livedata/final-architecture.png" alt="架构图"></p><h2 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h2><p>ViewModel及LiveData的接入方式参考:<br><a href="https://developer.android.com/jetpack/androidx/releases/lifecycle" target="_blank" rel="noopener">https://developer.android.com/jetpack/androidx/releases/lifecycle</a></p><p>下面看下使用方式：<br>1、首先自定义一个ViewModel类:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NameViewModel</span> <span class="keyword">extends</span> <span class="title">ViewModel</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Create a LiveData with a String</span></span><br><span class="line"><span class="keyword">private</span> MutableLiveData&lt;String&gt; currentName;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MutableLiveData&lt;String&gt; <span class="title">getCurrentName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (currentName == <span class="keyword">null</span>) &#123;</span><br><span class="line">            currentName = <span class="keyword">new</span> MutableLiveData&lt;String&gt;();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> currentName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Rest of the ViewModel...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>自定义一个NamaViewModel继承自ViewModel，稍后会对ViewModel源码进行解析。里面有一个MutableLiveData对象，它是LiveData子类，稍后会对LiveData源码进行解析。</p><p>2、接下来看下这个NameViewModel的使用方式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NameActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> NameViewModel model;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Other code to setup the activity...</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Get the ViewModel.</span></span><br><span class="line">        model = <span class="keyword">new</span> ViewModelProvider(<span class="keyword">this</span>,<span class="keyword">new</span> NewInstanceFactory()).get(NameViewModel<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Create the observer which updates the UI.</span></span><br><span class="line">        <span class="keyword">final</span> Observer&lt;String&gt; nameObserver = <span class="keyword">new</span> Observer&lt;String&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onChanged</span><span class="params">(@Nullable <span class="keyword">final</span> String newName)</span> </span>&#123;</span><br><span class="line">                <span class="comment">// Update the UI, in this case, a TextView.</span></span><br><span class="line">                nameTextView.setText(newName);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Observe the LiveData, passing in this activity as the LifecycleOwner and the observer.</span></span><br><span class="line">        model.getCurrentName().observe(<span class="keyword">this</span>, nameObserver);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看出从ViewModelProvider里面根据class类型到了一个NameViewModel，然后给里面的LiveData注册了一个观察者Observer，在这个Observer会更新TextView的显示文本</p><p>3、更新数据：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">button.setOnClickListener(<span class="keyword">new</span> OnClickListener() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">        String anotherName = <span class="string">"John Doe"</span>;</span><br><span class="line">        model.getCurrentName().setValue(anotherName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>更新数据的方式也很简单，调用LiveData里面的setValue方法即可，如果是在子线程，就调用postValue方法</p><p>以上就是ViewModel+LiveData的使用方式，接下来分别对LiveData及ViewModel进行源码剖析</p><h2 id="LiveData"><a href="#LiveData" class="headerlink" title="LiveData"></a>LiveData</h2><p>LiveData为什么可以解决开头提到的第一个问题<a href="#场景1">场景1</a></p><p>来看下官网关于LiveData的描述：</p><blockquote><p>LiveData 是一种可观察的数据存储器类。与常规的可观察类不同，LiveData 具有生命周期感知能力，意指它遵循其他应用组件（如 Activity、Fragment 或 Service）的生命周期。这种感知能力可确保 LiveData 仅更新处于活跃生命周期状态的应用组件观察者。<br>如果观察者（由 Observer 类表示）的生命周期处于 STARTED 或 RESUMED 状态，则 LiveData 会认为该观察者处于活跃状态。LiveData 只会将更新通知给活跃的观察者。为观察 LiveData 对象而注册的非活跃观察者不会收到更改通知</p></blockquote><p>看起来很厉害的样子，接下来从源码的角度来进行分析：</p><h3 id="LiveData源码解析"><a href="#LiveData源码解析" class="headerlink" title="LiveData源码解析"></a>LiveData源码解析</h3><h4 id="首先是observer方法："><a href="#首先是observer方法：" class="headerlink" title="首先是observer方法："></a>首先是observer方法：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">observe</span><span class="params">(@NonNull LifecycleOwner owner, @NonNull Observer&lt;T&gt; observer)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (owner.getLifecycle().getCurrentState() == DESTROYED) &#123;</span><br><span class="line">        <span class="comment">// ignore</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    LifecycleBoundObserver wrapper = <span class="keyword">new</span> LifecycleBoundObserver(owner, observer);</span><br><span class="line">    ObserverWrapper existing = mObservers.putIfAbsent(observer, wrapper);</span><br><span class="line">    <span class="keyword">if</span> (existing != <span class="keyword">null</span> &amp;&amp; !existing.isAttachedTo(owner)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Cannot add the same observer"</span></span><br><span class="line">                + <span class="string">" with different lifecycles"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (existing != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    owner.getLifecycle().addObserver(wrapper);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到observer方法传入了2个参数： LifecycleOwner（如果对LifecycleOwner不太了解，参考之前的博文：<a href="https://easyliu-ly.github.io/2020/10/31/android_jetpack/lifecycle/" target="_blank" rel="noopener">Android生命周期感应组件lifecycle</a>）和Observer接口，Oberver就是一个简单的观察接口，通过泛型代表具体的数据类型：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Observer</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Called when the data is changed.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> t  The new data</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onChanged</span><span class="params">(@Nullable T t)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法主要分为几部分：</p><p>1、如果当前LifecycleOwner是destoryed的状态就直接返回<br>2、生成一个LifecycleBoundObserver对象wrapper，放入mObservers这个Map当中<br>3、最后把wrapper加入到Lifecycle里面，从这里可以看出LifecycleBoundObserver实现了Lifecycle接口</p><p>解析来看下这个LifecycleBoundObserver对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LifecycleBoundObserver</span> <span class="keyword">extends</span> <span class="title">ObserverWrapper</span> <span class="keyword">implements</span> <span class="title">GenericLifecycleObserver</span> </span>&#123;</span><br><span class="line">        <span class="meta">@NonNull</span> <span class="keyword">final</span> LifecycleOwner mOwner;</span><br><span class="line"></span><br><span class="line">        LifecycleBoundObserver(<span class="meta">@NonNull</span> LifecycleOwner owner, Observer&lt;T&gt; observer) &#123;</span><br><span class="line">            <span class="keyword">super</span>(observer);</span><br><span class="line">            mOwner = owner;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">boolean</span> <span class="title">shouldBeActive</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> mOwner.getLifecycle().getCurrentState().isAtLeast(STARTED);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStateChanged</span><span class="params">(LifecycleOwner source, Lifecycle.Event event)</span> </span>&#123;</span><br><span class="line">            <span class="comment">//1、在LifecycleOwner销毁了之后会自动移除obverver，解决内存泄漏问题</span></span><br><span class="line">            <span class="keyword">if</span> (mOwner.getLifecycle().getCurrentState() == DESTROYED) &#123;</span><br><span class="line">                removeObserver(mObserver);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            activeStateChanged(shouldBeActive());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">boolean</span> <span class="title">isAttachedTo</span><span class="params">(LifecycleOwner owner)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> mOwner == owner;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">detachObserver</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            mOwner.getLifecycle().removeObserver(<span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">ObserverWrapper</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> Observer&lt;T&gt; mObserver;</span><br><span class="line">        <span class="keyword">boolean</span> mActive;</span><br><span class="line">        <span class="keyword">int</span> mLastVersion = START_VERSION;</span><br><span class="line"></span><br><span class="line">        ObserverWrapper(Observer&lt;T&gt; observer) &#123;</span><br><span class="line">            mObserver = observer;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">abstract</span> <span class="keyword">boolean</span> <span class="title">shouldBeActive</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">boolean</span> <span class="title">isAttachedTo</span><span class="params">(LifecycleOwner owner)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">detachObserver</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">activeStateChanged</span><span class="params">(<span class="keyword">boolean</span> newActive)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (newActive == mActive) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// immediately set active state, so we'd never dispatch anything to inactive</span></span><br><span class="line">            <span class="comment">// owner</span></span><br><span class="line">            mActive = newActive;</span><br><span class="line">            <span class="keyword">boolean</span> wasInactive = LiveData.<span class="keyword">this</span>.mActiveCount == <span class="number">0</span>;</span><br><span class="line">            LiveData.<span class="keyword">this</span>.mActiveCount += mActive ? <span class="number">1</span> : -<span class="number">1</span>;</span><br><span class="line">            <span class="comment">//变成active状态</span></span><br><span class="line">            <span class="keyword">if</span> (wasInactive &amp;&amp; mActive) &#123;</span><br><span class="line">                onActive();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//变成InActive状态</span></span><br><span class="line">            <span class="keyword">if</span> (LiveData.<span class="keyword">this</span>.mActiveCount == <span class="number">0</span> &amp;&amp; !mActive) &#123;</span><br><span class="line">                onInactive();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//2、从InActive变成Active，会自动dispatchVaule，也就是页面可见的时候就会自动收到最新的数据回调</span></span><br><span class="line">            <span class="keyword">if</span> (mActive) &#123;</span><br><span class="line">                dispatchingValue(<span class="keyword">this</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>从以上代码可以看出，LifecycleBoundObserver实现了Lifecycle生命周期接口，能够自动感应生命周期的变化，并且解决了最开始<a href="#场景1">场景1</a>提出的2个问题：</p><p>1、在LifecycleOwner销毁了之后会自动移除obverver，解决内存泄漏问题<br>2、从InActive变成Active，会自动dispatchVaule，也就是页面可见的时候就会自动收到最新的数据回调</p><p>我们还注意到LiveData有两个方法:onActive和onInactive，这两个方法在LiveData是空方法，子类可以覆写这俩个方法，在里面做一些注册和反注册的操作，如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StockLiveData</span> <span class="keyword">extends</span> <span class="title">LiveData</span>&lt;<span class="title">BigDecimal</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> StockManager stockManager;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> SimplePriceListener listener = <span class="keyword">new</span> SimplePriceListener() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPriceChanged</span><span class="params">(BigDecimal price)</span> </span>&#123;</span><br><span class="line">            setValue(price);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">StockLiveData</span><span class="params">(String symbol)</span> </span>&#123;</span><br><span class="line">        stockManager = <span class="keyword">new</span> StockManager(symbol);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onActive</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        stockManager.requestPriceUpdates(listener);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onInactive</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        stockManager.removeUpdates(listener);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="接下来是setValue以及postValue"><a href="#接下来是setValue以及postValue" class="headerlink" title="接下来是setValue以及postValue"></a>接下来是setValue以及postValue</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Runnable mPostValueRunnable = <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Object newValue;</span><br><span class="line">        <span class="keyword">synchronized</span> (mDataLock) &#123;</span><br><span class="line">            newValue = mPendingData;</span><br><span class="line">            mPendingData = NOT_SET;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//noinspection unchecked</span></span><br><span class="line">        setValue((T) newValue);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">postValue</span><span class="params">(T value)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">boolean</span> postTask;</span><br><span class="line">    <span class="keyword">synchronized</span> (mDataLock) &#123;</span><br><span class="line">        postTask = mPendingData == NOT_SET;</span><br><span class="line">        mPendingData = value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!postTask) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ArchTaskExecutor.getInstance().postToMainThread(mPostValueRunnable);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Sets the value. If there are active observers, the value will be dispatched to them.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * This method must be called from the main thread. If you need set a value from a background</span></span><br><span class="line"><span class="comment"> * thread, you can use &#123;<span class="doctag">@link</span> #postValue(Object)&#125;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> value The new value</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@MainThread</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">setValue</span><span class="params">(T value)</span> </span>&#123;</span><br><span class="line">    assertMainThread(<span class="string">"setValue"</span>);</span><br><span class="line">    mVersion++;</span><br><span class="line">    mData = value;</span><br><span class="line">    dispatchingValue(<span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看出postValue用于在子线程调用的场景，post到主线程执行setValue。这里大家可能有个疑问就是这个postValue以及setValue都是protected方法，外部怎么调用呢？一般情况下使用MutableLiveData：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> LiveData&#125; which publicly exposes &#123;<span class="doctag">@link</span> #setValue(T)&#125; and &#123;<span class="doctag">@link</span> #postValue(T)&#125; method.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &lt;T&gt; The type of data hold by this instance</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"WeakerAccess"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MutableLiveData</span>&lt;<span class="title">T</span>&gt; <span class="keyword">extends</span> <span class="title">LiveData</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postValue</span><span class="params">(T value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.postValue(value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setValue</span><span class="params">(T value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.setValue(value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上就是LiveData源码分析结果，可以看出主要还是借助了Lifecycle生命周期自动感应的特性来解决问题。LiveData还有一些高级的玩法，具体参考：<br><a href="https://developer.android.com/topic/libraries/architecture/livedata" target="_blank" rel="noopener">https://developer.android.com/topic/libraries/architecture/livedata</a></p><h2 id="ViewModel"><a href="#ViewModel" class="headerlink" title="ViewModel"></a>ViewModel</h2><p>ViewModel为什么可以解决开头提到的第二个问题<a href="#场景2">场景2</a></p><p>来看下官网关于ViewModel的描述：</p><p>ViewModel 类旨在以注重生命周期的方式存储和管理界面相关的数据。ViewModel类让数据可在发生屏幕旋转等配置更改后继续留存。</p><p>先来回顾一下ViewModel的使用方式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NameActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> NameViewModel model;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Other code to setup the activity...</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Get the ViewModel.</span></span><br><span class="line">        <span class="comment">// 只要是同一个Activity，数据就是同一份</span></span><br><span class="line">        model = <span class="keyword">new</span> ViewModelProvider(<span class="keyword">this</span>,<span class="keyword">new</span> NewInstanceFactory()).get(NameViewModel<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Create the observer which updates the UI.</span></span><br><span class="line">        <span class="keyword">final</span> Observer&lt;String&gt; nameObserver = <span class="keyword">new</span> Observer&lt;String&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onChanged</span><span class="params">(@Nullable <span class="keyword">final</span> String newName)</span> </span>&#123;</span><br><span class="line">                <span class="comment">// Update the UI, in this case, a TextView.</span></span><br><span class="line">                nameTextView.setText(newName);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Observe the LiveData, passing in this activity as the LifecycleOwner and the observer.</span></span><br><span class="line">        model.getCurrentName().observe(<span class="keyword">this</span>, nameObserver);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看出如果重新创建了NameActivity，它接收的NameViewModel实例与第一个NameActivity创建的实例相同，这样就数据就不会存在丢失的问题。当所有者NameActivity走了finish销毁之后，框架会调用ViewModel对象的onCleared()方法，以便它可以清理资源。</p><p>来看下ViewModel的生命周期</p><h3 id="ViewModel生命周期"><a href="#ViewModel生命周期" class="headerlink" title="ViewModel生命周期"></a>ViewModel生命周期</h3><p>ViewModel 对象存在的时间范围是获取 ViewModel 时传递给 ViewModelProvider 的 Lifecycle。ViewModel 将一直留在内存中，直到限定其存在时间范围的 Lifecycle 永久消失：对于 Activity，是在 Activity 完成时；而对于 Fragment，是在 Fragment 分离时。如下图所示：<br><img src="/2020/11/07/android_jetpack/livedata/viewmodel-lifecycle.png" alt="ViewModel生命周期"></p><p>在系统首次调用 Activity 对象的 onCreate() 方法时请求 ViewModel。系统可能会在 Activity 的整个生命周期内多次调用 onCreate()，如在旋转设备屏幕时。ViewModel 存在的时间范围是从首次请求 ViewModel 直到 Activity 完成并销毁。</p><p>接下来看下对ViewModel源码进行解析：</p><h3 id="ViewModel源码解析"><a href="#ViewModel源码解析" class="headerlink" title="ViewModel源码解析"></a>ViewModel源码解析</h3><h4 id="ViewModel："><a href="#ViewModel：" class="headerlink" title="ViewModel："></a>ViewModel：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">ViewModel</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * This method will be called when this ViewModel is no longer used and will be destroyed.</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * It is useful when ViewModel observes some data and you need to clear this subscription to</span></span><br><span class="line"><span class="comment">     * prevent a leak of this ViewModel.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"WeakerAccess"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCleared</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看出ViewModel本身的话比较简单，就是一个抽象类，里面有一个onCleared（）方法，子类在这个方法里面可以做一些资源清理的操作</p><p>ViewModel有一个子类AndroidViewModel：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AndroidViewModel</span> <span class="keyword">extends</span> <span class="title">ViewModel</span> </span>&#123;</span><br><span class="line">    <span class="meta">@SuppressLint</span>(<span class="string">"StaticFieldLeak"</span>)</span><br><span class="line">    <span class="keyword">private</span> Application mApplication;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AndroidViewModel</span><span class="params">(@NonNull Application application)</span> </span>&#123;</span><br><span class="line">        mApplication = application;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Return the application.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"TypeParameterUnusedInFormals"</span>)</span><br><span class="line">    <span class="meta">@NonNull</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T extends Application&gt; <span class="function">T <span class="title">getApplication</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//noinspection unchecked</span></span><br><span class="line">        <span class="keyword">return</span> (T) mApplication;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一般情况下我们使用的时候是直接继承自AndroidViewModel，因为里面持有Application,可以获取到Android系统的一些系统资源</p><p>那么到这里大家就会有个疑问，ViewModel就这么简单？ViewModel的onCleared()方法是谁负责调用的呢？</p><p>首先ViewModel的获取方式为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">model = <span class="keyword">new</span> ViewModelProvider(<span class="keyword">this</span>,<span class="keyword">new</span> NewInstanceFactory()).get(NameViewModel<span class="class">.<span class="keyword">class</span>)</span>;</span><br></pre></td></tr></table></figure><h4 id="ViewModelProvider"><a href="#ViewModelProvider" class="headerlink" title="ViewModelProvider"></a>ViewModelProvider</h4><p>我们来看下ViewModelProvider构造函数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ViewModelProvider</span><span class="params">(@NonNull ViewModelStoreOwner owner, @NonNull Factory factory)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>(owner.getViewModelStore(), factory);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ViewModelProvider</span><span class="params">(@NonNull ViewModelStore store, @NonNull Factory factory)</span> </span>&#123;</span><br><span class="line">    mFactory = factory;</span><br><span class="line">    <span class="keyword">this</span>.mViewModelStore = store;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看出传入的第一个参数为一个接口ViewModelStoreOwner，说明Activity实现了这个接口，返回一个ViewModelStore类型，第二个参数是一个工厂类，代表model创建工厂,系统提供了两个默认的工厂，分别是NewInstanceFactory用于创建普通的ViewModel，AndroidViewModelFactory用于创建AndroidViewModel</p><p>接下来看下get方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@NonNull</span></span><br><span class="line">   <span class="meta">@MainThread</span></span><br><span class="line">   <span class="keyword">public</span> &lt;T extends ViewModel&gt; <span class="function">T <span class="title">get</span><span class="params">(@NonNull Class&lt;T&gt; modelClass)</span> </span>&#123;</span><br><span class="line">       String canonicalName = modelClass.getCanonicalName();</span><br><span class="line">       <span class="keyword">if</span> (canonicalName == <span class="keyword">null</span>) &#123;</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Local and anonymous classes can not be ViewModels"</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> get(DEFAULT_KEY + <span class="string">":"</span> + canonicalName, modelClass);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@NonNull</span></span><br><span class="line">   <span class="meta">@MainThread</span></span><br><span class="line">   <span class="keyword">public</span> &lt;T extends ViewModel&gt; <span class="function">T <span class="title">get</span><span class="params">(@NonNull String key, @NonNull Class&lt;T&gt; modelClass)</span> </span>&#123;</span><br><span class="line">       ViewModel viewModel = mViewModelStore.get(key);</span><br><span class="line"></span><br><span class="line">       <span class="keyword">if</span> (modelClass.isInstance(viewModel)) &#123;</span><br><span class="line">           <span class="comment">//noinspection unchecked</span></span><br><span class="line">           <span class="keyword">return</span> (T) viewModel;</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           <span class="comment">//noinspection StatementWithEmptyBody</span></span><br><span class="line">           <span class="keyword">if</span> (viewModel != <span class="keyword">null</span>) &#123;</span><br><span class="line">               <span class="comment">// <span class="doctag">TODO:</span> log a warning.</span></span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       viewModel = mFactory.create(modelClass);</span><br><span class="line">       mViewModelStore.put(key, viewModel);</span><br><span class="line">       <span class="comment">//noinspection unchecked</span></span><br><span class="line">       <span class="keyword">return</span> (T) viewModel;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>可以看出get方法就是从ViewModleStore里面根据key获得一个ViewModel返回，如果获取不到就通过factory创建一个ViewModel放入ViewModelStore当中,然后返回ViewModel。</p><h4 id="ViewModelStore"><a href="#ViewModelStore" class="headerlink" title="ViewModelStore"></a>ViewModelStore</h4><p>那么这里我们来看下ViewModelStore是个什么东东：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ViewModelStore</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> HashMap&lt;String, ViewModel&gt; mMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(String key, ViewModel viewModel)</span> </span>&#123;</span><br><span class="line">        ViewModel oldViewModel = mMap.put(key, viewModel);</span><br><span class="line">        <span class="keyword">if</span> (oldViewModel != <span class="keyword">null</span>) &#123;</span><br><span class="line">            oldViewModel.onCleared();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">final</span> ViewModel <span class="title">get</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mMap.get(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  Clears internal storage and notifies ViewModels that they are no longer used.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (ViewModel vm : mMap.values()) &#123;</span><br><span class="line">            vm.onCleared();</span><br><span class="line">        &#125;</span><br><span class="line">        mMap.clear();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到ViewModelStore里面其实就是一个HashMap，存有这个ViewModelProvider里面所有的ViewModel，一个ViewModelProvider跟一个页面进行对应。可以看到ViewModelStore里面还有一个clear方法，里面就调用了每个ViewModel的onCleared()方法，根据前面对ViewModel生命周期的说明，这个clear方法应该是在lifecycle的onDestroyed方法调用的。</p><p>通过Android Studio的find usage找到这个clear()方法的调用链，发现在lifecycle的extension包下面找到了一个叫做HolderFragment的类:</p><h4 id="HolderFragment"><a href="#HolderFragment" class="headerlink" title="HolderFragment"></a>HolderFragment</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@hide</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestrictTo</span>(RestrictTo.Scope.LIBRARY_GROUP)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HolderFragment</span> <span class="keyword">extends</span> <span class="title">Fragment</span> <span class="keyword">implements</span> <span class="title">ViewModelStoreOwner</span> </span>&#123;</span><br><span class="line">    ..............</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ViewModelStore mViewModelStore = <span class="keyword">new</span> ViewModelStore();</span><br><span class="line">    </span><br><span class="line">    ................</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onDestroy();</span><br><span class="line">        mViewModelStore.clear();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@hide</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RestrictTo</span>(RestrictTo.Scope.LIBRARY_GROUP)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> HolderFragment <span class="title">holderFragmentFor</span><span class="params">(FragmentActivity activity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sHolderFragmentManager.holderFragmentFor(activity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@hide</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RestrictTo</span>(RestrictTo.Scope.LIBRARY_GROUP)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> HolderFragment <span class="title">holderFragmentFor</span><span class="params">(Fragment fragment)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sHolderFragmentManager.holderFragmentFor(fragment);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>在这个fragment的onDestroy()方法里面调用了ViewModelStore的clear方法。熟悉lifecycle的朋友看到这里是不是有一种豁然开朗的感觉，这个HolderFragment肯定是跟ViewModelProvider对应的页面进行了绑定！那么HolderFragment是啥时候跟页面进行绑定的呢？</p><p>来看下holderFragmentFor(FragmentActivity activity)调用的地方：</p><h4 id="ViewModelStores"><a href="#ViewModelStores" class="headerlink" title="ViewModelStores"></a>ViewModelStores</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"WeakerAccess"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ViewModelStores</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NonNull</span></span><br><span class="line">    <span class="meta">@MainThread</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ViewModelStore <span class="title">of</span><span class="params">(@NonNull FragmentActivity activity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (activity <span class="keyword">instanceof</span> ViewModelStoreOwner) &#123;</span><br><span class="line">            <span class="keyword">return</span> ((ViewModelStoreOwner) activity).getViewModelStore();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> holderFragmentFor(activity).getViewModelStore();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NonNull</span></span><br><span class="line">    <span class="meta">@MainThread</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ViewModelStore <span class="title">of</span><span class="params">(@NonNull Fragment fragment)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (fragment <span class="keyword">instanceof</span> ViewModelStoreOwner) &#123;</span><br><span class="line">            <span class="keyword">return</span> ((ViewModelStoreOwner) fragment).getViewModelStore();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> holderFragmentFor(fragment).getViewModelStore();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看出这个ViewModelStores是一个工具类，用于生成ViewModelStore，而这个ViewModelStore就是从HolderFragment获取的，这个HolderFragment就挂载在这个fragment或者activity上面，接下来看下ViewModelStores的of方法调用的地方：</p><h4 id="ViewModelProviders"><a href="#ViewModelProviders" class="headerlink" title="ViewModelProviders"></a>ViewModelProviders</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ViewModelProviders</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NonNull</span></span><br><span class="line">    <span class="meta">@MainThread</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ViewModelProvider <span class="title">of</span><span class="params">(@NonNull Fragment fragment)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> of(fragment, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NonNull</span></span><br><span class="line">    <span class="meta">@MainThread</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ViewModelProvider <span class="title">of</span><span class="params">(@NonNull FragmentActivity activity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> of(activity, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NonNull</span></span><br><span class="line">    <span class="meta">@MainThread</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ViewModelProvider <span class="title">of</span><span class="params">(@NonNull Fragment fragment, @Nullable Factory factory)</span> </span>&#123;</span><br><span class="line">        Application application = checkApplication(checkActivity(fragment));</span><br><span class="line">        <span class="keyword">if</span> (factory == <span class="keyword">null</span>) &#123;</span><br><span class="line">            factory = ViewModelProvider.AndroidViewModelFactory.getInstance(application);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ViewModelProvider(ViewModelStores.of(fragment), factory);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NonNull</span></span><br><span class="line">    <span class="meta">@MainThread</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ViewModelProvider <span class="title">of</span><span class="params">(@NonNull FragmentActivity activity,</span></span></span><br><span class="line"><span class="function"><span class="params">            @Nullable Factory factory)</span> </span>&#123;</span><br><span class="line">        Application application = checkApplication(activity);</span><br><span class="line">        <span class="keyword">if</span> (factory == <span class="keyword">null</span>) &#123;</span><br><span class="line">            factory = ViewModelProvider.AndroidViewModelFactory.getInstance(application);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ViewModelProvider(ViewModelStores.of(activity), factory);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看出这个ViewModelProviders是一个工具类，用于生成ViewModelProvider，这里面就会调用ViewModelStores的of方法获取ViewModelStore，而我们刚刚也说了这个of方法里面就会挂载一个HolderFragment用于感应对应页面的生命周期。因此，要想自定义的ViewModel在页面销毁的时候能够自动调用onCleared()方法，得通过ViewModelProviders来获取：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">viewModelProvider= ViewModelProviders.of(<span class="keyword">this</span>);</span><br></pre></td></tr></table></figure><p>至此ViewModel源码分析完成,更多高级玩法参考：<br><a href="https://developer.android.com/topic/libraries/architecture/viewmodel" target="_blank" rel="noopener">https://developer.android.com/topic/libraries/architecture/viewmodel</a></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>至此LiveData+ViewModel源码已经分析完成，结合之前的<a href="https://easyliu-ly.github.io/2020/10/31/android_jetpack/lifecycle/" target="_blank" rel="noopener">Android生命周期感应组件lifecycle</a>,整个就组成了MVVM架构。</p><p>这个架构里面很多思想值得我们细细品味～～</p><p>基于这个LiveData这些优良的特性，美团技术团队开发了一个LiveDataEventBus来代替传统的EventBus、RxJava等消息框架,感兴趣的可以看看：<br><a href="https://tech.meituan.com/2018/07/26/android-livedatabus.html" target="_blank" rel="noopener">https://tech.meituan.com/2018/07/26/android-livedatabus.html</a></p><p><a href="https://github.com/JeremyLiao/LiveEventBus" target="_blank" rel="noopener">https://github.com/JeremyLiao/LiveEventBus</a></p>]]></content>
    
    <summary type="html">
    
      Android MVVM框架之Livedata以及ViewModel
    
    </summary>
    
      <category term="Android架构学习" scheme="http://easyliu.com/categories/Android%E6%9E%B6%E6%9E%84%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Android" scheme="http://easyliu.com/tags/Android/"/>
    
  </entry>
  
</feed>
