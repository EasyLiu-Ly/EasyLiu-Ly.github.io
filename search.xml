<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[java代码规范]]></title>
      <url>http://easyliu.com/2020/05/26/code/java_code_style/</url>
      <content type="html"><![CDATA[<h3 id="1、减少嵌套层级，提前返回"><a href="#1、减少嵌套层级，提前返回" class="headerlink" title="1、减少嵌套层级，提前返回"></a>1、减少嵌套层级，提前返回</h3><h3 id="2、一行不大于100个字符"><a href="#2、一行不大于100个字符" class="headerlink" title="2、一行不大于100个字符"></a>2、一行不大于100个字符</h3><h3 id="3、函数参数个数不宜过多，太多了考虑抽象成类"><a href="#3、函数参数个数不宜过多，太多了考虑抽象成类" class="headerlink" title="3、函数参数个数不宜过多，太多了考虑抽象成类"></a>3、函数参数个数不宜过多，太多了考虑抽象成类</h3><h3 id="4、private成员变量以m为前缀"><a href="#4、private成员变量以m为前缀" class="headerlink" title="4、private成员变量以m为前缀"></a>4、private成员变量以m为前缀</h3><h3 id="5、常量为全大写，以下划线拼接"><a href="#5、常量为全大写，以下划线拼接" class="headerlink" title="5、常量为全大写，以下划线拼接"></a>5、常量为全大写，以下划线拼接</h3><h3 id="6、静态成员变量以s为前缀"><a href="#6、静态成员变量以s为前缀" class="headerlink" title="6、静态成员变量以s为前缀"></a>6、静态成员变量以s为前缀</h3><h3 id="7、单个函数行数不宜过多，超过20-line就考虑抽取函数"><a href="#7、单个函数行数不宜过多，超过20-line就考虑抽取函数" class="headerlink" title="7、单个函数行数不宜过多，超过20 line就考虑抽取函数"></a>7、单个函数行数不宜过多，超过20 line就考虑抽取函数</h3><h3 id="8、经常进行重构"><a href="#8、经常进行重构" class="headerlink" title="8、经常进行重构"></a>8、经常进行重构</h3><h3 id="9、时常考虑抽象、封装、多态"><a href="#9、时常考虑抽象、封装、多态" class="headerlink" title="9、时常考虑抽象、封装、多态"></a>9、时常考虑抽象、封装、多态</h3><h3 id="10、命名规则：精简但能清楚表达语义"><a href="#10、命名规则：精简但能清楚表达语义" class="headerlink" title="10、命名规则：精简但能清楚表达语义"></a>10、命名规则：精简但能清楚表达语义</h3>]]></content>
      
        <categories>
            
            <category> 代码规范 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 代码规范 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[xcode快捷键]]></title>
      <url>http://easyliu.com/2020/05/17/ios/xcode_shortcut/</url>
      <content type="html"><![CDATA[<p>1、cmd+shift+j  在左边文件管理区定位到当前文件</p>
<p>2、cmd+shift+o 快速查找某个类，对应Android studio开发的话是shift+shift</p>
<p>3、ctrl+cmd+往左箭头或者往右箭头  光标返回到上一个选中的位置或者下一个选中的位置</p>
]]></content>
      
        <categories>
            
            <category> ios开发 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ios开发 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[PowerMockIo单元测试基础语法]]></title>
      <url>http://easyliu.com/2020/05/17/unit_test/unit_test/</url>
      <content type="html"><![CDATA[<h3 id="1、使用verifyPrivate来验证私有方法被调用"><a href="#1、使用verifyPrivate来验证私有方法被调用" class="headerlink" title="1、使用verifyPrivate来验证私有方法被调用"></a>1、使用verifyPrivate来验证私有方法被调用</h3><p>//arrange<br>SeeVideoBoardTopStartVM fakeVm = PowerMockito.mock(SeeVideoBoardTopStartVM.class);<br>Whitebox.setInternalState(mTestVm, “mSeeVideoBoardTopVM”, fakeVm);<br>//act<br>Whitebox.invokeMethod(mTestVm, “resetPlayer”);<br>//assert<br>PowerMockito.verifyPrivate(mTestVm).invoke(“setPlayStatus”, IUpdatePlayStatus.BEFORE);<br>PowerMockito.verifyPrivate(fakeVm).invoke(“onUnbindView”);</p>
<h3 id="2、PowerMockIo来mock静态方法："><a href="#2、PowerMockIo来mock静态方法：" class="headerlink" title="2、PowerMockIo来mock静态方法："></a>2、PowerMockIo来mock静态方法：</h3><p>PowerMockito.mockStatic(AdaptiveUI.class);<br>PowerMockito.when(AdaptiveUI.getCurUISizeType(Mockito.any(Context.class))).thenReturn(UISizeType.REGULAR);</p>
<h3 id="3、调用private方法"><a href="#3、调用private方法" class="headerlink" title="3、调用private方法"></a>3、调用private方法</h3><p>boolean result = Whitebox.invokeMethod(mBasePBSectionController, MOCK_METHOD, section);<br>Assert.assertFalse(result);</p>
<h3 id="4、模拟私有方法"><a href="#4、模拟私有方法" class="headerlink" title="4、模拟私有方法"></a>4、模拟私有方法</h3><p>PowerMockito.when(mockPrivateClass, “privateFunc”).thenReturn(“test”);</p>
<h3 id="5、mock公有方法"><a href="#5、mock公有方法" class="headerlink" title="5、mock公有方法"></a>5、mock公有方法</h3><p>PowerMockito.when(mTestVm.getTextViewWidth()).thenReturn(FAKE_TEXT_WIDTH);</p>
<h3 id="6、设置私有成员变量"><a href="#6、设置私有成员变量" class="headerlink" title="6、设置私有成员变量"></a>6、设置私有成员变量</h3><p>Whitebox.setInternalState(mTestVm, “mSeeVideoBoardTopVM”, fakeVm);</p>
<h3 id="7、当你需要使用PowerMock强大功能（Mock静态、final、私有方法等）的时候，就需要加注解-PrepareForTest"><a href="#7、当你需要使用PowerMock强大功能（Mock静态、final、私有方法等）的时候，就需要加注解-PrepareForTest" class="headerlink" title="7、当你需要使用PowerMock强大功能（Mock静态、final、私有方法等）的时候，就需要加注解@PrepareForTest"></a>7、当你需要使用PowerMock强大功能（Mock静态、final、私有方法等）的时候，就需要加注解@PrepareForTest</h3><h3 id="8、如果一个对象，只希望mock它的部分方法，而其他方法希望和真实对象的行为一眼，可以使用PowerMockito-spy-Class-clazz-代替PowerMockito-mock-Class-clazz-方法，"><a href="#8、如果一个对象，只希望mock它的部分方法，而其他方法希望和真实对象的行为一眼，可以使用PowerMockito-spy-Class-clazz-代替PowerMockito-mock-Class-clazz-方法，" class="headerlink" title="8、如果一个对象，只希望mock它的部分方法，而其他方法希望和真实对象的行为一眼，可以使用PowerMockito.spy(Class clazz)代替PowerMockito.mock(Class clazz)方法，"></a>8、如果一个对象，只希望mock它的部分方法，而其他方法希望和真实对象的行为一眼，可以使用PowerMockito.spy(Class<t> clazz)代替PowerMockito.mock(Class<t> clazz)方法，</t></t></h3><p>其后的设置依旧，这时，没有通过when设置过的方法，测试调用时，行为和真实对象一样</p>
]]></content>
      
        <categories>
            
            <category> 单元测试 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 单元测试 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Gradle基础之Grovy语法]]></title>
      <url>http://easyliu.com/2018/02/11/android/Gradle%E5%9F%BA%E7%A1%80%E4%B9%8BGrovy%E8%AF%AD%E6%B3%95/</url>
      <content type="html"><![CDATA[<h3 id="Gradle基础之Groovy语法"><a href="#Gradle基础之Groovy语法" class="headerlink" title="Gradle基础之Groovy语法"></a>Gradle基础之Groovy语法</h3><p>在使用Android Studio开发app的过程中，都会接触到Gradle配置，而Gradle的配置是基于Grovvy语法的。因此，要想熟练的使用Gradle进行配置，就必须熟悉Groovy语法，下面开始讲解下Groovy的基本语法。</p>
<p>Groovy可以看作是java的加强版，扩展了java的语法，拥有自己的一些特性。</p>
<p><a href="http://www.groovy-lang.org/syntax.html" target="_blank" rel="external">Groovy语法官方文档</a></p>
<h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><h4 id="单行注释"><a href="#单行注释" class="headerlink" title="单行注释"></a>单行注释</h4><p>单行注释如下所示，跟java一样：<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// a standalone single line comment</span></div><div class="line">println <span class="string">"hello"</span> <span class="comment">// a comment till the end of the line</span></div></pre></td></tr></table></figure></p>
<h4 id="多行注释"><a href="#多行注释" class="headerlink" title="多行注释"></a>多行注释</h4><p>多行注释如下所示，跟java一样：<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* a standalone multiline comment</span></div><div class="line">   spanning two lines */</div><div class="line">println <span class="string">"hello"</span> <span class="comment">/* a multiline comment starting</span></div><div class="line">                   at the end of a statement */</div><div class="line">println <span class="number">1</span> <span class="comment">/* one */</span> + <span class="number">2</span> <span class="comment">/* two */</span></div></pre></td></tr></table></figure></p>
<h4 id="GroovyDoc-注释"><a href="#GroovyDoc-注释" class="headerlink" title="GroovyDoc 注释"></a>GroovyDoc 注释</h4><p>GroovyDoc跟javaDoc语法也是一样的，如下所示：<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * A Class description</div><div class="line"> */</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> &#123;</span></div><div class="line">    <span class="comment">/** the name of the person */</span></div><div class="line">    String name</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Creates a greeting method for a certain person.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> otherPerson the person to greet</div><div class="line">     * <span class="doctag">@return</span> a greeting message</div><div class="line">     */</div><div class="line">    String greet(String otherPerson) &#123;</div><div class="line">       <span class="string">"Hello $&#123;otherPerson&#125;"</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="Shebang-line"><a href="#Shebang-line" class="headerlink" title="Shebang line"></a>Shebang line</h4><p>除了单行注释，还有一种特殊的单行注释，如下所示，叫做Shebang line（各位可以自行去翻译）。这行注释主要是便于unix理解，有了这行注释就可以直接在命令行运行groovy脚本文件啦。当然前提是电脑上要安装了Groovy，且要把Groovy加入path环境变量，注意这种注释中#必须是第一个字符，否则会报编译错误。<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/usr/bin/env groovy</span></div><div class="line">println <span class="string">"Hello from the shebang line"</span></div></pre></td></tr></table></figure></p>
<h3 id="Groovy关键字"><a href="#Groovy关键字" class="headerlink" title="Groovy关键字"></a>Groovy关键字</h3><p>Groovy语法的关键字如下所示：</p>
<table>
<thead>
<tr>
<th>as</th>
<th style="text-align:center">assert</th>
<th style="text-align:center">break</th>
<th style="text-align:center">finally</th>
<th style="text-align:center">implements</th>
<th style="text-align:center">new</th>
<th style="text-align:center">switch</th>
<th style="text-align:right">trait</th>
</tr>
</thead>
<tbody>
<tr>
<td>case</td>
<td style="text-align:center">catch</td>
<td style="text-align:center">class</td>
<td style="text-align:center">false</td>
<td style="text-align:center">import</td>
<td style="text-align:center">null符号</td>
<td style="text-align:center">switch</td>
<td style="text-align:right">true</td>
</tr>
<tr>
<td>const</td>
<td style="text-align:center">continue</td>
<td style="text-align:center">def</td>
<td style="text-align:center">for</td>
<td style="text-align:center">in</td>
<td style="text-align:center">package</td>
<td style="text-align:center">this</td>
<td style="text-align:right">try</td>
</tr>
<tr>
<td>default</td>
<td style="text-align:center">do</td>
<td style="text-align:center">else</td>
<td style="text-align:center">goto</td>
<td style="text-align:center">instanceof</td>
<td style="text-align:center">return</td>
<td style="text-align:center">throw</td>
<td style="text-align:right">while</td>
</tr>
<tr>
<td>enum</td>
<td style="text-align:center">enum</td>
<td style="text-align:center">extends</td>
<td style="text-align:center">if</td>
<td style="text-align:center">interface</td>
<td style="text-align:center">super</td>
<td style="text-align:center">throws</td>
</tr>
</tbody>
</table>
<h3 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h3><h4 id="正常的标识符"><a href="#正常的标识符" class="headerlink" title="正常的标识符"></a>正常的标识符</h4><p>标识符可以由字母、美元符号以及下划线开头，不能以数字开头。<br>字符的范围如下：</p>
<ul>
<li>‘a’ to ‘z’ (lowercase ascii letter)</li>
<li>‘A’ to ‘Z’ (uppercase ascii letter)</li>
<li>‘\u00C0’ to ‘\u00D6’</li>
<li>‘\u00D8’ to ‘\u00F6’</li>
<li>‘\u00F8’ to ‘\u00FF’</li>
<li>‘\u0100’ to ‘\uFFFE’</li>
</ul>
<p>如下为有效的标识符：<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">def</span> name</div><div class="line"><span class="keyword">def</span> item3</div><div class="line"><span class="keyword">def</span> with_underscore</div><div class="line"><span class="keyword">def</span> $dollarStart</div></pre></td></tr></table></figure></p>
<p>如下的标识符就是非法的：<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">def 3tier</div><div class="line">def a+b</div><div class="line">def a#b</div></pre></td></tr></table></figure></p>
<p>所有的关键字如果跟在一个dot后面也都是合法的标识符：<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">foo.<span class="keyword">as</span></div><div class="line">foo.<span class="keyword">assert</span></div><div class="line">foo.<span class="keyword">break</span></div><div class="line">foo.<span class="keyword">case</span></div><div class="line">foo.<span class="keyword">catch</span></div></pre></td></tr></table></figure></p>
<h4 id="引用标识符"><a href="#引用标识符" class="headerlink" title="引用标识符"></a>引用标识符</h4><p>引用标识符出现在一个打点运算符之后，如下所示：<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">def</span> map= [:]</div><div class="line">map.<span class="string">"an identifier with a space and double quotes"</span> = <span class="string">"ALLOWED"</span></div><div class="line">map.<span class="string">'with-dash-signs-and-single-quotes'</span> = <span class="string">"ALLOWED"</span></div><div class="line"></div><div class="line"><span class="keyword">assert</span> map.<span class="string">"an identifier with a space and double quotes"</span> == <span class="string">"ALLOWED"</span></div><div class="line"><span class="keyword">assert</span> map.<span class="string">'with-dash-signs-and-single-quotes'</span> == <span class="string">"ALLOWED"</span></div></pre></td></tr></table></figure></p>
<p>Groovy允许多种类型的字符串，后面会讲到。这些字符串都可以出现在打点运算符之后，如下所示：<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">map.<span class="string">'single quote'</span></div><div class="line">map.<span class="string">"double quote"</span></div><div class="line">map.<span class="string">'''triple single quote'''</span></div><div class="line">map.<span class="string">"""triple double quote"""</span></div><div class="line">map.<span class="regexp">/slashy string/</span></div><div class="line">map.<span class="string">$/dollar slashy string/$</span></div></pre></td></tr></table></figure></p>
<p>有一种特殊的Groovy GStrings，也叫做插值字符串，如下所示：<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">def</span> firstname = <span class="string">"Homer"</span></div><div class="line">map.<span class="string">"Simpson-$&#123;firstname&#125;"</span> = <span class="string">"Homer Simpson"</span> <span class="comment">//被插值为Simpson-Homer</span></div><div class="line"><span class="keyword">assert</span> map.<span class="string">'Simpson-Homer'</span> == <span class="string">"Homer Simpson"</span></div></pre></td></tr></table></figure></p>
<h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><p>Groovy支持两种字符串，一种是java原生的java.lang.String，一种是groovy.lang.GString，叫做插值字符串。</p>
<h4 id="单引号字符串"><a href="#单引号字符串" class="headerlink" title="单引号字符串"></a>单引号字符串</h4><p>单引号字符串就是java.lang.String，不支持插值，如下所示：<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="string">'a single quoted string'</span></div></pre></td></tr></table></figure></p>
<h4 id="字符串连接"><a href="#字符串连接" class="headerlink" title="字符串连接"></a>字符串连接</h4><p>所有的Groovy字符串均支持+操作，如下所示：<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">assert</span> <span class="string">'ab'</span> == <span class="string">'a'</span> + <span class="string">'b'</span></div></pre></td></tr></table></figure></p>
<h4 id="三单引号字符串"><a href="#三单引号字符串" class="headerlink" title="三单引号字符串"></a>三单引号字符串</h4><p>三单引号字符串如下所示：<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="string">'''a triple single quoted string'''</span></div></pre></td></tr></table></figure></p>
<p>三单引号支持多行，也是java.lang.String类型，不支持插值，如下所示：<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">def</span> aMultilineString = <span class="string">'''line one</span></div><div class="line">line two</div><div class="line">line three'''</div><div class="line"></div><div class="line"><span class="keyword">def</span> startingAndEndingWithANewline = <span class="string">'''</span></div><div class="line">line one</div><div class="line">line two</div><div class="line">line three</div><div class="line">'''</div><div class="line"></div><div class="line"><span class="keyword">def</span> strippedFirstNewline = <span class="string">'''\</span></div><div class="line">line one</div><div class="line">line two</div><div class="line">line three</div><div class="line">'''</div><div class="line"></div><div class="line"><span class="keyword">assert</span> !strippedFirstNewline.startsWith(<span class="string">'\n'</span>)</div></pre></td></tr></table></figure></p>
<h5 id="转义特殊字符"><a href="#转义特殊字符" class="headerlink" title="转义特殊字符"></a>转义特殊字符</h5><p>可以使用反斜杠字符转义单引号字符，这样就可以避免字符串的终止：<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="string">'an escaped single quote: \' needs a backslash'</span></div></pre></td></tr></table></figure></p>
<p>可以使用双重反斜杠转义反斜杠，如下所示：<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="string">'an escaped escape character: \\ needs a double backslash'</span></div></pre></td></tr></table></figure></p>
<p>如下所示为转义字符对照表：<br><img src="/2018/02/11/android/Gradle基础之Grovy语法/转义字符对照表.png" alt="转义字符对照表"></p>
<h5 id="Unicode转义序列"><a href="#Unicode转义序列" class="headerlink" title="Unicode转义序列"></a>Unicode转义序列</h5><p>对于键盘上没有出现的字符，可以使用一个反斜杠+’u’+四个十六进制数字表示。例如欧元符号可以使用一下方式表示：</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="string">'The Euro currency symbol: \u20AC'</span></div></pre></td></tr></table></figure>
<h4 id="双引用字符串"><a href="#双引用字符串" class="headerlink" title="双引用字符串"></a>双引用字符串</h4><p>双引用字符串如下所示：<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="string">"a double quoted string"</span></div></pre></td></tr></table></figure></p>
<p>对于双引用字符串来说，如果其中没有插值表达式那就是java.lang.String类型，否则就是groovy.lang.GString类型。</p>
<h5 id="字符串插值"><a href="#字符串插值" class="headerlink" title="字符串插值"></a>字符串插值</h5><p>在Groovy所有的字符串字面量表示中，除了单引用和三引用字符串，其他的均支持插值。所谓字符串插值：就是将占位表达式的值替换到字符串中相应的位置当中，如下所示：<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">def</span> name = <span class="string">'Guillaume'</span> <span class="comment">// a plain string</span></div><div class="line"><span class="keyword">def</span> greeting = <span class="string">"Hello $&#123;name&#125;"</span> <span class="comment">//把name插入到greeting当中</span></div><div class="line"></div><div class="line"><span class="keyword">assert</span> greeting.toString() == <span class="string">'Hello Guillaume'</span></div></pre></td></tr></table></figure></p>
<p>还支持算数运算符：<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">def</span> sum = <span class="string">"The sum of 2 and 3 equals $&#123;2 + 3&#125;"</span></div><div class="line"><span class="keyword">assert</span> sum.toString() == <span class="string">'The sum of 2 and 3 equals 5'</span></div></pre></td></tr></table></figure></p>
<p>在${}当中还支持表达式，如下所示：<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="string">"The sum of 1 and 2 is equal to $&#123;def a = 1; def b = 2; a + b&#125;"</span></div></pre></td></tr></table></figure></p>
<p>还支持$占位符，当使用点号表达式时：<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">def</span> person = [<span class="string">name:</span> <span class="string">'Guillaume'</span>, <span class="string">age:</span> <span class="number">36</span>]</div><div class="line"><span class="keyword">assert</span> <span class="string">"$person.name is $person.age years old"</span> == <span class="string">'Guillaume is 36 years old'</span></div></pre></td></tr></table></figure></p>
<p>如下是非法的，会抛出groovy.lang.MissingPropertyException异常，因为系统会认为你在获取一个number的toString属性，从而报错。<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">def</span> number = <span class="number">3.14</span></div><div class="line">shouldFail(MissingPropertyException) &#123;</div><div class="line">    println <span class="string">"$number.toString()"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>如果你想去掉GString中的插值，只需要一个反斜杠即可：<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">assert</span> <span class="string">'$&#123;name&#125;'</span> == <span class="string">"\$&#123;name&#125;"</span> <span class="comment">//"\$&#123;name&#125;"就和普通的'$&#123;name&#125;'相等了，因为去掉了插值</span></div></pre></td></tr></table></figure></p>
<h5 id="插值闭包表达式"><a href="#插值闭包表达式" class="headerlink" title="插值闭包表达式"></a>插值闭包表达式</h5><p>插值占位符还支持闭包表达式，如下所示：<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">def</span> sParameterLessClosure = <span class="string">"1 + 2 == $&#123;-&gt; 3&#125;"</span> <span class="comment">//这个闭包表达式没有参数</span></div><div class="line"><span class="keyword">assert</span> sParameterLessClosure == <span class="string">'1 + 2 == 3'</span></div><div class="line"></div><div class="line"><span class="keyword">def</span> sOneParamClosure = <span class="string">"1 + 2 == $&#123; w -&gt; w &lt;&lt; 3&#125;"</span> <span class="comment">//这个闭包表达式有一个java.io.StringWriter类型的参数</span></div><div class="line"><span class="keyword">assert</span> sOneParamClosure == <span class="string">'1 + 2 == 3'</span></div></pre></td></tr></table></figure></p>
<p>闭包的一个最大的好处是<strong>惰性求值lazy evaluation</strong>，如下所示：<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">def</span> number = <span class="number">1</span></div><div class="line"><span class="keyword">def</span> eagerGString = <span class="string">"value == $&#123;number&#125;"</span></div><div class="line"><span class="keyword">def</span> lazyGString = <span class="string">"value == $&#123; -&gt; number &#125;"</span></div><div class="line"></div><div class="line"><span class="keyword">assert</span> eagerGString == <span class="string">"value == 1"</span></div><div class="line"><span class="keyword">assert</span> lazyGString ==  <span class="string">"value == 1"</span></div><div class="line"></div><div class="line">number = <span class="number">2</span></div><div class="line"><span class="keyword">assert</span> eagerGString == <span class="string">"value == 1"</span> <span class="comment">//eagerGString的值已经被固定了</span></div><div class="line"><span class="keyword">assert</span> lazyGString ==  <span class="string">"value == 2"</span> <span class="comment">//lazyGString的值被重新计算</span></div></pre></td></tr></table></figure></p>
<h5 id="和java进行交互"><a href="#和java进行交互" class="headerlink" title="和java进行交互"></a>和java进行交互</h5><p>当一个方法需要java.lang.String参数，传入的却是一个GString类型的参数，这个参数的toString()方法就会被自动调用，看起来像我们可以直接将一个GString赋值给一个String变量一样：<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">String takeString(String message) &#123;         </div><div class="line">    <span class="keyword">assert</span> message <span class="keyword">instanceof</span> String        </div><div class="line">    <span class="keyword">return</span> message</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">def</span> message = <span class="string">"The message is $&#123;'hello'&#125;"</span>   </div><div class="line"><span class="keyword">assert</span> message <span class="keyword">instanceof</span> GString           </div><div class="line"></div><div class="line"><span class="keyword">def</span> result = takeString(message)            </div><div class="line"><span class="keyword">assert</span> result <span class="keyword">instanceof</span> String</div><div class="line"><span class="keyword">assert</span> result == <span class="string">'The message is hello'</span></div></pre></td></tr></table></figure></p>
<h5 id="GString和String的hashCode"><a href="#GString和String的hashCode" class="headerlink" title="GString和String的hashCode"></a>GString和String的hashCode</h5><p>GString和String的hashCode是不一样的，即便他们的最终结果是一样：<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">assert</span> <span class="string">"one: $&#123;1&#125;"</span>.hashCode() != <span class="string">"one: 1"</span>.hashCode()</div></pre></td></tr></table></figure></p>
<p>因此在Map当中不能不能使用GString作为Key值，如下所示：<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">defkey= <span class="string">"a"</span></div><div class="line"><span class="keyword">def</span> m = [<span class="string">"$&#123;key&#125;"</span>: <span class="string">"letter $&#123;key&#125;"</span>]    <span class="comment">// key类型是一个GString</span></div><div class="line"></div><div class="line"><span class="keyword">assert</span> m[<span class="string">"a"</span>] == <span class="literal">null</span>                <span class="comment">// 用一个普通String类型的key去取值,会找不到这个key,因此就会取不到值</span></div></pre></td></tr></table></figure></p>
<h4 id="三双引号字符串"><a href="#三双引号字符串" class="headerlink" title="三双引号字符串"></a>三双引号字符串</h4><p>三双引号字符串类似于双引号字符串，但是是多行的，因此又类似于三引号字符串：<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">def</span> name = <span class="string">'Groovy'</span></div><div class="line"><span class="keyword">def</span> template = <span class="string">"""</span></div><div class="line">    Dear Mr $&#123;name&#125;,</div><div class="line"></div><div class="line">    You're the winner of the lottery!</div><div class="line"></div><div class="line">    Yours sincerly,</div><div class="line"></div><div class="line">    Dave</div><div class="line">"""</div><div class="line"></div><div class="line"><span class="keyword">assert</span> template.toString().contains(<span class="string">'Groovy'</span>)</div></pre></td></tr></table></figure></p>
<h4 id="斜线字符串"><a href="#斜线字符串" class="headerlink" title="斜线字符串"></a>斜线字符串</h4><p>除了使用引号来括住字符串，还可以使用/，斜线字符串一般用来定义正则表达式：<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">def</span> fooPattern = <span class="regexp">/.*foo.*/</span></div><div class="line"><span class="keyword">assert</span> fooPattern == <span class="string">'.*foo.*'</span></div></pre></td></tr></table></figure></p>
<p>只有正斜线需要用反斜线转义：<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">def</span> escapeSlash = <span class="regexp">/The character \/</span> is a forward slash/</div><div class="line"><span class="keyword">assert</span> escapeSlash == <span class="string">'The character / is a forward slash'</span></div></pre></td></tr></table></figure></p>
<p>斜线字符串是多行的：<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">def</span> escapeSlash = <span class="regexp">/The character \/</span> is a forward slash/</div><div class="line"><span class="keyword">assert</span> escapeSlash == <span class="string">'The character / is a forward slash'</span></div></pre></td></tr></table></figure></p>
<p>斜线字符串也可以被插值：<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">defcolor= <span class="string">'blue'</span></div><div class="line"><span class="keyword">def</span> interpolatedSlashy = <span class="regexp">/a $&#123;color&#125; car/</span></div><div class="line"></div><div class="line"><span class="keyword">assert</span> interpolatedSlashy == <span class="string">'a blue car'</span></div></pre></td></tr></table></figure></p>
<p>注意：一个空的斜线字符串不能使用两个正斜线表示，因为Groovy会把其理解为注释。因此，下面的断言不会被编译，因为这个是一个非终止的语句：<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">assert</span> <span class="string">''</span> == <span class="comment">//</span></div></pre></td></tr></table></figure></p>
<h4 id="美元斜线字符串"><a href="#美元斜线字符串" class="headerlink" title="美元斜线字符串"></a>美元斜线字符串</h4><p>这种字符串使用\$/开始，使用/\$结束，其中的转义字符为$：<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">def</span> name = <span class="string">"Guillaume"</span></div><div class="line"><span class="keyword">def</span> date = <span class="string">"April, 1st"</span></div><div class="line"></div><div class="line"><span class="keyword">def</span> dollarSlashy = <span class="string">$/</span></div><div class="line">    Hello $name,</div><div class="line">    today we're $&#123;date&#125;.</div><div class="line"></div><div class="line">    $ dollar sign</div><div class="line">    $$ escaped dollar sign</div><div class="line">    \ backslash</div><div class="line">    / forward slash</div><div class="line">    $/ escaped forward slash</div><div class="line">    $$$/ escaped opening dollar slashy</div><div class="line">    $/$$ escaped closing dollar slashy</div><div class="line">/$</div><div class="line"></div><div class="line"><span class="keyword">assert</span> [</div><div class="line">    <span class="string">'Guillaume'</span>,</div><div class="line">    <span class="string">'April, 1st'</span>,</div><div class="line">    <span class="string">'$ dollar sign'</span>,</div><div class="line">    <span class="string">'$ escaped dollar sign'</span>,</div><div class="line">    <span class="string">'\\ backslash'</span>,</div><div class="line">    <span class="string">'/ forward slash'</span>,</div><div class="line">    <span class="string">'/ escaped forward slash'</span>,</div><div class="line">    <span class="string">'$/ escaped opening dollar slashy'</span>,</div><div class="line">    <span class="string">'/$ escaped closing dollar slashy'</span></div><div class="line">].every &#123; dollarSlashy.contains(it) &#125;</div></pre></td></tr></table></figure></p>
<h4 id="字符串总结"><a href="#字符串总结" class="headerlink" title="字符串总结"></a>字符串总结</h4><p><img src="/2018/02/11/android/Gradle基础之Grovy语法/字符串总结.png" alt="字符串总结"></p>
<h4 id="字符"><a href="#字符" class="headerlink" title="字符"></a>字符</h4><p>Groovy当中并没有明确的字符字面量，需要明确指明：<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">char</span> c1 = <span class="string">'A'</span></div><div class="line"><span class="keyword">assert</span> c1 <span class="keyword">instanceof</span> Character</div><div class="line"></div><div class="line"><span class="keyword">def</span> c2 = <span class="string">'B'</span> <span class="keyword">as</span> <span class="keyword">char</span></div><div class="line"><span class="keyword">assert</span> c2 <span class="keyword">instanceof</span> Character</div><div class="line"></div><div class="line"><span class="keyword">def</span> c3 = (<span class="keyword">char</span>)<span class="string">'C'</span></div><div class="line"><span class="keyword">assert</span> c3 <span class="keyword">instanceof</span> Character</div></pre></td></tr></table></figure></p>
<h3 id="数字"><a href="#数字" class="headerlink" title="数字"></a>数字</h3><p>Groovy支持不同类型的整型字面量和小数字面量。</p>
<h4 id="整型字面量"><a href="#整型字面量" class="headerlink" title="整型字面量"></a>整型字面量</h4><p>支持的整型字面量和java是一样的：</p>
<ul>
<li>byte</li>
<li>char</li>
<li>short</li>
<li>int</li>
<li>long</li>
<li>java.lang.BigInteger</li>
</ul>
<p>如下所示：<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// primitive types</span></div><div class="line"><span class="keyword">byte</span>  b = <span class="number">1</span></div><div class="line"><span class="keyword">char</span>  c = <span class="number">2</span></div><div class="line"><span class="keyword">short</span> s = <span class="number">3</span></div><div class="line"><span class="keyword">int</span>   i = <span class="number">4</span></div><div class="line"><span class="keyword">long</span>  l = <span class="number">5</span></div><div class="line"></div><div class="line"><span class="comment">// infinite precision</span></div><div class="line">BigInteger bi =  <span class="number">6</span></div></pre></td></tr></table></figure></p>
<p>当使用def指明整数字面量时，变量的类型会根据数字的大小自动调整:<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">def</span> a = <span class="number">1</span></div><div class="line"><span class="keyword">assert</span> a <span class="keyword">instanceof</span> Integer</div><div class="line"></div><div class="line"><span class="comment">// Integer.MAX_VALUE</span></div><div class="line"><span class="keyword">def</span> b = <span class="number">2147483647</span></div><div class="line"><span class="keyword">assert</span> b <span class="keyword">instanceof</span> Integer</div><div class="line"></div><div class="line"><span class="comment">// Integer.MAX_VALUE + 1</span></div><div class="line"><span class="keyword">def</span> c = <span class="number">2147483648</span></div><div class="line"><span class="keyword">assert</span> c <span class="keyword">instanceof</span> Long</div><div class="line"></div><div class="line"><span class="comment">// Long.MAX_VALUE</span></div><div class="line"><span class="keyword">def</span> d = <span class="number">9223372036854775807</span></div><div class="line"><span class="keyword">assert</span> d <span class="keyword">instanceof</span> Long</div><div class="line"></div><div class="line"><span class="comment">// Long.MAX_VALUE + 1</span></div><div class="line"><span class="keyword">def</span> e = <span class="number">9223372036854775808</span></div><div class="line"><span class="keyword">assert</span> e <span class="keyword">instanceof</span> BigInteger</div></pre></td></tr></table></figure></p>
<p>对于负数也是如此：<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">def</span> na = <span class="number">-1</span></div><div class="line"><span class="keyword">assert</span> na <span class="keyword">instanceof</span> Integer</div><div class="line"></div><div class="line"><span class="comment">// Integer.MIN_VALUE</span></div><div class="line"><span class="keyword">def</span> nb = <span class="number">-2147483648</span></div><div class="line"><span class="keyword">assert</span> nb <span class="keyword">instanceof</span> Integer</div><div class="line"></div><div class="line"><span class="comment">// Integer.MIN_VALUE - 1</span></div><div class="line"><span class="keyword">def</span> nc = <span class="number">-2147483649</span></div><div class="line"><span class="keyword">assert</span> nc <span class="keyword">instanceof</span> Long</div><div class="line"></div><div class="line"><span class="comment">// Long.MIN_VALUE</span></div><div class="line"><span class="keyword">def</span> nd = <span class="number">-9223372036854775808</span></div><div class="line"><span class="keyword">assert</span> nd <span class="keyword">instanceof</span> Long</div><div class="line"></div><div class="line"><span class="comment">// Long.MIN_VALUE - 1</span></div><div class="line"><span class="keyword">def</span> ne = <span class="number">-9223372036854775809</span></div><div class="line"><span class="keyword">assert</span> ne <span class="keyword">instanceof</span> BigInteger</div></pre></td></tr></table></figure></p>
<h5 id="数字的非十进制表示"><a href="#数字的非十进制表示" class="headerlink" title="数字的非十进制表示"></a>数字的非十进制表示</h5><p>数字可以用二进制、八进制、16进制以及小数表示。<br>数字二进制表示如下，以ob开头：<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> xInt = <span class="number">0b10101111</span></div><div class="line"><span class="keyword">assert</span> xInt == <span class="number">175</span></div><div class="line"></div><div class="line"><span class="keyword">short</span> xShort = <span class="number">0b11001001</span></div><div class="line"><span class="keyword">assert</span> xShort == <span class="number">201</span> <span class="keyword">as</span> <span class="keyword">short</span></div><div class="line"></div><div class="line"><span class="keyword">byte</span> xByte = <span class="number">0b11</span></div><div class="line"><span class="keyword">assert</span> xByte == <span class="number">3</span> <span class="keyword">as</span> <span class="keyword">byte</span></div><div class="line"></div><div class="line"><span class="keyword">long</span> xLong = <span class="number">0b101101101101</span></div><div class="line"><span class="keyword">assert</span> xLong == <span class="number">2925</span>l</div><div class="line"></div><div class="line">BigInteger xBigInteger = <span class="number">0b111100100001</span></div><div class="line"><span class="keyword">assert</span> xBigInteger == <span class="number">3873</span>g</div><div class="line"></div><div class="line"><span class="keyword">int</span> xNegativeInt = <span class="number">-0</span>b10101111</div><div class="line"><span class="keyword">assert</span> xNegativeInt == <span class="number">-175</span></div></pre></td></tr></table></figure></p>
<p>数字的八进制表示如下,以0开头：<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> xInt = <span class="number">077</span></div><div class="line"><span class="keyword">assert</span> xInt == <span class="number">63</span></div><div class="line"></div><div class="line"><span class="keyword">short</span> xShort = <span class="number">011</span></div><div class="line"><span class="keyword">assert</span> xShort == <span class="number">9</span> <span class="keyword">as</span> <span class="keyword">short</span></div><div class="line"></div><div class="line"><span class="keyword">byte</span> xByte = <span class="number">032</span></div><div class="line"><span class="keyword">assert</span> xByte == <span class="number">26</span> <span class="keyword">as</span> <span class="keyword">byte</span></div><div class="line"></div><div class="line"><span class="keyword">long</span> xLong = <span class="number">0246</span></div><div class="line"><span class="keyword">assert</span> xLong == <span class="number">166</span>l</div><div class="line"></div><div class="line">BigInteger xBigInteger = <span class="number">01111</span></div><div class="line"><span class="keyword">assert</span> xBigInteger == <span class="number">585</span>g</div><div class="line"></div><div class="line"><span class="keyword">int</span> xNegativeInt = <span class="number">-077</span></div><div class="line"><span class="keyword">assert</span> xNegativeInt == <span class="number">-63</span></div></pre></td></tr></table></figure></p>
<p>数字的16进制表示如下，以0x开头：<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> xInt = <span class="number">0x77</span></div><div class="line"><span class="keyword">assert</span> xInt == <span class="number">119</span></div><div class="line"></div><div class="line"><span class="keyword">short</span> xShort = <span class="number">0xaa</span></div><div class="line"><span class="keyword">assert</span> xShort == <span class="number">170</span> <span class="keyword">as</span> <span class="keyword">short</span></div><div class="line"></div><div class="line"><span class="keyword">byte</span> xByte = <span class="number">0x3a</span></div><div class="line"><span class="keyword">assert</span> xByte == <span class="number">58</span> <span class="keyword">as</span> <span class="keyword">byte</span></div><div class="line"></div><div class="line"><span class="keyword">long</span> xLong = <span class="number">0xffff</span></div><div class="line"><span class="keyword">assert</span> xLong == <span class="number">65535</span>l</div><div class="line"></div><div class="line">BigInteger xBigInteger = <span class="number">0xaaaa</span></div><div class="line"><span class="keyword">assert</span> xBigInteger == <span class="number">43690</span>g</div><div class="line"></div><div class="line">Double xDouble = <span class="keyword">new</span> Double(<span class="string">'0x1.0p0'</span>)</div><div class="line"><span class="keyword">assert</span> xDouble == <span class="number">1.0</span>d</div><div class="line"></div><div class="line"><span class="keyword">int</span> xNegativeInt = <span class="number">-0x77</span></div><div class="line"><span class="keyword">assert</span> xNegativeInt == <span class="number">-119</span></div></pre></td></tr></table></figure></p>
<h4 id="小数字面量"><a href="#小数字面量" class="headerlink" title="小数字面量"></a>小数字面量</h4><p>小数字面量也跟java是一样的：</p>
<ul>
<li>float</li>
<li>double</li>
<li>java.lang.BigDemical</li>
</ul>
<p>如下所示：<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// primitive types</span></div><div class="line"><span class="keyword">float</span>  f = <span class="number">1.234</span></div><div class="line"><span class="keyword">double</span> d = <span class="number">2.345</span></div><div class="line"></div><div class="line"><span class="comment">// infinite precision</span></div><div class="line">BigDecimal bd =  <span class="number">3.456</span></div></pre></td></tr></table></figure></p>
<p>小数还支持科学计数法：<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">assert</span> <span class="number">1e3</span>  ==  <span class="number">1</span>_000<span class="number">.0</span></div><div class="line"><span class="keyword">assert</span> <span class="number">2E4</span>  == <span class="number">20</span>_000<span class="number">.0</span></div><div class="line"><span class="keyword">assert</span> <span class="number">3e+1</span> ==     <span class="number">30.0</span></div><div class="line"><span class="keyword">assert</span> <span class="number">4E-2</span> ==      <span class="number">0.04</span></div><div class="line"><span class="keyword">assert</span> <span class="number">5e-1</span> ==      <span class="number">0.5</span></div></pre></td></tr></table></figure></p>
<p>为了精确的计算小数，groovy选择java.lang.BigDecimal作为其小数类型。此外，float和double也是支持的小数类型，但是这俩类型需要一个显式类型声明、强制类型转换或后缀声明。<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">def</span> decimal = <span class="number">123.456</span></div><div class="line">println decimal.getClass() <span class="comment">// class java.lang.BigDecimal</span></div></pre></td></tr></table></figure></p>
<h4 id="字面中的下划线"><a href="#字面中的下划线" class="headerlink" title="字面中的下划线"></a>字面中的下划线</h4><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">long</span> creditCardNumber = <span class="number">1234</span>_5678_9012_3456L</div><div class="line"><span class="keyword">long</span> socialSecurityNumbers = <span class="number">999</span>_99_9999L</div><div class="line"><span class="keyword">double</span> monetaryAmount = <span class="number">12</span>_345_132<span class="number">.12</span></div><div class="line"><span class="keyword">long</span> hexBytes = <span class="number">0xFF</span>_EC_DE_5E</div><div class="line"><span class="keyword">long</span> hexWords = <span class="number">0xFFEC</span>_DE5E</div><div class="line"><span class="keyword">long</span> maxLong = <span class="number">0x7fff</span>_ffff_ffff_ffffL</div><div class="line"><span class="keyword">long</span> alsoMaxLong = <span class="number">9</span>_223_372_036_854_775_807L</div><div class="line"><span class="keyword">long</span> bytes = <span class="number">0b11010010</span>_01101001_10010100_10010010</div></pre></td></tr></table></figure>
<h4 id="数字类型后缀"><a href="#数字类型后缀" class="headerlink" title="数字类型后缀"></a>数字类型后缀</h4><p>可以给一个数字加入后缀把其转换为指定类型，如下所示：<br>Type|Suffix<br>—|—<br>BigInteger|G or g<br>Long|L or l<br>Integer|I or i<br>BigDecimal|G or g<br>Double|D or d<br>Float|F or f</p>
<p>如下所示：<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">assert</span> <span class="number">42</span>I == <span class="keyword">new</span> Integer(<span class="string">'42'</span>)</div><div class="line"><span class="keyword">assert</span> <span class="number">42</span>i == <span class="keyword">new</span> Integer(<span class="string">'42'</span>) <span class="comment">// lowercase i more readable</span></div><div class="line"><span class="keyword">assert</span> <span class="number">123</span>L == <span class="keyword">new</span> Long(<span class="string">"123"</span>) <span class="comment">// uppercase L more readable</span></div><div class="line"><span class="keyword">assert</span> <span class="number">2147483648</span> == <span class="keyword">new</span> Long(<span class="string">'2147483648'</span>) <span class="comment">// Long type used, value too large for an Integer</span></div><div class="line"><span class="keyword">assert</span> <span class="number">456</span>G == <span class="keyword">new</span> BigInteger(<span class="string">'456'</span>)</div><div class="line"><span class="keyword">assert</span> <span class="number">456</span>g == <span class="keyword">new</span> BigInteger(<span class="string">'456'</span>)</div><div class="line"><span class="keyword">assert</span> <span class="number">123.45</span> == <span class="keyword">new</span> BigDecimal(<span class="string">'123.45'</span>) <span class="comment">// default BigDecimal type used</span></div><div class="line"><span class="keyword">assert</span> <span class="number">1.200065</span>D == <span class="keyword">new</span> Double(<span class="string">'1.200065'</span>)</div><div class="line"><span class="keyword">assert</span> <span class="number">1.234</span>F == <span class="keyword">new</span> Float(<span class="string">'1.234'</span>)</div><div class="line"><span class="keyword">assert</span> <span class="number">1.23E23</span>D == <span class="keyword">new</span> Double(<span class="string">'1.23E23'</span>)</div><div class="line"><span class="keyword">assert</span> <span class="number">0b1111</span>L.<span class="keyword">class</span> == Long <span class="comment">// binary</span></div><div class="line"><span class="keyword">assert</span> <span class="number">0xFF</span>i.<span class="keyword">class</span> == Integer <span class="comment">// hexadecimal</span></div><div class="line"><span class="keyword">assert</span> <span class="number">034</span>G.<span class="keyword">class</span> == BigInteger <span class="comment">// octal</span></div></pre></td></tr></table></figure></p>
<h4 id="数学运算"><a href="#数学运算" class="headerlink" title="数学运算"></a>数学运算</h4><p>以下是数学运算表（除法运算和指数运算例外）：<br><img src="/2018/02/11/android/Gradle基础之Grovy语法/数学运算.png" alt="数学运算"></p>
<h5 id="除法运算"><a href="#除法运算" class="headerlink" title="除法运算"></a>除法运算</h5><p>如果两个数中其中有一个是float或double类型，那么除法运算/或者/=得到的结果就是double类型，否则就是BigDemical类型。</p>
<h5 id="指数运算"><a href="#指数运算" class="headerlink" title="指数运算"></a>指数运算</h5><p>运算表如下所示：<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// base and exponent are ints and the result can be represented by an Integer</span></div><div class="line"><span class="keyword">assert</span>    <span class="number">2</span>    **   <span class="number">3</span>    <span class="keyword">instanceof</span> Integer    <span class="comment">//  8</span></div><div class="line"><span class="keyword">assert</span>   <span class="number">10</span>    **   <span class="number">9</span>    <span class="keyword">instanceof</span> Integer    <span class="comment">//  1_000_000_000</span></div><div class="line"></div><div class="line"><span class="comment">// the base is a long, so fit the result in a Long</span></div><div class="line"><span class="comment">// (although it could have fit in an Integer)</span></div><div class="line"><span class="keyword">assert</span>    <span class="number">5</span>L   **   <span class="number">2</span>    <span class="keyword">instanceof</span> Long       <span class="comment">//  25</span></div><div class="line"></div><div class="line"><span class="comment">// the result can't be represented as an Integer or Long, so return a BigInteger</span></div><div class="line"><span class="keyword">assert</span>  <span class="number">100</span>    **  <span class="number">10</span>    <span class="keyword">instanceof</span> BigInteger <span class="comment">//  10e20</span></div><div class="line"><span class="keyword">assert</span> <span class="number">1234</span>    ** <span class="number">123</span>    <span class="keyword">instanceof</span> BigInteger <span class="comment">//  170515806212727042875...</span></div><div class="line"></div><div class="line"><span class="comment">// the base is a BigDecimal and the exponent a negative int</span></div><div class="line"><span class="comment">// but the result can be represented as an Integer</span></div><div class="line"><span class="keyword">assert</span>    <span class="number">0.5</span>  **  <span class="number">-2</span>    <span class="keyword">instanceof</span> Integer    <span class="comment">//  4</span></div><div class="line"></div><div class="line"><span class="comment">// the base is an int, and the exponent a negative float</span></div><div class="line"><span class="comment">// but again, the result can be represented as an Integer</span></div><div class="line"><span class="keyword">assert</span>    <span class="number">1</span>    **  <span class="number">-0.3</span>f <span class="keyword">instanceof</span> Integer    <span class="comment">//  1</span></div><div class="line"></div><div class="line"><span class="comment">// the base is an int, and the exponent a negative int</span></div><div class="line"><span class="comment">// but the result will be calculated as a Double</span></div><div class="line"><span class="comment">// (both base and exponent are actually converted to doubles)</span></div><div class="line"><span class="keyword">assert</span>   <span class="number">10</span>    **  <span class="number">-1</span>    <span class="keyword">instanceof</span> Double     <span class="comment">//  0.1</span></div><div class="line"></div><div class="line"><span class="comment">// the base is a BigDecimal, and the exponent is an int, so return a BigDecimal</span></div><div class="line"><span class="keyword">assert</span>    <span class="number">1.2</span>  **  <span class="number">10</span>    <span class="keyword">instanceof</span> BigDecimal <span class="comment">//  6.1917364224</span></div><div class="line"></div><div class="line"><span class="comment">// the base is a float or double, and the exponent is an int</span></div><div class="line"><span class="comment">// but the result can only be represented as a Double value</span></div><div class="line"><span class="keyword">assert</span>    <span class="number">3.4</span>f **   <span class="number">5</span>    <span class="keyword">instanceof</span> Double     <span class="comment">//  454.35430372146965</span></div><div class="line"><span class="keyword">assert</span>    <span class="number">5.6</span>d **   <span class="number">2</span>    <span class="keyword">instanceof</span> Double     <span class="comment">//  31.359999999999996</span></div><div class="line"></div><div class="line"><span class="comment">// the exponent is a decimal value</span></div><div class="line"><span class="comment">// and the result can only be represented as a Double value</span></div><div class="line"><span class="keyword">assert</span>    <span class="number">7.8</span>  **   <span class="number">1.9</span>  <span class="keyword">instanceof</span> Double     <span class="comment">//  49.542708423868476</span></div><div class="line"><span class="keyword">assert</span>    <span class="number">2</span>    **   <span class="number">0.1</span>f <span class="keyword">instanceof</span> Double     <span class="comment">//  1.0717734636432956</span></div></pre></td></tr></table></figure></p>
<h3 id="布尔型"><a href="#布尔型" class="headerlink" title="布尔型"></a>布尔型</h3><p>如下所示：<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">def</span> myBooleanVariable = <span class="literal">true</span></div><div class="line"><span class="keyword">boolean</span> untypedBooleanVar = <span class="literal">false</span></div><div class="line"><span class="keyword">boolean</span> Field = <span class="literal">true</span></div></pre></td></tr></table></figure></p>
<p>true和false只是两个基础的布尔值，关于更复杂的boolean操作，参考：<br><a href="http://www.groovy-lang.org/syntax.html#_bitwise_and_logical_operators" target="_blank" rel="external">logical operators.</a><br><a href="http://docs.groovy-lang.org/latest/html/documentation/core-semantics.html#Groovy-Truth" target="_blank" rel="external">special rules</a></p>
<h3 id="列表List"><a href="#列表List" class="headerlink" title="列表List"></a>列表List</h3><p>Groovy列表就是java.util.List，默认的子类就是java.util.ArrayList，如下所示：<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">def</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]         </div><div class="line"></div><div class="line"><span class="keyword">assert</span> numbers <span class="keyword">instanceof</span> List  </div><div class="line"><span class="keyword">assert</span> numbers.size() == <span class="number">3</span></div></pre></td></tr></table></figure></p>
<p>列表中可以支持各种类型：<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">def</span> heterogeneous = [<span class="number">1</span>, <span class="string">"a"</span>, <span class="literal">true</span>]</div></pre></td></tr></table></figure></p>
<p>还可以定义各种类型的List，默认是ArrayList:<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">def</span> arrayList = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</div><div class="line"><span class="keyword">assert</span> arrayList <span class="keyword">instanceof</span> java.util.ArrayList</div><div class="line"></div><div class="line"><span class="keyword">def</span> linkedList = [<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>] <span class="keyword">as</span> LinkedList    </div><div class="line"><span class="keyword">assert</span> linkedList <span class="keyword">instanceof</span> java.util.LinkedList</div><div class="line"></div><div class="line">LinkedList otherLinked = [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]          </div><div class="line"><span class="keyword">assert</span> otherLinked <span class="keyword">instanceof</span> java.util.LinkedList</div></pre></td></tr></table></figure></p>
<p>可以通过[]运算来获取列表的元素以及设置列表元素的值，下标可以是<strong>正数、负数、范围</strong>，还可以使用&lt;&lt;运算符来给list追加元素，如下所示：<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">def</span> letters = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>]</div><div class="line"></div><div class="line"><span class="keyword">assert</span> letters[<span class="number">0</span>] == <span class="string">'a'</span>     </div><div class="line"><span class="keyword">assert</span> letters[<span class="number">1</span>] == <span class="string">'b'</span></div><div class="line"></div><div class="line"><span class="keyword">assert</span> letters[<span class="number">-1</span>] == <span class="string">'d'</span>   <span class="comment">//获取最后一个元素，-1是从数组末尾开始的第一个元素</span></div><div class="line"><span class="keyword">assert</span> letters[<span class="number">-2</span>] == <span class="string">'c'</span></div><div class="line"></div><div class="line">letters[<span class="number">2</span>] = <span class="string">'C'</span>        <span class="comment">//赋值     </span></div><div class="line"><span class="keyword">assert</span> letters[<span class="number">2</span>] == <span class="string">'C'</span></div><div class="line"></div><div class="line">letters &lt;&lt; <span class="string">'e'</span>        <span class="comment">//在末尾追加一个元素       </span></div><div class="line"><span class="keyword">assert</span> letters[ <span class="number">4</span>] == <span class="string">'e'</span></div><div class="line"><span class="keyword">assert</span> letters[<span class="number">-1</span>] == <span class="string">'e'</span></div><div class="line"></div><div class="line"><span class="keyword">assert</span> letters[<span class="number">1</span>, <span class="number">3</span>] == [<span class="string">'b'</span>, <span class="string">'d'</span>]   <span class="comment">// 一次性获取两个元素，返回一个新的List     </span></div><div class="line"><span class="keyword">assert</span> letters[<span class="number">2.</span><span class="number">.4</span>] == [<span class="string">'C'</span>, <span class="string">'d'</span>, <span class="string">'e'</span>]    <span class="comment">//使用一个范围获取范围内的元素，返回一个新的List</span></div></pre></td></tr></table></figure></p>
<p>还可以组成多维List：<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">def</span> multi = [[<span class="number">0</span>, <span class="number">1</span>], [<span class="number">2</span>, <span class="number">3</span>]]     </div><div class="line"><span class="keyword">assert</span> multi[<span class="number">1</span>][<span class="number">0</span>] == <span class="number">2</span></div></pre></td></tr></table></figure></p>
<h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><p>数组需要显式定义数组的类型：<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">String[] arrStr = [<span class="string">'Ananas'</span>, <span class="string">'Banana'</span>, <span class="string">'Kiwi'</span>]  </div><div class="line"></div><div class="line"><span class="keyword">assert</span> arrStr <span class="keyword">instanceof</span> String[]    </div><div class="line"><span class="keyword">assert</span> !(arrStr <span class="keyword">instanceof</span> List)</div><div class="line"></div><div class="line"><span class="keyword">def</span> numArr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>] <span class="keyword">as</span> <span class="keyword">int</span>[]      </div><div class="line"></div><div class="line"><span class="keyword">assert</span> numArr <span class="keyword">instanceof</span> <span class="keyword">int</span>[]       </div><div class="line"><span class="keyword">assert</span> numArr.size() == <span class="number">3</span></div></pre></td></tr></table></figure></p>
<p>可以定义多维数组：<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">def</span> matrix3 = <span class="keyword">new</span> Integer[<span class="number">3</span>][<span class="number">3</span>]         </div><div class="line"><span class="keyword">assert</span> matrix3.size() == <span class="number">3</span></div><div class="line"></div><div class="line">Integer[][] matrix2                     </div><div class="line">matrix2 = [[<span class="number">1</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>]]</div><div class="line"><span class="keyword">assert</span> matrix2 <span class="keyword">instanceof</span> Integer[][]</div></pre></td></tr></table></figure></p>
<p>获取数组元素的方式跟List一样：<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">String[] names = [<span class="string">'Cédric'</span>, <span class="string">'Guillaume'</span>, <span class="string">'Jochen'</span>, <span class="string">'Paul'</span>]</div><div class="line"><span class="keyword">assert</span> names[<span class="number">0</span>] == <span class="string">'Cédric'</span>     </div><div class="line"></div><div class="line">names[<span class="number">2</span>] = <span class="string">'Blackdrag'</span>          </div><div class="line"><span class="keyword">assert</span> names[<span class="number">2</span>] == <span class="string">'Blackdrag'</span></div></pre></td></tr></table></figure></p>
<h3 id="映射表Maps"><a href="#映射表Maps" class="headerlink" title="映射表Maps"></a>映射表Maps</h3><p>如下所示：<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">def</span> colors = [<span class="string">red:</span> <span class="string">'#FF0000'</span>, <span class="string">green:</span> <span class="string">'#00FF00'</span>, <span class="string">blue:</span> <span class="string">'#0000FF'</span>]   </div><div class="line"></div><div class="line"><span class="keyword">assert</span> colors[<span class="string">'red'</span>] == <span class="string">'#FF0000'</span>    </div><div class="line"><span class="keyword">assert</span> colors.green  == <span class="string">'#00FF00'</span>    </div><div class="line"></div><div class="line">colors[<span class="string">'pink'</span>] = <span class="string">'#FF00FF'</span>           </div><div class="line">colors.yellow  = <span class="string">'#FFFF00'</span>           </div><div class="line"></div><div class="line"><span class="keyword">assert</span> colors.pink == <span class="string">'#FF00FF'</span></div><div class="line"><span class="keyword">assert</span> colors[<span class="string">'yellow'</span>] == <span class="string">'#FFFF00'</span></div><div class="line"></div><div class="line"><span class="keyword">assert</span> colors <span class="keyword">instanceof</span> java.util.LinkedHashMap <span class="comment">//默认是LinkedHashMap类型</span></div></pre></td></tr></table></figure></p>
<p>当获取一个map中不存在的key，会返回null:<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">assert</span> colors.unknown == <span class="literal">null</span></div></pre></td></tr></table></figure></p>
<p>除了使用string类型的key，还可以使用其他类型的key:<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">def</span> numbers = [<span class="number">1</span>: <span class="string">'one'</span>, <span class="number">2</span>: <span class="string">'two'</span>]</div><div class="line"></div><div class="line"><span class="keyword">assert</span> numbers[<span class="number">1</span>] == <span class="string">'one'</span></div></pre></td></tr></table></figure></p>
<p>如果key是一个变量，如下所示：<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">def</span> key = <span class="string">'name'</span></div><div class="line"><span class="keyword">def</span> person = [<span class="string">key:</span> <span class="string">'Guillaume'</span>]  <span class="comment">//'Guilaume'对应的key为"key"，而不是变量key所关联的值    </span></div><div class="line"></div><div class="line"><span class="keyword">assert</span> !person.containsKey(<span class="string">'name'</span>)   <span class="comment">//不包含'name'这个key</span></div><div class="line"><span class="keyword">assert</span> person.containsKey(<span class="string">'key'</span>)     <span class="comment">//包含'key'这个key</span></div></pre></td></tr></table></figure></p>
<p>要想解决上述问题，可以如下所示：<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">def</span> key = <span class="string">'name'</span></div><div class="line">person = [(key): <span class="string">'Guillaume'</span>]  <span class="comment">//此时'Guilaume'对应的key就是变量key所对应的值      </span></div><div class="line"></div><div class="line"><span class="keyword">assert</span> person.containsKey(<span class="string">'name'</span>)    </div><div class="line"><span class="keyword">assert</span> !person.containsKey(<span class="string">'key'</span>)</div></pre></td></tr></table></figure></p>
<p>以上就是Groovy的基本语法，关于Groovy的语法特性，还包含一下几个方面，直接看官方文档即可，有兴趣的可以了解下。<br><a href="http://www.groovy-lang.org/operators.html" target="_blank" rel="external">运算符 Operators</a><br><a href="http://www.groovy-lang.org/structure.html" target="_blank" rel="external">程序结构 Program structure</a><br><a href="http://www.groovy-lang.org/objectorientation.html" target="_blank" rel="external">Groovy 面向对象语法 Object orientation </a><br><a href="http://www.groovy-lang.org/closures.html" target="_blank" rel="external">闭包 Closures</a><br><a href="http://www.groovy-lang.org/semantics.html" target="_blank" rel="external">Groovy 语义 Semantics</a></p>
]]></content>
      
        <categories>
            
            <category> Gradle相关 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[SimpleSlidingMenu]]></title>
      <url>http://easyliu.com/2017/05/14/android/SimpleSlidingMenu/</url>
      <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>一个简单的Android侧滑菜单，支持left, right,left_right三种菜单模式，支持edge,all两种滑动模式，支持设置菜单的宽度，支持滑动动画</p>
<h2 id="效果如下"><a href="#效果如下" class="headerlink" title="效果如下"></a>效果如下</h2><p>每个Fragment里面是一个RecyclerView，解决了滑动冲突问题，包含滑动动画</p>
<p><img src="/2017/05/14/android/SimpleSlidingMenu/simpleSlidingMenu.gif" alt="菜单滑动效果"></p>
<h2 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> SlidingMenuLayout mSlideMenuLayout;</div><div class="line"></div><div class="line"> <span class="meta">@Override</span> <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">   <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">   mSlideMenuLayout = <span class="keyword">new</span> SlidingMenuLayout(<span class="keyword">this</span>);</div><div class="line">   setContentView(mSlideMenuLayout);</div><div class="line">   initSlideMenuLayout();</div><div class="line"> &#125;</div><div class="line"></div><div class="line"> <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initSlideMenuLayout</span><span class="params">()</span> </span>&#123;</div><div class="line">       getSupportFragmentManager().beginTransaction()</div><div class="line">               .replace(SlidingMenuLayout.LEFT_TAG, ItemFragment.newInstance(<span class="number">1</span>))</div><div class="line">               .commit();</div><div class="line">       getSupportFragmentManager().beginTransaction()</div><div class="line">               .replace(SlidingMenuLayout.MIDDLE_TAG, ItemFragment.newInstance(<span class="number">1</span>))</div><div class="line">               .commit();</div><div class="line">       getSupportFragmentManager().beginTransaction()</div><div class="line">               .replace(SlidingMenuLayout.RIGHT_TAG, ItemFragment.newInstance(<span class="number">1</span>))</div><div class="line">               .commit();</div><div class="line">       mSlideMenuLayout.setBackgroundColor(Color.parseColor(<span class="string">"#4876FF"</span>));</div><div class="line">       mSlideMenuLayout.setMenuMode(SlidingMenuLayout.MenuMode.LEFT_RIGHT);</div><div class="line">       mSlideMenuLayout.setSlidingMode(SlidingMenuLayout.SlidingMode.ALL);</div><div class="line">       mSlideMenuLayout.setSlideEnable(<span class="keyword">true</span>);</div><div class="line">       mSlideMenuLayout.setMenuContentWidthRation(<span class="number">0.75f</span>);</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<ul>
<li>把SlidingMenuLayout作为根布局</li>
<li>左侧，中间，以及右侧菜单布局都会有一个tag，通过给每一个布局设置一个fragment即可！</li>
<li>具体参考代码中的：MainActivity.java</li>
</ul>
<h2 id="关于滑动动画"><a href="#关于滑动动画" class="headerlink" title="关于滑动动画"></a>关于滑动动画</h2><p>滑动动画主要是给SlideMenuLayout设置IOnMenuOpenListener接口，在接口里面对菜单以及中间视图进行一些缩放、透明度以及平移操作，从而达到动画效果，如下所示：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">mSlideMenuLayout.setOnMenuOpenListener(<span class="keyword">new</span> SlidingMenuLayout.IOnMenuOpenListener() &#123;</div><div class="line">           <span class="meta">@Override</span></div><div class="line">           <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">menuOpen</span><span class="params">(View menuView, View middleView, <span class="keyword">float</span> openPercent, <span class="keyword">boolean</span> isLeftMenu)</span> </span>&#123;</div><div class="line">               <span class="keyword">float</span> menuScale = (<span class="keyword">float</span>) (<span class="number">0.8</span> + <span class="number">0.2</span> * openPercent);<span class="comment">//0.8到1</span></div><div class="line">               <span class="keyword">float</span> contentScale = (<span class="keyword">float</span>) (<span class="number">1</span> - <span class="number">0.2</span> * openPercent);<span class="comment">//1到0.8</span></div><div class="line">               <span class="keyword">float</span> translationXScale = <span class="number">0</span>;</div><div class="line">               <span class="keyword">if</span> (isLeftMenu) &#123;</div><div class="line">                   translationXScale = (<span class="number">1</span> - openPercent) * <span class="number">0.6f</span>;<span class="comment">//范围是0.6到0</span></div><div class="line">               &#125; <span class="keyword">else</span> &#123;</div><div class="line">                   translationXScale = -(<span class="number">1</span> - openPercent) * <span class="number">0.6f</span>;<span class="comment">//范围是-0.6到0</span></div><div class="line">               &#125;</div><div class="line">               menuView.setScaleX(menuScale);</div><div class="line">               menuView.setScaleY(menuScale);</div><div class="line">               menuView.setAlpha(openPercent);</div><div class="line">               menuView.setTranslationX(menuView.getWidth() * translationXScale);</div><div class="line">               middleView.setScaleX(contentScale);</div><div class="line">               middleView.setScaleY(contentScale);</div><div class="line">           &#125;</div><div class="line">       &#125;);</div></pre></td></tr></table></figure></p>
<p>代码地址：<a href="https://github.com/EasyLiu-Ly/SimpleSlidingMenu.git" target="_blank" rel="external">https://github.com/EasyLiu-Ly/SimpleSlidingMenu.git</a></p>
]]></content>
      
        <categories>
            
            <category> Android自定义控件 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[SlideFinishActivity]]></title>
      <url>http://easyliu.com/2017/05/14/android/SlideFinishActivity/</url>
      <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>让Activity跟随者手指的滑动而滑动，当向右滑动到一定距离或者往右滑动到达一定速度就finish，类似于微信滑动finish的效果。</p>
<h2 id="效果如下"><a href="#效果如下" class="headerlink" title="效果如下"></a>效果如下</h2><p><img src="/2017/05/14/android/SlideFinishActivity/SlideFinishActivity.gif" alt="滑动finish"></p>
<ul>
<li>支持边界滑动和全屏滑动两种模式</li>
<li>解决了滑动冲突问题，例如上图中Activity当中就包含了ViewPager，解决了和ViewPager的滑动冲突问题</li>
</ul>
<h2 id="使用方式如下"><a href="#使用方式如下" class="headerlink" title="使用方式如下"></a>使用方式如下</h2><ul>
<li>自定义的Activity继承自BaseSlideFinishActivity</li>
<li>自定义的Activity的主题需要包含以下两个属性<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:windowIsTranslucent"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line"> <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:windowBackground"</span>&gt;</span>@android:color/transparent<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="滑动动画"><a href="#滑动动画" class="headerlink" title="滑动动画"></a>滑动动画</h2><p>在滑动的时候，可以实现滑动动画效果，如下所示，类似于酷狗播放界面滑动Finish的效果。具体实现查看SlideFinishRelativeLayout中的IOnSlideFinishChangeListener接口，在BaseSlideFinishActivity当中实现了这个接口，在这个接口里面对顶层视图进行rotation操作即可。</p>
<p><img src="/2017/05/14/android/SlideFinishActivity/SlideFinishActivity2.gif" alt="滑动Finish2"></p>
<p>代码地址：<a href="https://github.com/EasyLiu-Ly/SlideFinishActivity.git" target="_blank" rel="external">https://github.com/EasyLiu-Ly/SlideFinishActivity.git</a></p>
]]></content>
      
        <categories>
            
            <category> Android自定义控件 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android应用层View触摸事件分发机制]]></title>
      <url>http://easyliu.com/2017/04/24/android/ViewDispatchTouchEvent/</url>
      <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>前两篇博客从源码的角度对View绘制流程进行了分析，那么当用户需要跟View进行交互的时候，比如点击按钮的时候，按钮是如何得到点击事件的呢？当用户在屏幕上进行点击或触摸的时候，事件是如何传递到各个View的呢？这个就是本篇博客研究的点：View事件分发机制。只有同时掌握View事件分发机和View绘制流程，并辅以一定的练习，才能真正掌握自定义View。下面开始进入正题！注：源码基于API25。</p>
<h2 id="触摸事件的来源及View事件分发入口"><a href="#触摸事件的来源及View事件分发入口" class="headerlink" title="触摸事件的来源及View事件分发入口"></a>触摸事件的来源及View事件分发入口</h2><p>还记得之前说过，在Activity的attach方法里面会新建一个PhoneWindow作为顶层Window，如下所示：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">attach</span><span class="params">(Context context, ActivityThread aThread,</span></span></div><div class="line">           Instrumentation instr, IBinder token, <span class="keyword">int</span> ident,</div><div class="line">           Application application, Intent intent, ActivityInfo info,</div><div class="line">           CharSequence title, Activity parent, String id,</div><div class="line">           NonConfigurationInstances lastNonConfigurationInstances,</div><div class="line">           Configuration config, String referrer, IVoiceInteractor voiceInteractor,</div><div class="line">           Window window) &#123;</div><div class="line">       attachBaseContext(context);</div><div class="line"></div><div class="line">       mFragments.attachHost(<span class="keyword">null</span> <span class="comment">/*parent*/</span>);</div><div class="line"></div><div class="line">       mWindow = <span class="keyword">new</span> PhoneWindow(<span class="keyword">this</span>, window);</div><div class="line">       mWindow.setWindowControllerCallback(<span class="keyword">this</span>);</div><div class="line">       mWindow.setCallback(<span class="keyword">this</span>);</div><div class="line">       mWindow.setOnWindowDismissedCallback(<span class="keyword">this</span>);</div><div class="line">       mWindow.getLayoutInflater().setPrivateFactory(<span class="keyword">this</span>);</div><div class="line">       ..........</div><div class="line">       ..........</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>在上面的代码当中有一句：mWindow.setCallback(this),这句话给Window设置了一个Callback回调接口给Activity,来看一下这个回调接口：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">   * API from a Window back to its caller.  This allows the client to</div><div class="line">   * intercept key dispatching, panels and menus, etc.</div><div class="line">   */</div><div class="line">  <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Callback</span> </span>&#123;</div><div class="line"></div><div class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">dispatchKeyEvent</span><span class="params">(KeyEvent event)</span></span>;</div><div class="line"></div><div class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">dispatchKeyShortcutEvent</span><span class="params">(KeyEvent event)</span></span>;</div><div class="line"></div><div class="line">      <span class="comment">/**</span></div><div class="line">       * Called to process touch screen events.  At the very least your</div><div class="line">       * implementation must call</div><div class="line">       * &#123;<span class="doctag">@link</span> android.view.Window#superDispatchTouchEvent&#125; to do the</div><div class="line">       * standard touch screen processing.</div><div class="line">       *</div><div class="line">       * <span class="doctag">@param</span> event The touch screen event.</div><div class="line">       *</div><div class="line">       * <span class="doctag">@return</span> boolean Return true if this event was consumed.</div><div class="line">       */</div><div class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">dispatchTouchEvent</span><span class="params">(MotionEvent event)</span></span>;</div><div class="line"></div><div class="line">      .............</div></pre></td></tr></table></figure>
<p> 可以发现这个回调接口里面有很多回调方法，前三个方法都是对事件进行分发，第三个方法dispatchTouchEvent就是触摸事件分发。当android系统发生触摸事件时，会把触摸事件发送给顶层Window（至于是怎么传递给Window的，这里暂时不深入研究，涉及到WindowManager,WindowManagerService等跨进程的调用过程，也涉及到Activity的启动过程分析）,这里是PhoneWindow,由于给PhoneWindow设置了回调接口，在Activity当中实现了这个接口，因此，我们查看Activity当中的dispatchTouchEvent方法，如下所示：</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">   * Called to process touch screen events.  You can override this to</div><div class="line">   * intercept all touch screen events before they are dispatched to the</div><div class="line">   * window.  Be sure to call this implementation for touch screen events</div><div class="line">   * that should be handled normally.</div><div class="line">   *</div><div class="line">   * <span class="doctag">@param</span> ev The touch screen event.</div><div class="line">   *</div><div class="line">   * <span class="doctag">@return</span> boolean Return true if this event was consumed.</div><div class="line">   */</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">dispatchTouchEvent</span><span class="params">(MotionEvent ev)</span> </span>&#123;</div><div class="line">      <span class="keyword">if</span> (ev.getAction() == MotionEvent.ACTION_DOWN) &#123;</div><div class="line">          onUserInteraction();</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">if</span> (getWindow().superDispatchTouchEvent(ev)) &#123;</div><div class="line">          <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">return</span> onTouchEvent(ev);</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p> 可以看出，如果Action为ACTION_DOWN,首先会调用onUserInteraction方法，这个方法如下所示：</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">    * Called whenever a key, touch, or trackball event is dispatched to the</div><div class="line">    * activity.  Implement this method if you wish to know that the user has</div><div class="line">    * interacted with the device in some way while your activity is running.</div><div class="line">    * This callback and &#123;<span class="doctag">@link</span> #onUserLeaveHint&#125; are intended to help</div><div class="line">    * activities manage status bar notifications intelligently; specifically,</div><div class="line">    * for helping activities determine the proper time to cancel a notfication.</div><div class="line">    *</div><div class="line">    * &lt;p&gt;All calls to your activity's &#123;<span class="doctag">@link</span> #onUserLeaveHint&#125; callback will</div><div class="line">    * be accompanied by calls to &#123;<span class="doctag">@link</span> #onUserInteraction&#125;.  This</div><div class="line">    * ensures that your activity will be told of relevant user activity such</div><div class="line">    * as pulling down the notification pane and touching an item there.</div><div class="line">    *</div><div class="line">    * &lt;p&gt;Note that this callback will be invoked for the touch down action</div><div class="line">    * that begins a touch gesture, but may not be invoked for the touch-moved</div><div class="line">    * and touch-up actions that follow.</div><div class="line">    *</div><div class="line">    * <span class="doctag">@see</span> #onUserLeaveHint()</div><div class="line">    */</div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onUserInteraction</span><span class="params">()</span> </span>&#123;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p> 关于这个方法，注释已经说的很明白了，一般和onUserLeaveHint方法配对使用，主要是用来帮助Activity管理状态栏通知。</p>
<ul>
<li><p>调用完onUserInteraction方法之后，就会调用getWindow.superDispatchTouchEvent方法，也就是调用PhoneWindow的superDispatchTouchEvent方法。<br>如果这个方法返回true,就直接返回true,否则会调用Activity的onTouchEvent方法。</p>
</li>
<li><p>我们可以在Activity重写dispatchTouchEvent方法来对所有的触摸事件进行拦截，防止其分发至window。</p>
</li>
<li><p>当Activity的onTouchEvent被调用的时候，说明Window的superDispatchTouchEvent方法返回false,也就是没有消耗事件，事件最终交给Activity进行处理，因此我们也可以在Activity当中重写onTouchEvent方法来进行事件处理。</p>
</li>
</ul>
<p>来看下PhoneWindow的superDispatchTouchEvent方法：</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">superDispatchTouchEvent</span><span class="params">(MotionEvent event)</span> </span>&#123;</div><div class="line">     <span class="keyword">return</span> mDecor.superDispatchTouchEvent(event);</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<p>可以看出其调用的是顶层视图DecorView的superDispatchTouchEvent方法，如下所示：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">superDispatchTouchEvent</span><span class="params">(MotionEvent event)</span> </span>&#123;</div><div class="line">       <span class="keyword">return</span> <span class="keyword">super</span>.dispatchTouchEvent(event);</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>可以看出，DecorView调用了其父类的dispatchTouchEvent方法，跳进去看发现调用的是ViewGroup的dispatchTouchEvent方法。<br>这个也可以理解，因为DecorView是继承自FrameLayout，而FrameLayout是继承自ViewGroup。</p>
<p>通过以上分析可以看出，View触摸事件的入口是DecorView, 也就是ViewGroup。整个事触摸件的传递过程如下：<br><strong><br>-&gt; 顶层PhoneWindow得到触摸事件，调用其dispatchTouchEvent方法<br>-&gt; Activity当中收到dispatchTouchEvent回调方法，调用mWindow的superDispatchTouchEvent方法<br>-&gt; 调用PhoneWindow的superDispatchTouchEvent方法<br>-&gt; 调用DecorView的superDispatchTouchEvent方法<br>-&gt; 最终调用ViewGroup的dispatchTouchEvent方法<br>-&gt; View触摸事件分发入口
</strong></p>
<h2 id="ViewGroup事件分发机制"><a href="#ViewGroup事件分发机制" class="headerlink" title="ViewGroup事件分发机制"></a>ViewGroup事件分发机制</h2><p>既然View触摸事件的入口是ViewGroup的dispatchTouchEvent方法，说明这个方法至关重要，接下来看下这个dispatchTouchEvent方法,<br>这个方法比较长，我会在代码中加入注释：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">dispatchTouchEvent</span><span class="params">(MotionEvent ev)</span> </span>&#123;</div><div class="line">       ................</div><div class="line">       <span class="keyword">boolean</span> handled = <span class="keyword">false</span>;</div><div class="line">       <span class="keyword">if</span> (onFilterTouchEventForSecurity(ev)) &#123;</div><div class="line">           <span class="keyword">final</span> <span class="keyword">int</span> action = ev.getAction();</div><div class="line">           <span class="keyword">final</span> <span class="keyword">int</span> actionMasked = action &amp; MotionEvent.ACTION_MASK;</div><div class="line"></div><div class="line">           <span class="comment">//ACTION_DOWN的话就恢复初始状态，清除TouchTarget</span></div><div class="line">           <span class="keyword">if</span> (actionMasked == MotionEvent.ACTION_DOWN) &#123;</div><div class="line">               <span class="comment">// Throw away all previous state when starting a new touch gesture.</span></div><div class="line">               <span class="comment">// The framework may have dropped the up or cancel event for the previous gesture</span></div><div class="line">               <span class="comment">// due to an app switch, ANR, or some other state change.</span></div><div class="line">               cancelAndClearTouchTargets(ev);</div><div class="line">               resetTouchState();</div><div class="line">           &#125;</div><div class="line"></div><div class="line">           <span class="comment">// 检测事件拦截</span></div><div class="line">           <span class="keyword">final</span> <span class="keyword">boolean</span> intercepted;<span class="comment">//这个标志用于是否拦截事件，如果拦截的话，就交给自身的这个ViewGroup进行处理</span></div><div class="line">           <span class="comment">//如果是ACTION_DOWN或者mFirstTouchTarget不为空（说明已经有了TouchTarget），就开始判断是否拦截事件</span></div><div class="line">           <span class="keyword">if</span> (actionMasked == MotionEvent.ACTION_DOWN</div><div class="line">                   || mFirstTouchTarget != <span class="keyword">null</span>) &#123;</div><div class="line">               <span class="comment">//是否不允许拦截，在ViewGroup当中有一个requestDisallowInterceptTouchEvent(boolean disallowIntercept)方法</span></div><div class="line">               <span class="comment">//这个函数可以用来设置是否拦截，一般用在子View当中，通过调用父View的这个方法来阻止父View拦截事件</span></div><div class="line">               <span class="keyword">final</span> <span class="keyword">boolean</span> disallowIntercept = (mGroupFlags &amp; FLAG_DISALLOW_INTERCEPT) != <span class="number">0</span>;</div><div class="line">               <span class="comment">//允许拦截的话，就调用onInterceptTouchEvent方法，一般我们需要重写这个方法，来根据需求来进行事件拦截</span></div><div class="line">               <span class="keyword">if</span> (!disallowIntercept) &#123;</div><div class="line">                   intercepted = onInterceptTouchEvent(ev);</div><div class="line">                   ev.setAction(action); <span class="comment">// restore action in case it was changed</span></div><div class="line">               &#125; <span class="keyword">else</span> &#123;</div><div class="line">               <span class="comment">//不允许拦截</span></div><div class="line">                   intercepted = <span class="keyword">false</span>;</div><div class="line">               &#125;</div><div class="line">           &#125; <span class="keyword">else</span> &#123;</div><div class="line">              <span class="comment">//如果没有TouchTarget且当前action不是初始的ACTION_DOWN,就拦截</span></div><div class="line">              <span class="comment">//如果当前ViewGroup拦截了ACTION_DOWN,那么剩下的ACTION_UP,ACTION_MOVE事件都是交给它处理，且onInterceptTouchEvent方法</span></div><div class="line">              <span class="comment">// 不会再次调用，因为此时mFirstTouchTarget==null且action!=ACTION_DOWN</span></div><div class="line">               <span class="comment">// There are no touch targets and this action is not an initial down</span></div><div class="line">               <span class="comment">// so this view group continues to intercept touches.</span></div><div class="line">               intercepted = <span class="keyword">true</span>;</div><div class="line">           &#125;</div><div class="line"></div><div class="line">           <span class="comment">// If intercepted, start normal event dispatch. Also if there is already</span></div><div class="line">           <span class="comment">// a view that is handling the gesture, do normal event dispatch.</span></div><div class="line">           <span class="keyword">if</span> (intercepted || mFirstTouchTarget != <span class="keyword">null</span>) &#123;</div><div class="line">               ev.setTargetAccessibilityFocus(<span class="keyword">false</span>);</div><div class="line">           &#125;</div><div class="line"></div><div class="line">           <span class="comment">// Check for cancelation.</span></div><div class="line">           <span class="keyword">final</span> <span class="keyword">boolean</span> canceled = resetCancelNextUpFlag(<span class="keyword">this</span>)</div><div class="line">                   || actionMasked == MotionEvent.ACTION_CANCEL;</div><div class="line"></div><div class="line">           <span class="comment">// Update list of touch targets for pointer down, if needed.</span></div><div class="line">           <span class="keyword">final</span> <span class="keyword">boolean</span> split = (mGroupFlags &amp; FLAG_SPLIT_MOTION_EVENTS) != <span class="number">0</span>;</div><div class="line">           TouchTarget newTouchTarget = <span class="keyword">null</span>;</div><div class="line">           <span class="keyword">boolean</span> alreadyDispatchedToNewTouchTarget = <span class="keyword">false</span>;</div><div class="line">           <span class="comment">//如果事件没有取消且没有拦截事件</span></div><div class="line">           <span class="keyword">if</span> (!canceled &amp;&amp; !intercepted) &#123;</div><div class="line"></div><div class="line">               <span class="comment">// If the event is targeting accessiiblity focus we give it to the</span></div><div class="line">               <span class="comment">// view that has accessibility focus and if it does not handle it</span></div><div class="line">               <span class="comment">// we clear the flag and dispatch the event to all children as usual.</span></div><div class="line">               <span class="comment">// We are looking up the accessibility focused host to avoid keeping</span></div><div class="line">               <span class="comment">// state since these events are very rare.</span></div><div class="line">               View childWithAccessibilityFocus = ev.isTargetAccessibilityFocus()</div><div class="line">                       ? findChildWithAccessibilityFocus() : <span class="keyword">null</span>;</div><div class="line">              <span class="comment">//发现没有，这里只是对ACTION_DOWN进行处理，那么ACTION_UP和ACTION_MOVE呢？</span></div><div class="line">               <span class="keyword">if</span> (actionMasked == MotionEvent.ACTION_DOWN</div><div class="line">                       || (split &amp;&amp; actionMasked == MotionEvent.ACTION_POINTER_DOWN)</div><div class="line">                       || actionMasked == MotionEvent.ACTION_HOVER_MOVE) &#123;</div><div class="line">                   <span class="keyword">final</span> <span class="keyword">int</span> actionIndex = ev.getActionIndex(); <span class="comment">// always 0 for down</span></div><div class="line">                   <span class="keyword">final</span> <span class="keyword">int</span> idBitsToAssign = split ? <span class="number">1</span> &lt;&lt; ev.getPointerId(actionIndex)</div><div class="line">                           : TouchTarget.ALL_POINTER_IDS;</div><div class="line"></div><div class="line">                   <span class="comment">// Clean up earlier touch targets for this pointer id in case they</span></div><div class="line">                   <span class="comment">// have become out of sync.</span></div><div class="line">                   removePointersFromTouchTargets(idBitsToAssign);</div><div class="line"></div><div class="line">                   <span class="keyword">final</span> <span class="keyword">int</span> childrenCount = mChildrenCount;</div><div class="line">                   <span class="keyword">if</span> (newTouchTarget == <span class="keyword">null</span> &amp;&amp; childrenCount != <span class="number">0</span>) &#123;</div><div class="line">                       <span class="keyword">final</span> <span class="keyword">float</span> x = ev.getX(actionIndex);</div><div class="line">                       <span class="keyword">final</span> <span class="keyword">float</span> y = ev.getY(actionIndex);</div><div class="line">                       <span class="comment">// Find a child that can receive the event.</span></div><div class="line">                       <span class="comment">// Scan children from front to back.</span></div><div class="line">                       <span class="comment">//开始遍历子View，找到能够接收事件的子View</span></div><div class="line">                       <span class="keyword">final</span> ArrayList&lt;View&gt; preorderedList = buildTouchDispatchChildList();</div><div class="line">                       <span class="keyword">final</span> <span class="keyword">boolean</span> customOrder = preorderedList == <span class="keyword">null</span></div><div class="line">                               &amp;&amp; isChildrenDrawingOrderEnabled();</div><div class="line">                       <span class="keyword">final</span> View[] children = mChildren;</div><div class="line">                       <span class="keyword">for</span> (<span class="keyword">int</span> i = childrenCount - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</div><div class="line">                           <span class="keyword">final</span> <span class="keyword">int</span> childIndex = getAndVerifyPreorderedIndex(</div><div class="line">                                   childrenCount, i, customOrder);</div><div class="line">                           <span class="keyword">final</span> View child = getAndVerifyPreorderedView(</div><div class="line">                                   preorderedList, children, childIndex);</div><div class="line"></div><div class="line">                           <span class="comment">// If there is a view that has accessibility focus we want it</span></div><div class="line">                           <span class="comment">// to get the event first and if not handled we will perform a</span></div><div class="line">                           <span class="comment">// normal dispatch. We may do a double iteration but this is</span></div><div class="line">                           <span class="comment">// safer given the timeframe.</span></div><div class="line">                           <span class="keyword">if</span> (childWithAccessibilityFocus != <span class="keyword">null</span>) &#123;</div><div class="line">                               <span class="keyword">if</span> (childWithAccessibilityFocus != child) &#123;</div><div class="line">                                   <span class="keyword">continue</span>;</div><div class="line">                               &#125;</div><div class="line">                               childWithAccessibilityFocus = <span class="keyword">null</span>;</div><div class="line">                               i = childrenCount - <span class="number">1</span>;</div><div class="line">                           &#125;</div><div class="line">                           <span class="comment">//判断子view是否能接收pointer事件或者当前的触摸点在子view的边界内，</span></div><div class="line">                           <span class="comment">//如果这两个没有一个满足，就continue，跳到循环的下一步，也就是下一个子view</span></div><div class="line">                           <span class="keyword">if</span> (!canViewReceivePointerEvents(child)</div><div class="line">                                   || !isTransformedTouchPointInView(x, y, child, <span class="keyword">null</span>)) &#123;</div><div class="line">                               ev.setTargetAccessibilityFocus(<span class="keyword">false</span>);</div><div class="line">                               <span class="keyword">continue</span>;</div><div class="line">                           &#125;</div><div class="line"></div><div class="line">                           newTouchTarget = getTouchTarget(child);</div><div class="line">                           <span class="comment">// 如果child已经接收了触摸事件</span></div><div class="line">                           <span class="keyword">if</span> (newTouchTarget != <span class="keyword">null</span>) &#123;</div><div class="line">                               <span class="comment">// Child is already receiving touch within its bounds.</span></div><div class="line">                               <span class="comment">// Give it the new pointer in addition to the ones it is handling.</span></div><div class="line">                               newTouchTarget.pointerIdBits |= idBitsToAssign;</div><div class="line">                               <span class="keyword">break</span>;</div><div class="line">                           &#125;</div><div class="line"></div><div class="line">                           resetCancelNextUpFlag(child);</div><div class="line">                           <span class="comment">// 这个函数内部调用了child.dispatchTouchEvent方法</span></div><div class="line">                           <span class="keyword">if</span> (dispatchTransformedTouchEvent(ev, <span class="keyword">false</span>, child, idBitsToAssign)) &#123;</div><div class="line">                           <span class="comment">// 有子View接收这个事件</span></div><div class="line">                               <span class="comment">// Child wants to receive touch within its bounds.</span></div><div class="line">                               mLastTouchDownTime = ev.getDownTime();</div><div class="line">                               <span class="keyword">if</span> (preorderedList != <span class="keyword">null</span>) &#123;</div><div class="line">                                   <span class="comment">// childIndex points into presorted list, find original index</span></div><div class="line">                                   <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; childrenCount; j++) &#123;</div><div class="line">                                       <span class="keyword">if</span> (children[childIndex] == mChildren[j]) &#123;</div><div class="line">                                           mLastTouchDownIndex = j;</div><div class="line">                                           <span class="keyword">break</span>;</div><div class="line">                                       &#125;</div><div class="line">                                   &#125;</div><div class="line">                               &#125; <span class="keyword">else</span> &#123;</div><div class="line">                                   mLastTouchDownIndex = childIndex;</div><div class="line">                               &#125;</div><div class="line">                               mLastTouchDownX = ev.getX();</div><div class="line">                               mLastTouchDownY = ev.getY();</div><div class="line">                               <span class="comment">//把child的TouchTarget加入到链表的开头且返回child的TouchTarget</span></div><div class="line">                               newTouchTarget = addTouchTarget(child, idBitsToAssign);</div><div class="line">                               alreadyDispatchedToNewTouchTarget = <span class="keyword">true</span>;</div><div class="line">                               <span class="keyword">break</span>;</div><div class="line">                           &#125;</div><div class="line"></div><div class="line">                           <span class="comment">// The accessibility focus didn't handle the event, so clear</span></div><div class="line">                           <span class="comment">// the flag and do a normal dispatch to all children.</span></div><div class="line">                           ev.setTargetAccessibilityFocus(<span class="keyword">false</span>);</div><div class="line">                       &#125;</div><div class="line">                       <span class="keyword">if</span> (preorderedList != <span class="keyword">null</span>) preorderedList.clear();</div><div class="line">                   &#125;</div><div class="line"></div><div class="line">                   <span class="keyword">if</span> (newTouchTarget == <span class="keyword">null</span> &amp;&amp; mFirstTouchTarget != <span class="keyword">null</span>) &#123;</div><div class="line">                       <span class="comment">// Did not find a child to receive the event.</span></div><div class="line">                       <span class="comment">// Assign the pointer to the least recently added target.</span></div><div class="line">                       newTouchTarget = mFirstTouchTarget;</div><div class="line">                       <span class="keyword">while</span> (newTouchTarget.next != <span class="keyword">null</span>) &#123;</div><div class="line">                           newTouchTarget = newTouchTarget.next;</div><div class="line">                       &#125;</div><div class="line">                       newTouchTarget.pointerIdBits |= idBitsToAssign;</div><div class="line">                   &#125;</div><div class="line">               &#125;</div><div class="line">           &#125;</div><div class="line"></div><div class="line">           <span class="comment">//这里有三种情况：一种是当前ViewGroup拦截了事件，一种是没有子View，还有一种是子View的dispatchTouchEvent方法返回了false</span></div><div class="line">           <span class="comment">//这三种情况下就交给当前ViewGroup进行处理</span></div><div class="line">           <span class="comment">// Dispatch to touch targets.</span></div><div class="line">           <span class="keyword">if</span> (mFirstTouchTarget == <span class="keyword">null</span>) &#123;</div><div class="line">               <span class="comment">// No touch targets so treat this as an ordinary view.</span></div><div class="line">               handled = dispatchTransformedTouchEvent(ev, canceled, <span class="keyword">null</span>,</div><div class="line">                       TouchTarget.ALL_POINTER_IDS);</div><div class="line">           &#125; <span class="keyword">else</span> &#123;</div><div class="line">             <span class="comment">// 我们发现前面只是对ACTION_DOWN进行了分发,当某个子当某个子View返回true时，会中止Down事件的分发，</span></div><div class="line">             <span class="comment">// 同时在ViewGroup中记录该子View。接下去的Move和Up事件将由该子View直接进行处理,如下所示。</span></div><div class="line">               <span class="comment">// Dispatch to touch targets, excluding the new touch target if we already</span></div><div class="line">               <span class="comment">// dispatched to it.  Cancel touch targets if necessary.</span></div><div class="line">               TouchTarget predecessor = <span class="keyword">null</span>;</div><div class="line">               TouchTarget target = mFirstTouchTarget;</div><div class="line">               <span class="keyword">while</span> (target != <span class="keyword">null</span>) &#123;</div><div class="line">                   <span class="keyword">final</span> TouchTarget next = target.next;</div><div class="line">                   <span class="keyword">if</span> (alreadyDispatchedToNewTouchTarget &amp;&amp; target == newTouchTarget) &#123;</div><div class="line">                       handled = <span class="keyword">true</span>;</div><div class="line">                   &#125; <span class="keyword">else</span> &#123;</div><div class="line">                       <span class="keyword">final</span> <span class="keyword">boolean</span> cancelChild = resetCancelNextUpFlag(target.child)</div><div class="line">                               || intercepted;</div><div class="line">                       <span class="keyword">if</span> (dispatchTransformedTouchEvent(ev, cancelChild,</div><div class="line">                               target.child, target.pointerIdBits)) &#123;</div><div class="line">                           handled = <span class="keyword">true</span>;</div><div class="line">                       &#125;</div><div class="line">                       <span class="keyword">if</span> (cancelChild) &#123;</div><div class="line">                           <span class="keyword">if</span> (predecessor == <span class="keyword">null</span>) &#123;</div><div class="line">                               mFirstTouchTarget = next;</div><div class="line">                           &#125; <span class="keyword">else</span> &#123;</div><div class="line">                               predecessor.next = next;</div><div class="line">                           &#125;</div><div class="line">                           target.recycle();</div><div class="line">                           target = next;</div><div class="line">                           <span class="keyword">continue</span>;</div><div class="line">                       &#125;</div><div class="line">                   &#125;</div><div class="line">                   predecessor = target;</div><div class="line">                   target = next;</div><div class="line">               &#125;</div><div class="line">           &#125;</div><div class="line"></div><div class="line">           <span class="comment">// Update list of touch targets for pointer up or cancel, if needed.</span></div><div class="line">           <span class="keyword">if</span> (canceled</div><div class="line">                   || actionMasked == MotionEvent.ACTION_UP</div><div class="line">                   || actionMasked == MotionEvent.ACTION_HOVER_MOVE) &#123;</div><div class="line">               resetTouchState();</div><div class="line">           &#125; <span class="keyword">else</span> <span class="keyword">if</span> (split &amp;&amp; actionMasked == MotionEvent.ACTION_POINTER_UP) &#123;</div><div class="line">               <span class="keyword">final</span> <span class="keyword">int</span> actionIndex = ev.getActionIndex();</div><div class="line">               <span class="keyword">final</span> <span class="keyword">int</span> idBitsToRemove = <span class="number">1</span> &lt;&lt; ev.getPointerId(actionIndex);</div><div class="line">               removePointersFromTouchTargets(idBitsToRemove);</div><div class="line">           &#125;</div><div class="line">       &#125;</div><div class="line"></div><div class="line">       <span class="keyword">if</span> (!handled &amp;&amp; mInputEventConsistencyVerifier != <span class="keyword">null</span>) &#123;</div><div class="line">           mInputEventConsistencyVerifier.onUnhandledEvent(ev, <span class="number">1</span>);</div><div class="line">       &#125;</div><div class="line">       <span class="keyword">return</span> handled;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>以上对ViewGroup的dispatchTouchEvent方法进行了分析，总结如下：</p>
<p>1、每次当触摸事件为ACTION_DOWN的时候就会清除之前的状态，开始一次新的事件分发<br>2、如果当前ViewGroup拦截了ACTION_DOWN,那么剩下的ACTION_UP,ACTION_MOVE事件都是交给它处理<br>3、在自定义继承自ViewGroup的View的时候，通过重写onInterceptTouchEvent对事件进行拦截，事件拦截仅仅是针对于ViewGroup，对于View来说不存在事件拦截的说法<br>4、ViewGroup当中有一个requestDisallowInterceptTouchEvent(boolean disallowIntercept)方法，可以用来设置是否拦截，一般用在子View当中，通过调用父View的这个方法来阻止父View进行事件拦截<br>5、有三种情况，触摸事件会交给当前的ViewGroup进行处理，此时就把ViewGroup当成普通的View,走的是View事件分发逻辑，调用的是View的dispatchTouchEvent方法：</p>
<ul>
<li>一种是当前ViewGroup拦截了事件</li>
<li>一种是没有子View，</li>
<li>还有一种是子View的dispatchTouchEvent方法返回了false</li>
</ul>
<p>6、事件分发只是针对ACTION_DOWN进行了分发,当某个子View返回true时，会中止Down事件的分发，同时在ViewGroup中记录该子View。接下去的Move和Up事件将由该子View直接进行处理！这个就有点类似于：一旦一个活交给你干了，你就得干到底的意思！</p>
<h2 id="View事件分发机制之dispatchTouchEvent方法"><a href="#View事件分发机制之dispatchTouchEvent方法" class="headerlink" title="View事件分发机制之dispatchTouchEvent方法"></a>View事件分发机制之dispatchTouchEvent方法</h2><p>以上讲的是ViewGroup的事件分发机制，对于View来说，触摸事件都是由父ViewGroup分发而来，调用的是View的dispatchTouchEvent方法，如下所示：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">dispatchTouchEvent</span><span class="params">(MotionEvent event)</span> </span>&#123;</div><div class="line">       <span class="comment">// If the event should be handled by accessibility focus first.</span></div><div class="line">       <span class="keyword">if</span> (event.isTargetAccessibilityFocus()) &#123;</div><div class="line">           <span class="comment">// We don't have focus or no virtual descendant has it, do not handle the event.</span></div><div class="line">           <span class="keyword">if</span> (!isAccessibilityFocusedViewOrHost()) &#123;</div><div class="line">               <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">           &#125;</div><div class="line">           <span class="comment">// We have focus and got the event, then use normal event dispatch.</span></div><div class="line">           event.setTargetAccessibilityFocus(<span class="keyword">false</span>);</div><div class="line">       &#125;</div><div class="line"></div><div class="line">       <span class="keyword">boolean</span> result = <span class="keyword">false</span>;</div><div class="line"></div><div class="line">       <span class="keyword">if</span> (mInputEventConsistencyVerifier != <span class="keyword">null</span>) &#123;</div><div class="line">           mInputEventConsistencyVerifier.onTouchEvent(event, <span class="number">0</span>);</div><div class="line">       &#125;</div><div class="line"></div><div class="line">       <span class="keyword">final</span> <span class="keyword">int</span> actionMasked = event.getActionMasked();</div><div class="line">       <span class="keyword">if</span> (actionMasked == MotionEvent.ACTION_DOWN) &#123;</div><div class="line">           <span class="comment">// Defensive cleanup for new gesture</span></div><div class="line">           stopNestedScroll();</div><div class="line">       &#125;</div><div class="line"></div><div class="line">       <span class="keyword">if</span> (onFilterTouchEventForSecurity(event)) &#123;</div><div class="line">           <span class="keyword">if</span> ((mViewFlags &amp; ENABLED_MASK) == ENABLED &amp;&amp; handleScrollBarDragging(event)) &#123;</div><div class="line">               result = <span class="keyword">true</span>;</div><div class="line">           &#125;</div><div class="line">           <span class="comment">//noinspection SimplifiableIfStatement</span></div><div class="line">           ListenerInfo li = mListenerInfo;</div><div class="line">           <span class="comment">// 如果满足：mOnTouchListener!=null、View是ENABLED的、mOnTouchListener的onTouch方法返回true,那么result为true</span></div><div class="line">           <span class="keyword">if</span> (li != <span class="keyword">null</span> &amp;&amp; li.mOnTouchListener != <span class="keyword">null</span></div><div class="line">                   &amp;&amp; (mViewFlags &amp; ENABLED_MASK) == ENABLED</div><div class="line">                   &amp;&amp; li.mOnTouchListener.onTouch(<span class="keyword">this</span>, event)) &#123;</div><div class="line">               result = <span class="keyword">true</span>;</div><div class="line">           &#125;</div><div class="line">          <span class="comment">//如果上面的result为true，那么就不会调用下面的onTouchEvent方法</span></div><div class="line">           <span class="keyword">if</span> (!result &amp;&amp; onTouchEvent(event)) &#123;</div><div class="line">               result = <span class="keyword">true</span>;</div><div class="line">           &#125;</div><div class="line">       &#125;</div><div class="line"></div><div class="line">       <span class="keyword">if</span> (!result &amp;&amp; mInputEventConsistencyVerifier != <span class="keyword">null</span>) &#123;</div><div class="line">           mInputEventConsistencyVerifier.onUnhandledEvent(event, <span class="number">0</span>);</div><div class="line">       &#125;</div><div class="line"></div><div class="line">       <span class="comment">// Clean up after nested scrolls if this is the end of a gesture;</span></div><div class="line">       <span class="comment">// also cancel it if we tried an ACTION_DOWN but we didn't want the rest</span></div><div class="line">       <span class="comment">// of the gesture.</span></div><div class="line">       <span class="keyword">if</span> (actionMasked == MotionEvent.ACTION_UP ||</div><div class="line">               actionMasked == MotionEvent.ACTION_CANCEL ||</div><div class="line">               (actionMasked == MotionEvent.ACTION_DOWN &amp;&amp; !result)) &#123;</div><div class="line">           stopNestedScroll();</div><div class="line">       &#125;</div><div class="line"></div><div class="line">       <span class="keyword">return</span> result;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>可以看出：</p>
<ul>
<li>如果View是使能的、设置了TouchListener接口、接口中的onTouch方法返回true的话，这三个条件同时满足的话就不会调用下面的onTouchEvent方法！</li>
<li>比如对于一个Button, 如果它是使能的，且给它设置一个TouchListener，在onTouch方法里面返回true，那么就无法响应点击事件（这个大家可以验证一下），</li>
<li>按钮的点击事件以及长按事件是在onTouchEvent方法里面响应的</li>
<li>当View不使能的时候，是可以继续调用onTouchEvent方法的</li>
<li>如果onTouchEvent返回true,那么整个dispatchTouchEvent也就返回true，代表当前View消耗了事件。</li>
</ul>
<h2 id="View事件分发机制之onTouchEvent方法"><a href="#View事件分发机制之onTouchEvent方法" class="headerlink" title="View事件分发机制之onTouchEvent方法"></a>View事件分发机制之onTouchEvent方法</h2><p>来看下onTouchEvent方法，如下所示：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouchEvent</span><span class="params">(MotionEvent event)</span> </span>&#123;</div><div class="line">       <span class="keyword">final</span> <span class="keyword">float</span> x = event.getX();</div><div class="line">       <span class="keyword">final</span> <span class="keyword">float</span> y = event.getY();</div><div class="line">       <span class="keyword">final</span> <span class="keyword">int</span> viewFlags = mViewFlags;</div><div class="line">       <span class="keyword">final</span> <span class="keyword">int</span> action = event.getAction();</div><div class="line">       <span class="comment">// view不使能</span></div><div class="line">       <span class="keyword">if</span> ((viewFlags &amp; ENABLED_MASK) == DISABLED) &#123;</div><div class="line">         <span class="comment">//ACTION_UP事件，设置按下状态为false</span></div><div class="line">           <span class="keyword">if</span> (action == MotionEvent.ACTION_UP &amp;&amp; (mPrivateFlags &amp; PFLAG_PRESSED) != <span class="number">0</span>) &#123;</div><div class="line">               setPressed(<span class="keyword">false</span>);</div><div class="line">           &#125;</div><div class="line">           <span class="comment">//一个不使能的view,如果是可点击的依然会消耗这个事件，比如button,即使是不使能的，也会返回true消耗事件，只是不对事件作出响应而已。</span></div><div class="line">           <span class="comment">//因为button默认是可点击的，除非手动设置为不可点击</span></div><div class="line">           <span class="comment">// A disabled view that is clickable still consumes the touch</span></div><div class="line">           <span class="comment">// events, it just doesn't respond to them.</span></div><div class="line">           <span class="keyword">return</span> (((viewFlags &amp; CLICKABLE) == CLICKABLE</div><div class="line">                   || (viewFlags &amp; LONG_CLICKABLE) == LONG_CLICKABLE)</div><div class="line">                   || (viewFlags &amp; CONTEXT_CLICKABLE) == CONTEXT_CLICKABLE);</div><div class="line">       &#125;</div><div class="line">       <span class="comment">// 如果设置了触摸代理，调用触摸代理的onTouchEvent方法，如果返回true,就消耗事件。</span></div><div class="line">       <span class="comment">// 这个触摸代理常常用在扩大View的点击区域，比如一个图标太小，就可以扩大其点击区域</span></div><div class="line">       <span class="keyword">if</span> (mTouchDelegate != <span class="keyword">null</span>) &#123;</div><div class="line">           <span class="keyword">if</span> (mTouchDelegate.onTouchEvent(event)) &#123;</div><div class="line">               <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">           &#125;</div><div class="line">       &#125;</div><div class="line">       <span class="comment">// 如果是可点击的</span></div><div class="line">       <span class="keyword">if</span> (((viewFlags &amp; CLICKABLE) == CLICKABLE ||</div><div class="line">               (viewFlags &amp; LONG_CLICKABLE) == LONG_CLICKABLE) ||</div><div class="line">               (viewFlags &amp; CONTEXT_CLICKABLE) == CONTEXT_CLICKABLE) &#123;</div><div class="line">           <span class="keyword">switch</span> (action) &#123;</div><div class="line">               <span class="keyword">case</span> MotionEvent.ACTION_UP:</div><div class="line">                   <span class="keyword">boolean</span> prepressed = (mPrivateFlags &amp; PFLAG_PREPRESSED) != <span class="number">0</span>;</div><div class="line">                   <span class="keyword">if</span> ((mPrivateFlags &amp; PFLAG_PRESSED) != <span class="number">0</span> || prepressed) &#123;</div><div class="line">                      <span class="comment">// 如果View还没有获得焦点的话就主动获得焦点</span></div><div class="line">                       <span class="comment">// take focus if we don't have it already and we should in</span></div><div class="line">                       <span class="comment">// touch mode.</span></div><div class="line">                       <span class="keyword">boolean</span> focusTaken = <span class="keyword">false</span>;</div><div class="line">                       <span class="keyword">if</span> (isFocusable() &amp;&amp; isFocusableInTouchMode() &amp;&amp; !isFocused()) &#123;</div><div class="line">                           focusTaken = requestFocus();</div><div class="line">                       &#125;</div><div class="line"></div><div class="line">                       <span class="keyword">if</span> (prepressed) &#123;</div><div class="line">                           <span class="comment">// The button is being released before we actually</span></div><div class="line">                           <span class="comment">// showed it as pressed.  Make it show the pressed</span></div><div class="line">                           <span class="comment">// state now (before scheduling the click) to ensure</span></div><div class="line">                           <span class="comment">// the user sees it.</span></div><div class="line">                           setPressed(<span class="keyword">true</span>, x, y);</div><div class="line">                      &#125;</div><div class="line">                      <span class="comment">// 如果长按的动作没有发生且没有忽略下一个ACTION_UP事件</span></div><div class="line">                       <span class="keyword">if</span> (!mHasPerformedLongPress &amp;&amp; !mIgnoreNextUpEvent) &#123;</div><div class="line">                           <span class="comment">// 移除长按检测</span></div><div class="line">                           <span class="comment">// This is a tap, so remove the longpress check</span></div><div class="line">                           removeLongPressCallback();</div><div class="line"></div><div class="line">                           <span class="comment">// Only perform take click actions if we were in the pressed state</span></div><div class="line">                           <span class="keyword">if</span> (!focusTaken) &#123;</div><div class="line">                               <span class="comment">// Use a Runnable and post this rather than calling</span></div><div class="line">                               <span class="comment">// performClick directly. This lets other visual state</span></div><div class="line">                               <span class="comment">// of the view update before click actions start.</span></div><div class="line">                               <span class="comment">//这个PerformClick是一个Runnable对象</span></div><div class="line">                               <span class="keyword">if</span> (mPerformClick == <span class="keyword">null</span>) &#123;</div><div class="line">                                   mPerformClick = <span class="keyword">new</span> PerformClick();</div><div class="line">                               &#125;</div><div class="line">                               <span class="comment">//把mPerformClick给post到消息队列</span></div><div class="line">                               <span class="keyword">if</span> (!post(mPerformClick)) &#123;</div><div class="line">                                <span class="comment">// 如果上述Runnable执行失败，就直接调用performClick方法，在这个方法里面调用</span></div><div class="line">                                <span class="comment">// OnClickListener回调接口</span></div><div class="line">                                   performClick();</div><div class="line">                               &#125;</div><div class="line">                           &#125;</div><div class="line">                       &#125;</div><div class="line"></div><div class="line">                       <span class="keyword">if</span> (mUnsetPressedState == <span class="keyword">null</span>) &#123;</div><div class="line">                           mUnsetPressedState = <span class="keyword">new</span> UnsetPressedState();</div><div class="line">                       &#125;</div><div class="line"></div><div class="line">                       <span class="keyword">if</span> (prepressed) &#123;</div><div class="line">                           postDelayed(mUnsetPressedState,</div><div class="line">                                   ViewConfiguration.getPressedStateDuration());</div><div class="line">                       &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!post(mUnsetPressedState)) &#123;</div><div class="line">                           <span class="comment">// If the post failed, unpress right now</span></div><div class="line">                           mUnsetPressedState.run();</div><div class="line">                       &#125;</div><div class="line"></div><div class="line">                       removeTapCallback();</div><div class="line">                   &#125;</div><div class="line">                   mIgnoreNextUpEvent = <span class="keyword">false</span>;</div><div class="line">                   <span class="keyword">break</span>;</div><div class="line"></div><div class="line">               <span class="keyword">case</span> MotionEvent.ACTION_DOWN:</div><div class="line">                   mHasPerformedLongPress = <span class="keyword">false</span>;</div><div class="line"></div><div class="line">                   <span class="keyword">if</span> (performButtonActionOnTouchDown(event)) &#123;</div><div class="line">                       <span class="keyword">break</span>;</div><div class="line">                   &#125;</div><div class="line"></div><div class="line">                   <span class="comment">// Walk up the hierarchy to determine if we're inside a scrolling container.</span></div><div class="line">                   <span class="keyword">boolean</span> isInScrollingContainer = isInScrollingContainer();</div><div class="line"></div><div class="line">                   <span class="comment">// For views inside a scrolling container, delay the pressed feedback for</span></div><div class="line">                   <span class="comment">// a short period in case this is a scroll.</span></div><div class="line">                   <span class="keyword">if</span> (isInScrollingContainer) &#123;</div><div class="line">                       mPrivateFlags |= PFLAG_PREPRESSED;</div><div class="line">                       <span class="keyword">if</span> (mPendingCheckForTap == <span class="keyword">null</span>) &#123;</div><div class="line">                           mPendingCheckForTap = <span class="keyword">new</span> CheckForTap();</div><div class="line">                       &#125;</div><div class="line">                       mPendingCheckForTap.x = event.getX();</div><div class="line">                       mPendingCheckForTap.y = event.getY();</div><div class="line">                       postDelayed(mPendingCheckForTap, ViewConfiguration.getTapTimeout());</div><div class="line">                   &#125; <span class="keyword">else</span> &#123;</div><div class="line">                       <span class="comment">// Not inside a scrolling container, so show the feedback right away</span></div><div class="line">                       <span class="comment">// 设置为按下状态</span></div><div class="line">                       setPressed(<span class="keyword">true</span>, x, y);</div><div class="line">                       <span class="comment">// 检测长按，如果长按下成功，会把mHasPerformedLongPress置为true，这样点击事件就得不到响应</span></div><div class="line">                       <span class="comment">// 也就是说长按事件会屏蔽点击事件</span></div><div class="line">                       checkForLongClick(<span class="number">0</span>, x, y);</div><div class="line">                   &#125;</div><div class="line">                   <span class="keyword">break</span>;</div><div class="line"></div><div class="line">               <span class="keyword">case</span> MotionEvent.ACTION_CANCEL:</div><div class="line">                   <span class="comment">//复位</span></div><div class="line">                   setPressed(<span class="keyword">false</span>);</div><div class="line">                   removeTapCallback();</div><div class="line">                   removeLongPressCallback();</div><div class="line">                   mInContextButtonPress = <span class="keyword">false</span>;</div><div class="line">                   mHasPerformedLongPress = <span class="keyword">false</span>;</div><div class="line">                   mIgnoreNextUpEvent = <span class="keyword">false</span>;</div><div class="line">                   <span class="keyword">break</span>;</div><div class="line"></div><div class="line">               <span class="keyword">case</span> MotionEvent.ACTION_MOVE:</div><div class="line">                   drawableHotspotChanged(x, y);</div><div class="line"></div><div class="line">                   <span class="comment">// Be lenient about moving outside of buttons</span></div><div class="line">                   <span class="keyword">if</span> (!pointInView(x, y, mTouchSlop)) &#123;</div><div class="line">                       <span class="comment">// Outside button</span></div><div class="line">                       removeTapCallback();</div><div class="line">                       <span class="keyword">if</span> ((mPrivateFlags &amp; PFLAG_PRESSED) != <span class="number">0</span>) &#123;</div><div class="line">                           <span class="comment">// Remove any future long press/tap checks</span></div><div class="line">                           removeLongPressCallback();</div><div class="line"></div><div class="line">                           setPressed(<span class="keyword">false</span>);</div><div class="line">                       &#125;</div><div class="line">                   &#125;</div><div class="line">                   <span class="keyword">break</span>;</div><div class="line">           &#125;</div><div class="line"></div><div class="line">           <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">       &#125;</div><div class="line"></div><div class="line">       <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>从以上代码可以看出：</p>
<ul>
<li>一个不使能的view,如果是可点击的依然会消耗这个事件，比如button,即使是不使能的，也会返回true消耗事件，只是不对事件作出响应而已。<br>因为button默认是可点击的，除非手动设置为不可点击</li>
<li>这要这个View是可点击的，不管是否使能，都会消耗事件</li>
<li>如果长按检测成功，会把mHasPerformedLongPress置为true，这样点击事件就得不到响应，也就是说长按事件会屏蔽点击事件</li>
<li>还有一点，像ImageView这种控件默认是不可点击的，但是如果给它设置OnClickListener或者onLongClickListener的话，就会主动把其设置为可点击</li>
</ul>
<p>以上从源码的角度对触摸事件的来源、ViewGroup事件分发机制、View事件分发机制进行了解读。<br>在自定义View的时候，当需要对触摸事件进行处理的时候，一般是重写onTouchEvent方法，拥有子类的View一般还需要重写onInterceptTouchEvent方法进行事件拦截，要想让这两个方法很好的配合使用，就需要熟悉并且理解触摸事件分发机制，再配合之前的View绘制流程，就能自定义出各式各样的View啦！</p>
<p>感谢大家的阅读！有啥问题，欢迎指出，谢谢！</p>
]]></content>
      
        <categories>
            
            <category> Android源码解析 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android应用层View绘制流程之measure,layout,draw三步曲]]></title>
      <url>http://easyliu.com/2017/04/22/android/ViewInvalidteProcessTwo/</url>
      <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>上一篇博文对DecorView和ViewRootImpl的关系进行了剖析，这篇文章主要是来剖析View绘制的三个基本流程:measure,layout,draw，只有把这三个基本流程搞清楚了，平时在自定义View的时候才会有清晰的思路！开始进入正题。</p>
<h1 id="View的measure过程"><a href="#View的measure过程" class="headerlink" title="View的measure过程"></a>View的measure过程</h1><p>三个流程均是从ViewRootImpl的performTraversals方法开始的，如下所示：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">performTraversals</span><span class="params">()</span> </span>&#123;</div><div class="line">        ......</div><div class="line">        <span class="keyword">int</span> childWidthMeasureSpec = getRootMeasureSpec(mWidth, lp.width);</div><div class="line">        <span class="keyword">int</span> childHeightMeasureSpec = getRootMeasureSpec(mHeight, lp.height);</div><div class="line">        ......</div><div class="line">        mView.measure(childWidthMeasureSpec, childHeightMeasureSpec);</div><div class="line">        ......</div><div class="line">        mView.layout(<span class="number">0</span>, <span class="number">0</span>, mView.getMeasuredWidth(), mView.getMeasuredHeight());</div><div class="line">        ......</div><div class="line">        mView.draw(canvas);</div><div class="line">        ......</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>首先看下getRootMeasureSpec方法,如下所示：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">    * Figures out the measure spec for the root view in a window based on it's</div><div class="line">    * layout params.</div><div class="line">    *</div><div class="line">    * <span class="doctag">@param</span> windowSize</div><div class="line">    *            The available width or height of the window</div><div class="line">    *</div><div class="line">    * <span class="doctag">@param</span> rootDimension</div><div class="line">    *            The layout params for one dimension (width or height) of the</div><div class="line">    *            window.</div><div class="line">    *</div><div class="line">    * <span class="doctag">@return</span> The measure spec to use to measure the root view.</div><div class="line">    */</div><div class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getRootMeasureSpec</span><span class="params">(<span class="keyword">int</span> windowSize, <span class="keyword">int</span> rootDimension)</span> </span>&#123;</div><div class="line">       <span class="keyword">int</span> measureSpec;</div><div class="line">       <span class="keyword">switch</span> (rootDimension) &#123;</div><div class="line"></div><div class="line">       <span class="keyword">case</span> ViewGroup.LayoutParams.MATCH_PARENT:</div><div class="line">           <span class="comment">// Window can't resize. Force root view to be windowSize.</span></div><div class="line">           measureSpec = MeasureSpec.makeMeasureSpec(windowSize, MeasureSpec.EXACTLY);</div><div class="line">           <span class="keyword">break</span>;</div><div class="line">       <span class="keyword">case</span> ViewGroup.LayoutParams.WRAP_CONTENT:</div><div class="line">           <span class="comment">// Window can resize. Set max size for root view.</span></div><div class="line">           measureSpec = MeasureSpec.makeMeasureSpec(windowSize, MeasureSpec.AT_MOST);</div><div class="line">           <span class="keyword">break</span>;</div><div class="line">       <span class="keyword">default</span>:</div><div class="line">           <span class="comment">// Window wants to be an exact size. Force root view to be that size.</span></div><div class="line">           measureSpec = MeasureSpec.makeMeasureSpec(rootDimension, MeasureSpec.EXACTLY);</div><div class="line">           <span class="keyword">break</span>;</div><div class="line">       &#125;</div><div class="line">       <span class="keyword">return</span> measureSpec;</div><div class="line">   &#125;</div></pre></td></tr></table></figure></p>
<p>从上面的注释可以看出这个getRootMeasureSpec是为了根据根视图的LayoutParams计算根视图的MeasureSpec，这个根视图就是上篇博客讲的DecorView。</p>
<h1 id="关于MeasureSpec"><a href="#关于MeasureSpec" class="headerlink" title="关于MeasureSpec"></a>关于MeasureSpec</h1><p>关于MeasureSpec来做一个简单的说明：通过MeasureSpec.makeMeasureSpec来得到一个32位的整数，高两位代码测量模式mode,低30位代表测量大小size，如下所示：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">makeMeasureSpec</span><span class="params">(@IntRange(from = <span class="number">0</span>, to = (<span class="number">1</span> &lt;&lt; MeasureSpec.MODE_SHIFT)</span> - 1) <span class="keyword">int</span> size,</span></div><div class="line">                                       @MeasureSpecMode <span class="keyword">int</span> mode) &#123;</div><div class="line">         <span class="keyword">if</span> (sUseBrokenMakeMeasureSpec) &#123;</div><div class="line">             <span class="keyword">return</span> size + mode;</div><div class="line">         &#125; <span class="keyword">else</span> &#123;</div><div class="line">             <span class="keyword">return</span> (size &amp; ~MODE_MASK) | (mode &amp; MODE_MASK);</div><div class="line">         &#125;</div><div class="line">     &#125;</div></pre></td></tr></table></figure></p>
<p>然后再通过getMode和getSize这两个方法来得到对应的测试模式mode和测量尺寸size，如下所示：<br> <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">      * Extracts the mode from the supplied measure specification.</div><div class="line">      *</div><div class="line">      * <span class="doctag">@param</span> measureSpec the measure specification to extract the mode from</div><div class="line">      * <span class="doctag">@return</span> &#123;<span class="doctag">@link</span> android.view.View.MeasureSpec#UNSPECIFIED&#125;,</div><div class="line">      *         &#123;<span class="doctag">@link</span> android.view.View.MeasureSpec#AT_MOST&#125; or</div><div class="line">      *         &#123;<span class="doctag">@link</span> android.view.View.MeasureSpec#EXACTLY&#125;</div><div class="line">      */</div><div class="line">     <span class="meta">@MeasureSpecMode</span></div><div class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getMode</span><span class="params">(<span class="keyword">int</span> measureSpec)</span> </span>&#123;</div><div class="line">         <span class="comment">//noinspection ResourceType</span></div><div class="line">         <span class="keyword">return</span> (measureSpec &amp; MODE_MASK);</div><div class="line">     &#125;</div><div class="line"></div><div class="line">     <span class="comment">/**</span></div><div class="line">      * Extracts the size from the supplied measure specification.</div><div class="line">      *</div><div class="line">      * <span class="doctag">@param</span> measureSpec the measure specification to extract the size from</div><div class="line">      * <span class="doctag">@return</span> the size in pixels defined in the supplied measure specification</div><div class="line">      */</div><div class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getSize</span><span class="params">(<span class="keyword">int</span> measureSpec)</span> </span>&#123;</div><div class="line">         <span class="keyword">return</span> (measureSpec &amp; ~MODE_MASK);</div><div class="line">     &#125;</div></pre></td></tr></table></figure></p>
<h1 id="View的measure和onMeasure方法"><a href="#View的measure和onMeasure方法" class="headerlink" title="View的measure和onMeasure方法"></a>View的measure和onMeasure方法</h1><p>通过getRootMeasureSpec来得到DecorView的widthMeasureSpec和heightMeasureSpec之后，就需要来设置DecorView的大小了，也就是调用：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mView.measure(childWidthMeasureSpec, childHeightMeasureSpec);</div></pre></td></tr></table></figure></p>
<p>发现这个measure是View的方法，如下所示：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">   * &lt;p&gt;</div><div class="line">   * This is called to find out how big a view should be. The parent</div><div class="line">   * supplies constraint information in the width and height parameters.</div><div class="line">   * &lt;/p&gt;</div><div class="line">   *</div><div class="line">   * &lt;p&gt;</div><div class="line">   * The actual measurement work of a view is performed in</div><div class="line">   * &#123;<span class="doctag">@link</span> #onMeasure(int, int)&#125;, called by this method. Therefore, only</div><div class="line">   * &#123;<span class="doctag">@link</span> #onMeasure(int, int)&#125; can and must be overridden by subclasses.</div><div class="line">   * &lt;/p&gt;</div><div class="line">   *</div><div class="line">   *</div><div class="line">   * <span class="doctag">@param</span> widthMeasureSpec Horizontal space requirements as imposed by the</div><div class="line">   *        parent</div><div class="line">   * <span class="doctag">@param</span> heightMeasureSpec Vertical space requirements as imposed by the</div><div class="line">   *        parent</div><div class="line">   *</div><div class="line">   * <span class="doctag">@see</span> #onMeasure(int, int)</div><div class="line">   */</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">measure</span><span class="params">(<span class="keyword">int</span> widthMeasureSpec, <span class="keyword">int</span> heightMeasureSpec)</span> </span>&#123;</div><div class="line">    ...........</div><div class="line">              onMeasure(widthMeasureSpec, heightMeasureSpec);</div><div class="line">    ...........</div><div class="line">  &#125;</div></pre></td></tr></table></figure></p>
<p>通过注释可以看出，这个方法是用来计算当前View应该为多大，也就是实际的宽高。widthMeasureSpec和heightMeasureSpec是由父View传入的约束信息，代表了父View给当前View的测量规格，当前View的宽高是由父View和自身一起决定的。measure方法是final的，不可重载，实际的测量过程是在onMeasure方法里面完成了，因此子类必须且只能重载onMeasure方法来实现自身的测量逻辑。</p>
<p>接下来看onMeasure方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">    * &lt;p&gt;</div><div class="line">    * Measure the view and its content to determine the measured width and the</div><div class="line">    * measured height. This method is invoked by &#123;<span class="doctag">@link</span> #measure(int, int)&#125; and</div><div class="line">    * should be overridden by subclasses to provide accurate and efficient</div><div class="line">    * measurement of their contents.</div><div class="line">    * &lt;/p&gt;</div><div class="line">    *</div><div class="line">    * &lt;p&gt;</div><div class="line">    * &lt;strong&gt;CONTRACT:&lt;/strong&gt; When overriding this method, you</div><div class="line">    * &lt;em&gt;must&lt;/em&gt; call &#123;<span class="doctag">@link</span> #setMeasuredDimension(int, int)&#125; to store the</div><div class="line">    * measured width and height of this view. Failure to do so will trigger an</div><div class="line">    * &lt;code&gt;IllegalStateException&lt;/code&gt;, thrown by</div><div class="line">    * &#123;<span class="doctag">@link</span> #measure(int, int)&#125;. Calling the superclass'</div><div class="line">    * &#123;<span class="doctag">@link</span> #onMeasure(int, int)&#125; is a valid use.</div><div class="line">    * &lt;/p&gt;</div><div class="line">    *</div><div class="line">    * &lt;p&gt;</div><div class="line">    * The base class implementation of measure defaults to the background size,</div><div class="line">    * unless a larger size is allowed by the MeasureSpec. Subclasses should</div><div class="line">    * override &#123;<span class="doctag">@link</span> #onMeasure(int, int)&#125; to provide better measurements of</div><div class="line">    * their content.</div><div class="line">    * &lt;/p&gt;</div><div class="line">    *</div><div class="line">    * &lt;p&gt;</div><div class="line">    * If this method is overridden, it is the subclass's responsibility to make</div><div class="line">    * sure the measured height and width are at least the view's minimum height</div><div class="line">    * and width (&#123;<span class="doctag">@link</span> #getSuggestedMinimumHeight()&#125; and</div><div class="line">    * &#123;<span class="doctag">@link</span> #getSuggestedMinimumWidth()&#125;).</div><div class="line">    * &lt;/p&gt;</div><div class="line">    *</div><div class="line">    * <span class="doctag">@param</span> widthMeasureSpec horizontal space requirements as imposed by the parent.</div><div class="line">    *                         The requirements are encoded with</div><div class="line">    *                         &#123;<span class="doctag">@link</span> android.view.View.MeasureSpec&#125;.</div><div class="line">    * <span class="doctag">@param</span> heightMeasureSpec vertical space requirements as imposed by the parent.</div><div class="line">    *                         The requirements are encoded with</div><div class="line">    *                         &#123;<span class="doctag">@link</span> android.view.View.MeasureSpec&#125;.</div><div class="line">    *</div><div class="line">    * <span class="doctag">@see</span> #getMeasuredWidth()</div><div class="line">    * <span class="doctag">@see</span> #getMeasuredHeight()</div><div class="line">    * <span class="doctag">@see</span> #setMeasuredDimension(int, int)</div><div class="line">    * <span class="doctag">@see</span> #getSuggestedMinimumHeight()</div><div class="line">    * <span class="doctag">@see</span> #getSuggestedMinimumWidth()</div><div class="line">    * <span class="doctag">@see</span> android.view.View.MeasureSpec#getMode(int)</div><div class="line">    * <span class="doctag">@see</span> android.view.View.MeasureSpec#getSize(int)</div><div class="line">    */</div><div class="line">   <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onMeasure</span><span class="params">(<span class="keyword">int</span> widthMeasureSpec, <span class="keyword">int</span> heightMeasureSpec)</span> </span>&#123;</div><div class="line">       setMeasuredDimension(getDefaultSize(getSuggestedMinimumWidth(), widthMeasureSpec),</div><div class="line">               getDefaultSize(getSuggestedMinimumHeight(), heightMeasureSpec));</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>注释已经写的非常明白了，子类必须复写onMeasure方法，且最终通过调用setMeasuredDimension方法来存储当前View测量得到的宽和高。这个宽和高是通过getDefaultSize方法得来的，如下所示：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">    * Utility to return a default size. Uses the supplied size if the</div><div class="line">    * MeasureSpec imposed no constraints. Will get larger if allowed</div><div class="line">    * by the MeasureSpec.</div><div class="line">    *</div><div class="line">    * <span class="doctag">@param</span> size Default size for this view</div><div class="line">    * <span class="doctag">@param</span> measureSpec Constraints imposed by the parent</div><div class="line">    * <span class="doctag">@return</span> The size this view should be.</div><div class="line">    */</div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getDefaultSize</span><span class="params">(<span class="keyword">int</span> size, <span class="keyword">int</span> measureSpec)</span> </span>&#123;</div><div class="line">       <span class="keyword">int</span> result = size;</div><div class="line">       <span class="keyword">int</span> specMode = MeasureSpec.getMode(measureSpec);</div><div class="line">       <span class="keyword">int</span> specSize = MeasureSpec.getSize(measureSpec);</div><div class="line"></div><div class="line">       <span class="keyword">switch</span> (specMode) &#123;</div><div class="line">       <span class="keyword">case</span> MeasureSpec.UNSPECIFIED:</div><div class="line">           result = size;</div><div class="line">           <span class="keyword">break</span>;</div><div class="line">       <span class="keyword">case</span> MeasureSpec.AT_MOST:</div><div class="line">       <span class="keyword">case</span> MeasureSpec.EXACTLY:</div><div class="line">           result = specSize;</div><div class="line">           <span class="keyword">break</span>;</div><div class="line">       &#125;</div><div class="line">       <span class="keyword">return</span> result;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>可以看出，如果specMode等于AT_MOST或者EXACTLY就返回specSize，也就是父类指定的specSize，否则返回通过getSuggestedMinimumWidth和getSuggestedMinimumHeight得到的size，从名字可以看出是建议的最小宽度和高度，代码如下所示：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">int</span> <span class="title">getSuggestedMinimumHeight</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> (mBackground == <span class="keyword">null</span>) ? mMinHeight : max(mMinHeight, mBackground.getMinimumHeight());</div><div class="line"></div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">int</span> <span class="title">getSuggestedMinimumWidth</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> (mBackground == <span class="keyword">null</span>) ? mMinWidth : max(mMinWidth, mBackground.getMinimumWidth());</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以看出，建议的最小宽度和高度是由view的background以及其mMinWidth、mMinHeight共同决定的。</p>
<p>setMeasuredDimension方法如下所示：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">setMeasuredDimension</span><span class="params">(<span class="keyword">int</span> measuredWidth, <span class="keyword">int</span> measuredHeight)</span> </span>&#123;</div><div class="line">    <span class="keyword">boolean</span> optical = isLayoutModeOptical(<span class="keyword">this</span>);</div><div class="line">    <span class="keyword">if</span> (optical != isLayoutModeOptical(mParent)) &#123;</div><div class="line">        Insets insets = getOpticalInsets();</div><div class="line">        <span class="keyword">int</span> opticalWidth  = insets.left + insets.right;</div><div class="line">        <span class="keyword">int</span> opticalHeight = insets.top  + insets.bottom;</div><div class="line"></div><div class="line">        measuredWidth  += optical ? opticalWidth  : -opticalWidth;</div><div class="line">        measuredHeight += optical ? opticalHeight : -opticalHeight;</div><div class="line">    &#125;</div><div class="line">    setMeasuredDimensionRaw(measuredWidth, measuredHeight);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setMeasuredDimensionRaw</span><span class="params">(<span class="keyword">int</span> measuredWidth, <span class="keyword">int</span> measuredHeight)</span> </span>&#123;</div><div class="line">    mMeasuredWidth = measuredWidth;</div><div class="line">    mMeasuredHeight = measuredHeight;</div><div class="line"></div><div class="line">    mPrivateFlags |= PFLAG_MEASURED_DIMENSION_SET;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以看出这个方法就是给mMeasuredHeight和mMeasuredWidth进行赋值。进行了赋值之后调用View 的getMeasuredWidth和getMeasuredHeight方法才能得到其正确的测量宽高！</p>
<h1 id="ViewGroup的measure过程"><a href="#ViewGroup的measure过程" class="headerlink" title="ViewGroup的measure过程"></a>ViewGroup的measure过程</h1><p>上面提到View的measure方法传入的widthMeasureSpec和heightMeasureSpec是由父View传入的约束信息，那么这些信息是何时传入的呢？由于View是嵌套的，因此measure过程也是递归传递的，子View的measure是由父类调用的，然后子View根据传入的父类约束来设置自身的测量规格。</p>
<p><strong> 继承自ViewGroup的视图均需要实现onMeasure方法，在这个方法里面对其子View进行测量，同时也对自身进行测量，比如LinearLayout的onMeasure方法如下：</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onMeasure</span><span class="params">(<span class="keyword">int</span> widthMeasureSpec, <span class="keyword">int</span> heightMeasureSpec)</span> </span>&#123;</div><div class="line">      <span class="keyword">if</span> (mOrientation == VERTICAL) &#123;</div><div class="line">          measureVertical(widthMeasureSpec, heightMeasureSpec);</div><div class="line">      &#125; <span class="keyword">else</span> &#123;</div><div class="line">          measureHorizontal(widthMeasureSpec, heightMeasureSpec);</div><div class="line">      &#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p>根据布局的方向分别调用measureHorizontal和measureVertical方法。</p>
<p>在ViewGroup中定义了measureChildren, measureChild, measureChildWithMargins方法来对子视图进行测量。measureChildren内部循环调用了measureChild。<br>measureChild和measureChildWithMargins的区别在于measureChildWithMargins把child的margin也考虑在内。下面来对measureChildWithMargins方法来分析：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">   * Ask one of the children of this view to measure itself, taking into</div><div class="line">   * account both the MeasureSpec requirements for this view and its padding</div><div class="line">   * and margins. The child must have MarginLayoutParams The heavy lifting is</div><div class="line">   * done in getChildMeasureSpec.</div><div class="line">   *</div><div class="line">   * <span class="doctag">@param</span> child The child to measure</div><div class="line">   * <span class="doctag">@param</span> parentWidthMeasureSpec The width requirements for this view</div><div class="line">   * <span class="doctag">@param</span> widthUsed Extra space that has been used up by the parent</div><div class="line">   *        horizontally (possibly by other children of the parent)</div><div class="line">   * <span class="doctag">@param</span> parentHeightMeasureSpec The height requirements for this view</div><div class="line">   * <span class="doctag">@param</span> heightUsed Extra space that has been used up by the parent</div><div class="line">   *        vertically (possibly by other children of the parent)</div><div class="line">   */</div><div class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">measureChildWithMargins</span><span class="params">(View child,</span></span></div><div class="line">          <span class="keyword">int</span> parentWidthMeasureSpec, <span class="keyword">int</span> widthUsed,</div><div class="line">          <span class="keyword">int</span> parentHeightMeasureSpec, <span class="keyword">int</span> heightUsed) &#123;</div><div class="line">      <span class="keyword">final</span> MarginLayoutParams lp = (MarginLayoutParams) child.getLayoutParams();</div><div class="line">      <span class="comment">//子视图的测量规格是由父视图的测量测量规格以及子视图的LayoutParams来共同决定的</span></div><div class="line">      <span class="keyword">final</span> <span class="keyword">int</span> childWidthMeasureSpec = getChildMeasureSpec(parentWidthMeasureSpec,</div><div class="line">              mPaddingLeft + mPaddingRight + lp.leftMargin + lp.rightMargin</div><div class="line">                      + widthUsed, lp.width);</div><div class="line">      <span class="keyword">final</span> <span class="keyword">int</span> childHeightMeasureSpec = getChildMeasureSpec(parentHeightMeasureSpec,</div><div class="line">              mPaddingTop + mPaddingBottom + lp.topMargin + lp.bottomMargin</div><div class="line">                      + heightUsed, lp.height);</div><div class="line">      <span class="comment">//调用子视图的measure方法来设置子视图的测量规格</span></div><div class="line">      child.measure(childWidthMeasureSpec, childHeightMeasureSpec);</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p>从以上代码可以看出：子视图的测量规格是由父视图的测量测量规格以及子视图的LayoutParams来共同决定的，因此关键函数是getChildMeasureSpec函数，如下所示：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">    * Does the hard part of measureChildren: figuring out the MeasureSpec to</div><div class="line">    * pass to a particular child. This method figures out the right MeasureSpec</div><div class="line">    * for one dimension (height or width) of one child view.</div><div class="line">    *</div><div class="line">    * The goal is to combine information from our MeasureSpec with the</div><div class="line">    * LayoutParams of the child to get the best possible results. For example,</div><div class="line">    * if the this view knows its size (because its MeasureSpec has a mode of</div><div class="line">    * EXACTLY), and the child has indicated in its LayoutParams that it wants</div><div class="line">    * to be the same size as the parent, the parent should ask the child to</div><div class="line">    * layout given an exact size.</div><div class="line">    *</div><div class="line">    * <span class="doctag">@param</span> spec The requirements for this view</div><div class="line">    * <span class="doctag">@param</span> padding The padding of this view for the current dimension and</div><div class="line">    *        margins, if applicable</div><div class="line">    * <span class="doctag">@param</span> childDimension How big the child wants to be in the current</div><div class="line">    *        dimension</div><div class="line">    * <span class="doctag">@return</span> a MeasureSpec integer for the child</div><div class="line">    */</div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getChildMeasureSpec</span><span class="params">(<span class="keyword">int</span> spec, <span class="keyword">int</span> padding, <span class="keyword">int</span> childDimension)</span> </span>&#123;</div><div class="line">       <span class="keyword">int</span> specMode = MeasureSpec.getMode(spec);<span class="comment">//得到父视图的mode</span></div><div class="line">       <span class="keyword">int</span> specSize = MeasureSpec.getSize(spec);<span class="comment">//得到父视图的size</span></div><div class="line">       <span class="comment">//得到Parent视图剩余的大小</span></div><div class="line">       <span class="keyword">int</span> size = Math.max(<span class="number">0</span>, specSize - padding);</div><div class="line"></div><div class="line">       <span class="keyword">int</span> resultSize = <span class="number">0</span>;</div><div class="line">       <span class="keyword">int</span> resultMode = <span class="number">0</span>;</div><div class="line">       <span class="comment">//根据Parent视图的specMode来进行分支判断</span></div><div class="line">       <span class="keyword">switch</span> (specMode) &#123;</div><div class="line">       <span class="comment">// Parent has imposed an exact size on us</span></div><div class="line">       <span class="keyword">case</span> MeasureSpec.EXACTLY:<span class="comment">//父类是精确模式</span></div><div class="line">           <span class="keyword">if</span> (childDimension &gt;= <span class="number">0</span>) &#123;</div><div class="line">             <span class="comment">//子视图是精确模式，直接设置了精确的大小（在xml当中设置了layout_width="xxx"或者在代码中设置了具体的数值),子视图的size就是精确值,子视图的mode就是EXACTLY</span></div><div class="line">               resultSize = childDimension;</div><div class="line">               resultMode = MeasureSpec.EXACTLY;</div><div class="line">           &#125; <span class="keyword">else</span> <span class="keyword">if</span> (childDimension == LayoutParams.MATCH_PARENT) &#123;</div><div class="line">             <span class="comment">//如果子视图的layout_width或者layout_height为MATCH_PARENT,也就是为父视图的大小，那么子视图的size就是Parent视图剩余的大小，且mode与父类相同，也为EXACTLY</span></div><div class="line">               <span class="comment">// Child wants to be our size. So be it.</span></div><div class="line">               resultSize = size;</div><div class="line">               resultMode = MeasureSpec.EXACTLY;</div><div class="line">           &#125; <span class="keyword">else</span> <span class="keyword">if</span> (childDimension == LayoutParams.WRAP_CONTENT) &#123;</div><div class="line">            <span class="comment">//如果子视图的layout_width或者layout_height为WRAP_CONTENT,也就是不超过父视图的大小，那么子视图的size为size，且mode为AT_MOST。</span></div><div class="line">               <span class="comment">// Child wants to determine its own size. It can't be</span></div><div class="line">               <span class="comment">// bigger than us.</span></div><div class="line">               resultSize = size;</div><div class="line">               resultMode = MeasureSpec.AT_MOST;</div><div class="line">           &#125;</div><div class="line">           <span class="keyword">break</span>;</div><div class="line"></div><div class="line">       <span class="comment">// Parent has imposed a maximum size on us</span></div><div class="line">       <span class="keyword">case</span> MeasureSpec.AT_MOST:</div><div class="line">           <span class="keyword">if</span> (childDimension &gt;= <span class="number">0</span>) &#123;</div><div class="line">             <span class="comment">//子视图是精确模式，直接设置了精确的大小（在xml当中设置了layout_width="xxx"或者在代码中设置了具体的数值),子视图的size就是精确值,子视图的mode就是EXACTLY</span></div><div class="line">               <span class="comment">// Child wants a specific size... so be it</span></div><div class="line">               resultSize = childDimension;</div><div class="line">               resultMode = MeasureSpec.EXACTLY;</div><div class="line">           &#125; <span class="keyword">else</span> <span class="keyword">if</span> (childDimension == LayoutParams.MATCH_PARENT) &#123;</div><div class="line">            <span class="comment">//如果子视图的layout_width或者layout_height为MATCH_PARENT,也就是为父视图的大小，那么子视图的size就是Parent视图剩余的大小，且mode与父类相同，也是AT_MOST。</span></div><div class="line">               <span class="comment">// Child wants to be our size, but our size is not fixed.</span></div><div class="line">               <span class="comment">// Constrain child to not be bigger than us.</span></div><div class="line">               resultSize = size;</div><div class="line">               resultMode = MeasureSpec.AT_MOST;</div><div class="line">           &#125; <span class="keyword">else</span> <span class="keyword">if</span> (childDimension == LayoutParams.WRAP_CONTENT) &#123;</div><div class="line">               <span class="comment">//如果子视图的layout_width或者layout_height为WRAP_CONTENT,也就是不超过父视图的大小，那么子视图的size为size，且mode为AT_MOST。</span></div><div class="line">               <span class="comment">// Child wants to determine its own size. It can't be</span></div><div class="line">               <span class="comment">// bigger than us.</span></div><div class="line">               resultSize = size;</div><div class="line">               resultMode = MeasureSpec.AT_MOST;</div><div class="line">           &#125;</div><div class="line">           <span class="keyword">break</span>;</div><div class="line"></div><div class="line">       <span class="comment">// Parent asked to see how big we want to be</span></div><div class="line">       <span class="keyword">case</span> MeasureSpec.UNSPECIFIED:</div><div class="line">           <span class="keyword">if</span> (childDimension &gt;= <span class="number">0</span>) &#123;</div><div class="line">               <span class="comment">// Child wants a specific size... let him have it</span></div><div class="line">               resultSize = childDimension;</div><div class="line">               resultMode = MeasureSpec.EXACTLY;</div><div class="line">           &#125; <span class="keyword">else</span> <span class="keyword">if</span> (childDimension == LayoutParams.MATCH_PARENT) &#123;</div><div class="line">               <span class="comment">// Child wants to be our size... find out how big it should</span></div><div class="line">               <span class="comment">// be</span></div><div class="line">               resultSize = View.sUseZeroUnspecifiedMeasureSpec ? <span class="number">0</span> : size;</div><div class="line">               resultMode = MeasureSpec.UNSPECIFIED;</div><div class="line">           &#125; <span class="keyword">else</span> <span class="keyword">if</span> (childDimension == LayoutParams.WRAP_CONTENT) &#123;</div><div class="line">               <span class="comment">// Child wants to determine its own size.... find out how</span></div><div class="line">               <span class="comment">// big it should be</span></div><div class="line">               resultSize = View.sUseZeroUnspecifiedMeasureSpec ? <span class="number">0</span> : size;</div><div class="line">               resultMode = MeasureSpec.UNSPECIFIED;</div><div class="line">           &#125;</div><div class="line">           <span class="keyword">break</span>;</div><div class="line">       &#125;</div><div class="line">       <span class="comment">// 将resultSize和resultMode进行组装为32为整数返回</span></div><div class="line">       <span class="comment">//noinspection ResourceType</span></div><div class="line">       <span class="keyword">return</span> MeasureSpec.makeMeasureSpec(resultSize, resultMode);</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>可以看到，getChildMeasureSpec就是根据父视图的specSize和specMode以及child视图的LayoutParams来确定子视图的resultSize和resultMode，然后把resultSize和resultMode进行组装成32位的整数，作为child.measure的参数来对子视图进行测量。</p>
<p><strong> 有一个需要特别注意的地方：</strong></p>
<ul>
<li>当childDimension == LayoutParams.WRAP_CONTENT的时候，其specSize和specMode分别为父视图的size和MeasureSpec.AT_MOST。</li>
<li>再回到上面的View测量过程当中的getDefaultSize方法，如下所示。我们发现当View的specMode为AT_MOST的时候，其size默认就是parent视图的size!</li>
<li>因此，在我们自定义View的时候，需要考虑当specMode为AT_MOST的时候（也就是在xml布局当中设置为WRAP_CONTENT的时候）给当前View的宽高设置一个具体的值，大家可以去看看比如TextView的源代码，均对WRAP_CONTENT的情况进行了特殊的处理！</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getDefaultSize</span><span class="params">(<span class="keyword">int</span> size, <span class="keyword">int</span> measureSpec)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> result = size;</div><div class="line">    <span class="keyword">int</span> specMode = MeasureSpec.getMode(measureSpec);</div><div class="line">    <span class="keyword">int</span> specSize = MeasureSpec.getSize(measureSpec);</div><div class="line">     ......</div><div class="line">    <span class="keyword">case</span> MeasureSpec.AT_MOST:</div><div class="line">    <span class="keyword">case</span> MeasureSpec.EXACTLY:</div><div class="line">        result = specSize;</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> result;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>以上就是View和ViewGroup的measure过程,在ViewGroup的实现视图当中递归调用子视图的的measure方法来实现整个View树的测量。在自定义View的时候，当我们需要对View的尺寸进行更改的时候，需要实现onMeasure方法，在里面根据父视图给的specSize和specMode来设置当前View的specMode和specSize,需要注意的是当父视图给的specMode==AT_MOST的时候，需要给当前View的宽高设置一个具体的值。</p>
<h1 id="View的layout过程"><a href="#View的layout过程" class="headerlink" title="View的layout过程"></a>View的layout过程</h1><p>讲完了View的measure过程，接下来就是layout过程。那么这个layout过程是干什么的呢？在measure过程当中设置了view的宽高，那么设置了宽高之后，具体view是显示在屏幕的哪个位置呢？这个就是layout过程干的事。</p>
<p>layout跟measure一样，也是递归结构，来看下View的layout方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">    * Assign a size and position to a view and all of its</div><div class="line">    * descendants</div><div class="line">    *</div><div class="line">    * &lt;p&gt;This is the second phase of the layout mechanism.</div><div class="line">    * (The first is measuring). In this phase, each parent calls</div><div class="line">    * layout on all of its children to position them.</div><div class="line">    * This is typically done using the child measurements</div><div class="line">    * that were stored in the measure pass().&lt;/p&gt;</div><div class="line">    *</div><div class="line">    * &lt;p&gt;Derived classes should not override this method.</div><div class="line">    * Derived classes with children should override</div><div class="line">    * onLayout. In that method, they should</div><div class="line">    * call layout on each of their children.&lt;/p&gt;</div><div class="line">    *</div><div class="line">    * <span class="doctag">@param</span> l Left position, relative to parent</div><div class="line">    * <span class="doctag">@param</span> t Top position, relative to parent</div><div class="line">    * <span class="doctag">@param</span> r Right position, relative to parent</div><div class="line">    * <span class="doctag">@param</span> b Bottom position, relative to parent</div><div class="line">    */</div><div class="line">   <span class="meta">@SuppressWarnings</span>(&#123;<span class="string">"unchecked"</span>&#125;)</div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">layout</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> t, <span class="keyword">int</span> r, <span class="keyword">int</span> b)</span> </span>&#123;</div><div class="line">       <span class="keyword">if</span> ((mPrivateFlags3 &amp; PFLAG3_MEASURE_NEEDED_BEFORE_LAYOUT) != <span class="number">0</span>) &#123;</div><div class="line">           onMeasure(mOldWidthMeasureSpec, mOldHeightMeasureSpec);</div><div class="line">           mPrivateFlags3 &amp;= ~PFLAG3_MEASURE_NEEDED_BEFORE_LAYOUT;</div><div class="line">       &#125;</div><div class="line"></div><div class="line">       <span class="keyword">int</span> oldL = mLeft;</div><div class="line">       <span class="keyword">int</span> oldT = mTop;</div><div class="line">       <span class="keyword">int</span> oldB = mBottom;</div><div class="line">       <span class="keyword">int</span> oldR = mRight;</div><div class="line">       <span class="comment">//setFrame方法把参数分别赋值给mLeft、mTop、mRight和mBottom这几个变量</span></div><div class="line">      <span class="comment">//判断布局是否发生改变</span></div><div class="line">       <span class="keyword">boolean</span> changed = isLayoutModeOptical(mParent) ?</div><div class="line">               setOpticalFrame(l, t, r, b) : setFrame(l, t, r, b);</div><div class="line"></div><div class="line">       <span class="keyword">if</span> (changed || (mPrivateFlags &amp; PFLAG_LAYOUT_REQUIRED) == PFLAG_LAYOUT_REQUIRED) &#123;</div><div class="line">           onLayout(changed, l, t, r, b);</div><div class="line">          ........</div><div class="line">       &#125;</div><div class="line">          ......</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>在layout方法里面首先通过setFrame来设置自身的位置，然后调用了onLayout方法，是不是跟measure方法里面调用onMeasure方法类似！来看下onLayout方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">    * Called from layout when this view should</div><div class="line">    * assign a size and position to each of its children.</div><div class="line">    *</div><div class="line">    * Derived classes with children should override</div><div class="line">    * this method and call layout on each of</div><div class="line">    * their children.</div><div class="line">    * <span class="doctag">@param</span> changed This is a new size or position for this view</div><div class="line">    * <span class="doctag">@param</span> left Left position, relative to parent</div><div class="line">    * <span class="doctag">@param</span> top Top position, relative to parent</div><div class="line">    * <span class="doctag">@param</span> right Right position, relative to parent</div><div class="line">    * <span class="doctag">@param</span> bottom Bottom position, relative to parent</div><div class="line">    */</div><div class="line">   <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onLayout</span><span class="params">(<span class="keyword">boolean</span> changed, <span class="keyword">int</span> left, <span class="keyword">int</span> top, <span class="keyword">int</span> right, <span class="keyword">int</span> bottom)</span> </span>&#123;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>发现onLayout是一个空方法，通过注释可以看出：具有子视图的子类需要重写这个onLayout方法并且调用其每一个子视图的layout方法。<br>这就完全明白了：也就是说直接或者间接继承自ViewGroup的视图需要重写onLayout方法，然后调用其每个子视图的layout方法来设置子视图的位置！我们可以查看LinearLayout，其肯定是实现了onLayout方法，在这个方法里面来一一设置子视图的位置！LinearLayout的onLayout方法如下所示：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line">   <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onLayout</span><span class="params">(<span class="keyword">boolean</span> changed, <span class="keyword">int</span> l, <span class="keyword">int</span> t, <span class="keyword">int</span> r, <span class="keyword">int</span> b)</span> </span>&#123;</div><div class="line">       <span class="keyword">if</span> (mOrientation == VERTICAL) &#123;</div><div class="line">           layoutVertical(l, t, r, b);</div><div class="line">       &#125; <span class="keyword">else</span> &#123;</div><div class="line">           layoutHorizontal(l, t, r, b);</div><div class="line">       &#125;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>来看下layoutVertical方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">   * Position the children during a layout pass if the orientation of this</div><div class="line">   * LinearLayout is set to &#123;<span class="doctag">@link</span> #VERTICAL&#125;.</div><div class="line">   *</div><div class="line">   * <span class="doctag">@see</span> #getOrientation()</div><div class="line">   * <span class="doctag">@see</span> #setOrientation(int)</div><div class="line">   * <span class="doctag">@see</span> #onLayout(boolean, int, int, int, int)</div><div class="line">   * <span class="doctag">@param</span> left</div><div class="line">   * <span class="doctag">@param</span> top</div><div class="line">   * <span class="doctag">@param</span> right</div><div class="line">   * <span class="doctag">@param</span> bottom</div><div class="line">   */</div><div class="line">  <span class="function"><span class="keyword">void</span> <span class="title">layoutVertical</span><span class="params">(<span class="keyword">int</span> left, <span class="keyword">int</span> top, <span class="keyword">int</span> right, <span class="keyword">int</span> bottom)</span> </span>&#123;</div><div class="line">      <span class="keyword">final</span> <span class="keyword">int</span> paddingLeft = mPaddingLeft;</div><div class="line"></div><div class="line">      <span class="keyword">int</span> childTop;</div><div class="line">      <span class="keyword">int</span> childLeft;</div><div class="line"></div><div class="line">      <span class="comment">// Where right end of child should go</span></div><div class="line">      <span class="keyword">final</span> <span class="keyword">int</span> width = right - left;</div><div class="line">      <span class="keyword">int</span> childRight = width - mPaddingRight;</div><div class="line">      <span class="comment">//child可以使用的空间</span></div><div class="line">      <span class="comment">// Space available for child</span></div><div class="line">      <span class="keyword">int</span> childSpace = width - paddingLeft - mPaddingRight;</div><div class="line">      <span class="comment">//得到 child的个数</span></div><div class="line">      <span class="keyword">final</span> <span class="keyword">int</span> count = getVirtualChildCount();</div><div class="line"></div><div class="line">      <span class="keyword">final</span> <span class="keyword">int</span> majorGravity = mGravity &amp; Gravity.VERTICAL_GRAVITY_MASK;</div><div class="line">      <span class="keyword">final</span> <span class="keyword">int</span> minorGravity = mGravity &amp; Gravity.RELATIVE_HORIZONTAL_GRAVITY_MASK;</div><div class="line">      <span class="comment">//根据majorGravity计算childTop的位置</span></div><div class="line">      <span class="keyword">switch</span> (majorGravity) &#123;</div><div class="line">         <span class="keyword">case</span> Gravity.BOTTOM:</div><div class="line">             <span class="comment">// mTotalLength contains the padding already</span></div><div class="line">             childTop = mPaddingTop + bottom - top - mTotalLength;</div><div class="line">             <span class="keyword">break</span>;</div><div class="line"></div><div class="line">             <span class="comment">// mTotalLength contains the padding already</span></div><div class="line">         <span class="keyword">case</span> Gravity.CENTER_VERTICAL:</div><div class="line">             childTop = mPaddingTop + (bottom - top - mTotalLength) / <span class="number">2</span>;</div><div class="line">             <span class="keyword">break</span>;</div><div class="line"></div><div class="line">         <span class="keyword">case</span> Gravity.TOP:</div><div class="line">         <span class="keyword">default</span>:</div><div class="line">             childTop = mPaddingTop;</div><div class="line">             <span class="keyword">break</span>;</div><div class="line">      &#125;</div><div class="line">      <span class="comment">// 开始进行遍历child视图</span></div><div class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</div><div class="line">          <span class="keyword">final</span> View child = getVirtualChildAt(i);</div><div class="line">          <span class="keyword">if</span> (child == <span class="keyword">null</span>) &#123;</div><div class="line">              childTop += measureNullChild(i);</div><div class="line">          &#125; <span class="keyword">else</span> <span class="keyword">if</span> (child.getVisibility() != GONE) &#123;<span class="comment">//child不为GONE,因为GONE是不占空间的</span></div><div class="line">              <span class="keyword">final</span> <span class="keyword">int</span> childWidth = child.getMeasuredWidth();<span class="comment">// 得到onMeasure之后的测量宽度</span></div><div class="line">              <span class="keyword">final</span> <span class="keyword">int</span> childHeight = child.getMeasuredHeight();<span class="comment">// 得到onMeasure之后的测量高度</span></div><div class="line"></div><div class="line">              <span class="keyword">final</span> LinearLayout.LayoutParams lp =</div><div class="line">                      (LinearLayout.LayoutParams) child.getLayoutParams();</div><div class="line"></div><div class="line">              <span class="keyword">int</span> gravity = lp.gravity;</div><div class="line">              <span class="keyword">if</span> (gravity &lt; <span class="number">0</span>) &#123;</div><div class="line">                  gravity = minorGravity;</div><div class="line">              &#125;</div><div class="line">              <span class="keyword">final</span> <span class="keyword">int</span> layoutDirection = getLayoutDirection();</div><div class="line">              <span class="keyword">final</span> <span class="keyword">int</span> absoluteGravity = Gravity.getAbsoluteGravity(gravity, layoutDirection);</div><div class="line">              <span class="comment">// 根据absoluteGravity计算childLeft的值</span></div><div class="line">              <span class="keyword">switch</span> (absoluteGravity &amp; Gravity.HORIZONTAL_GRAVITY_MASK) &#123;</div><div class="line">                  <span class="keyword">case</span> Gravity.CENTER_HORIZONTAL:</div><div class="line">                      childLeft = paddingLeft + ((childSpace - childWidth) / <span class="number">2</span>)</div><div class="line">                              + lp.leftMargin - lp.rightMargin;</div><div class="line">                      <span class="keyword">break</span>;</div><div class="line"></div><div class="line">                  <span class="keyword">case</span> Gravity.RIGHT:</div><div class="line">                      childLeft = childRight - childWidth - lp.rightMargin;</div><div class="line">                      <span class="keyword">break</span>;</div><div class="line"></div><div class="line">                  <span class="keyword">case</span> Gravity.LEFT:</div><div class="line">                  <span class="keyword">default</span>:</div><div class="line">                      childLeft = paddingLeft + lp.leftMargin;</div><div class="line">                      <span class="keyword">break</span>;</div><div class="line">              &#125;</div><div class="line"></div><div class="line">              <span class="keyword">if</span> (hasDividerBeforeChildAt(i)) &#123;</div><div class="line">                  childTop += mDividerHeight;</div><div class="line">              &#125;</div><div class="line"></div><div class="line">              childTop += lp.topMargin;</div><div class="line">              <span class="comment">//通过setChildFrame函数来设置child的位置， setChildFrame函数如下所示</span></div><div class="line">              setChildFrame(child, childLeft, childTop + getLocationOffset(child),</div><div class="line">                      childWidth, childHeight);</div><div class="line">              childTop += childHeight + lp.bottomMargin + getNextLocationOffset(child);</div><div class="line"></div><div class="line">              i += getChildrenSkipCount(child, i);</div><div class="line">          &#125;</div><div class="line">      &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setChildFrame</span><span class="params">(View child, <span class="keyword">int</span> left, <span class="keyword">int</span> top, <span class="keyword">int</span> width, <span class="keyword">int</span> height)</span> </span>&#123;        </div><div class="line">      child.layout(left, top, left + width, top + height);</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p>上面这个方法还是比较易懂的，主要就是调用child的layout方法来设置child的位置，当我们给一个View设置好位置之后，其内部的四个变量<br>mLeft、mTop、mRight和mBottom也就确定了，不过要注意这些值都是相对父视图而言的，而不是相对整个屏幕而言的。这个四个变量是通过以下方式获取的。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">getWidth</span><span class="params">()</span> </span>&#123;</div><div class="line">       <span class="keyword">return</span> mRight - mLeft;</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">getHeight</span><span class="params">()</span> </span>&#123;</div><div class="line">       <span class="keyword">return</span> mBottom - mTop;</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">getLeft</span><span class="params">()</span> </span>&#123;</div><div class="line">       <span class="keyword">return</span> mLeft;</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">getRight</span><span class="params">()</span> </span>&#123;</div><div class="line">       <span class="keyword">return</span> mRight;</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">getTop</span><span class="params">()</span> </span>&#123;</div><div class="line">       <span class="keyword">return</span> mTop;</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">getBottom</span><span class="params">()</span> </span>&#123;</div><div class="line">       <span class="keyword">return</span> mBottom;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>在View当中还有下面两个函数，这也解释了为什么有时候getWidth()和getMeasuredWidth()以及getHeight()和getMeasuredHeight()会得到不同的值的原因。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">getMeasuredWidth</span><span class="params">()</span> </span>&#123;</div><div class="line">       <span class="keyword">return</span> mMeasuredWidth &amp; MEASURED_SIZE_MASK;</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">getMeasuredHeight</span><span class="params">()</span> </span>&#123;</div><div class="line">       <span class="keyword">return</span> mMeasuredHeight &amp; MEASURED_SIZE_MASK;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>以上就是View的layout过程，layout相对measure过程来说还是算比较简单的。</p>
<p><strong> 总结起来就是：直接或者间接继承自ViewGroup的视图需要重写onLayout方法，然后调用其每个子视图的layout方法来设置子视图的位置。</strong></p>
<h1 id="View的draw过程"><a href="#View的draw过程" class="headerlink" title="View的draw过程"></a>View的draw过程</h1><p>讲完了View的layout流程，接下来就是draw流程，draw负责对view进行绘制。在ViewRootImpl的drawSoftware方法当中：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">    * <span class="doctag">@return</span> true if drawing was successful, false if an error occurred</div><div class="line">    */</div><div class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">drawSoftware</span><span class="params">(Surface surface, AttachInfo attachInfo, <span class="keyword">int</span> xoff, <span class="keyword">int</span> yoff,</span></span></div><div class="line">           <span class="keyword">boolean</span> scalingRequired, Rect dirty) &#123;</div><div class="line"></div><div class="line">       <span class="comment">// Draw with software renderer.</span></div><div class="line">       <span class="keyword">final</span> Canvas canvas;</div><div class="line">       <span class="keyword">try</span> &#123;</div><div class="line">           <span class="keyword">final</span> <span class="keyword">int</span> left = dirty.left;</div><div class="line">           <span class="keyword">final</span> <span class="keyword">int</span> top = dirty.top;</div><div class="line">           <span class="keyword">final</span> <span class="keyword">int</span> right = dirty.right;</div><div class="line">           <span class="keyword">final</span> <span class="keyword">int</span> bottom = dirty.bottom;</div><div class="line"></div><div class="line">           canvas = mSurface.lockCanvas(dirty);</div><div class="line"></div><div class="line">           ................</div><div class="line">               mView.draw(canvas);</div><div class="line">          .........</div><div class="line">       <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>在上述方法当中调用了mView的draw方法，来看View的draw方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">   * Manually render this view (and all of its children) to the given Canvas.</div><div class="line">   * The view must have already done a full layout before this function is</div><div class="line">   * called.  When implementing a view, implement</div><div class="line">   * &#123;<span class="doctag">@link</span> #onDraw(android.graphics.Canvas)&#125; instead of overriding this method.</div><div class="line">   * If you do need to override this method, call the superclass version.</div><div class="line">   *</div><div class="line">   * <span class="doctag">@param</span> canvas The Canvas to which the View is rendered.</div><div class="line">   */</div><div class="line">  <span class="meta">@CallSuper</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">(Canvas canvas)</span> </span>&#123;</div><div class="line">    ...............</div><div class="line">      <span class="comment">/*</span></div><div class="line">       * Draw traversal performs several drawing steps which must be executed</div><div class="line">       * in the appropriate order:</div><div class="line">       *</div><div class="line">       *      1. Draw the background</div><div class="line">       *      2. If necessary, save the canvas' layers to prepare for fading</div><div class="line">       *      3. Draw view's content</div><div class="line">       *      4. Draw children</div><div class="line">       *      5. If necessary, draw the fading edges and restore layers</div><div class="line">       *      6. Draw decorations (scrollbars for instance)</div><div class="line">       */</div><div class="line"></div><div class="line">      <span class="comment">// Step 1, draw the background, if needed</span></div><div class="line">      <span class="keyword">int</span> saveCount;</div><div class="line"></div><div class="line">      <span class="keyword">if</span> (!dirtyOpaque) &#123;</div><div class="line">          drawBackground(canvas);</div><div class="line">      &#125;</div><div class="line">      ........</div><div class="line">     <span class="comment">// skip step 2 &amp; 5 if possible (common case)</span></div><div class="line">      .......</div><div class="line">      <span class="comment">// Step 2, save the canvas' layers</span></div><div class="line"></div><div class="line">          <span class="keyword">if</span> (drawTop) &#123;</div><div class="line">              canvas.saveLayer(left, top, right, top + length, <span class="keyword">null</span>, flags);</div><div class="line">          &#125;</div><div class="line">       ........</div><div class="line">      <span class="comment">// Step 3, draw the content</span></div><div class="line">      <span class="keyword">if</span> (!dirtyOpaque) onDraw(canvas);</div><div class="line">      <span class="comment">// Step 4, draw the children</span></div><div class="line">      dispatchDraw(canvas);</div><div class="line">      <span class="comment">// Step 5, draw the fade effect and restore layers</span></div><div class="line">      <span class="keyword">final</span> Paint p = scrollabilityCache.paint;</div><div class="line">      <span class="keyword">final</span> Matrix matrix = scrollabilityCache.matrix;</div><div class="line">      <span class="keyword">final</span> Shader fade = scrollabilityCache.shader;</div><div class="line"></div><div class="line">      <span class="keyword">if</span> (drawTop) &#123;</div><div class="line">          matrix.setScale(<span class="number">1</span>, fadeHeight * topFadeStrength);</div><div class="line">          matrix.postTranslate(left, top);</div><div class="line">          fade.setLocalMatrix(matrix);</div><div class="line">          p.setShader(fade);</div><div class="line">          canvas.drawRect(left, top, right, top + length, p);</div><div class="line">      &#125;</div><div class="line">     ...............</div><div class="line">      <span class="comment">// Step 6, draw decorations (foreground, scrollbars)</span></div><div class="line">      onDrawForeground(canvas);</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p>通过注释可以看出整个绘制过程分为6部分，在大多数情况下第2步和第5步可以跳过，在自定义View的时候需要实现onDraw方法而不是实现draw方法。<br>接下来对剩下的四步进行分析：</p>
<h2 id="第一步：绘制背景-通过调用drawBackground方法实现"><a href="#第一步：绘制背景-通过调用drawBackground方法实现" class="headerlink" title="第一步：绘制背景 通过调用drawBackground方法实现"></a>第一步：绘制背景 通过调用drawBackground方法实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">drawBackground</span><span class="params">(Canvas canvas)</span> </span>&#123;</div><div class="line">    <span class="keyword">final</span> Drawable background = mBackground;</div><div class="line">    <span class="keyword">if</span> (background == <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    setBackgroundBounds();</div><div class="line">    ...............</div><div class="line">    <span class="keyword">final</span> <span class="keyword">int</span> scrollX = mScrollX;</div><div class="line">    <span class="keyword">final</span> <span class="keyword">int</span> scrollY = mScrollY;</div><div class="line">    <span class="keyword">if</span> ((scrollX | scrollY) == <span class="number">0</span>) &#123;</div><div class="line">        background.draw(canvas);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        canvas.translate(scrollX, scrollY);</div><div class="line">        background.draw(canvas);</div><div class="line">        canvas.translate(-scrollX, -scrollY);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如上所示，调用了background的draw方法，也就是Drawable的draw方法。</p>
<h2 id="第三步：绘制内容-通过调用onDraw方法实现"><a href="#第三步：绘制内容-通过调用onDraw方法实现" class="headerlink" title="第三步：绘制内容 通过调用onDraw方法实现"></a>第三步：绘制内容 通过调用onDraw方法实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">   * Implement this to do your drawing.</div><div class="line">   *</div><div class="line">   * <span class="doctag">@param</span> canvas the canvas on which the background will be drawn</div><div class="line">   */</div><div class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas canvas)</span> </span>&#123;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p>我们发现onDraw是一个空的方法，需要子类去实现，一般我们在自定义View的时候都会重写onDraw方法来进行绘制。</p>
<h2 id="第四步：绘制子类-通过调用dispatchDraw实现"><a href="#第四步：绘制子类-通过调用dispatchDraw实现" class="headerlink" title="第四步：绘制子类 通过调用dispatchDraw实现"></a>第四步：绘制子类 通过调用dispatchDraw实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">   * Called by draw to draw the child views. This may be overridden</div><div class="line">   * by derived classes to gain control just before its children are drawn</div><div class="line">   * (but after its own view has been drawn).</div><div class="line">   * <span class="doctag">@param</span> canvas the canvas on which to draw the view</div><div class="line">   */</div><div class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">dispatchDraw</span><span class="params">(Canvas canvas)</span> </span>&#123;</div><div class="line"></div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p>发现dispatchDraw为空，根据注释：如果View包含子类就需要重写这个方法，那么说明下ViewGroup应该重写了这个方法，看下ViewGroup的dispatchDraw方法，如下所示：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">dispatchDraw</span><span class="params">(Canvas canvas)</span> </span>&#123;</div><div class="line">      .............</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; childrenCount; i++) &#123;</div><div class="line">          <span class="keyword">while</span> (transientIndex &gt;= <span class="number">0</span> &amp;&amp; mTransientIndices.get(transientIndex) == i) &#123;</div><div class="line">              <span class="keyword">final</span> View transientChild = mTransientViews.get(transientIndex);</div><div class="line">              <span class="keyword">if</span> ((transientChild.mViewFlags &amp; VISIBILITY_MASK) == VISIBLE ||</div><div class="line">                      transientChild.getAnimation() != <span class="keyword">null</span>) &#123;</div><div class="line">                  more |= drawChild(canvas, transientChild, drawingTime);</div><div class="line">              &#125;</div><div class="line">              transientIndex++;</div><div class="line">              <span class="keyword">if</span> (transientIndex &gt;= transientCount) &#123;</div><div class="line">                  transientIndex = -<span class="number">1</span>;</div><div class="line">              &#125;</div><div class="line">          &#125;</div><div class="line"></div><div class="line">          <span class="keyword">final</span> <span class="keyword">int</span> childIndex = getAndVerifyPreorderedIndex(childrenCount, i, customOrder);</div><div class="line">          <span class="keyword">final</span> View child = getAndVerifyPreorderedView(preorderedList, children, childIndex);</div><div class="line">          <span class="keyword">if</span> ((child.mViewFlags &amp; VISIBILITY_MASK) == VISIBLE || child.getAnimation() != <span class="keyword">null</span>) &#123;</div><div class="line">              more |= drawChild(canvas, child, drawingTime);</div><div class="line">          &#125;</div><div class="line">      &#125;</div><div class="line">      .............    </div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p>从上述方法看出主要是遍历child,然后调用child的drawChild方法，来看下drawChild方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">drawChild</span><span class="params">(Canvas canvas, View child, <span class="keyword">long</span> drawingTime)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> child.draw(canvas, <span class="keyword">this</span>, drawingTime);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以看出，在drawChild方法当中调用了child.draw方法来实现子视图的绘制。</p>
<h2 id="第六步：绘制装饰，比如前景色，滚动条等-通过onDrawForeground方法实现"><a href="#第六步：绘制装饰，比如前景色，滚动条等-通过onDrawForeground方法实现" class="headerlink" title="第六步：绘制装饰，比如前景色，滚动条等 通过onDrawForeground方法实现"></a>第六步：绘制装饰，比如前景色，滚动条等 通过onDrawForeground方法实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">    * Draw any foreground content for this view.</div><div class="line">    *</div><div class="line">    * &lt;p&gt;Foreground content may consist of scroll bars, a &#123;<span class="doctag">@link</span> #setForeground foreground&#125;</div><div class="line">    * drawable or other view-specific decorations. The foreground is drawn on top of the</div><div class="line">    * primary view content.&lt;/p&gt;</div><div class="line">    *</div><div class="line">    * <span class="doctag">@param</span> canvas canvas to draw into</div><div class="line">    */</div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDrawForeground</span><span class="params">(Canvas canvas)</span> </span>&#123;</div><div class="line">       onDrawScrollIndicators(canvas);</div><div class="line">       onDrawScrollBars(canvas);</div><div class="line">       ........</div><div class="line">       <span class="keyword">final</span> Drawable foreground = mForegroundInfo != <span class="keyword">null</span> ? mForegroundInfo.mDrawable : <span class="keyword">null</span>;</div><div class="line">        ........</div><div class="line">        foreground.draw(canvas);</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>可以看出主要是对滚动条和前景色进行绘制。</p>
<p>到此，View绘制的三个基本流程：measure,layout,draw就讲完了，measure过程应该是三个流程里面最为复杂的。希望通过本次对源码的剖析，能够对View的绘制流程有一个清楚的认识，在以后自定义View的时候能够少走弯路～～</p>
<h1 id="View树的重绘"><a href="#View树的重绘" class="headerlink" title="View树的重绘"></a>View树的重绘</h1><p>还记得在上一篇博客中我们讲ViewGroup#addView方法会导致View树的重新绘制，代码如下所示：</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addView</span><span class="params">(View child, <span class="keyword">int</span> index, LayoutParams params)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (DBG) &#123;</div><div class="line">        System.out.println(<span class="keyword">this</span> + <span class="string">" addView"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (child == <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Cannot add a null child view to a ViewGroup"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// addViewInner() will call child.requestLayout() when setting the new LayoutParams</span></div><div class="line">    <span class="comment">// therefore, we call requestLayout() on ourselves before, so that the child's request</span></div><div class="line">    <span class="comment">// will be blocked at our level</span></div><div class="line">    requestLayout();</div><div class="line">    invalidate(<span class="keyword">true</span>);</div><div class="line">    addViewInner(child, index, params, <span class="keyword">false</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p> 其实归根结底是调用了requestLayout和invalidate方法的原因，导致View进行重新绘制，下面来对这两个方法进行分析：</p>
<h2 id="View的requestLayout方法："><a href="#View的requestLayout方法：" class="headerlink" title="View的requestLayout方法："></a>View的requestLayout方法：</h2><p>requestLayout是view的方法，如下所示：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@CallSuper</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">requestLayout</span><span class="params">()</span> </span>&#123;</div><div class="line">    ............</div><div class="line">      <span class="keyword">if</span> (mParent != <span class="keyword">null</span> &amp;&amp; !mParent.isLayoutRequested()) &#123;</div><div class="line">          mParent.requestLayout();</div><div class="line">      &#125;</div><div class="line">    .........</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p>核心代码是mParent.requestLayout，这个方法就会一层层的往上递归，一直到ViewRootImpl的requestLayout。<br>ViewRootImpl的requestLayout方法在上一篇博客中已经分析过，这个方法会导致整个View树的重绘。</p>
<h2 id="View的invalidate方法："><a href="#View的invalidate方法：" class="headerlink" title="View的invalidate方法："></a>View的invalidate方法：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">invalidate</span><span class="params">()</span> </span>&#123;</div><div class="line">    invalidate(<span class="keyword">true</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">invalidate</span><span class="params">(<span class="keyword">boolean</span> invalidateCache)</span> </span>&#123;</div><div class="line">    invalidateInternal(<span class="number">0</span>, <span class="number">0</span>, mRight - mLeft, mBottom - mTop, invalidateCache, <span class="keyword">true</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">invalidateInternal</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> t, <span class="keyword">int</span> r, <span class="keyword">int</span> b, <span class="keyword">boolean</span> invalidateCache,</span></span></div><div class="line">        <span class="keyword">boolean</span> fullInvalidate) &#123;</div><div class="line">       ...........</div><div class="line">        <span class="comment">// Propagate the damage rectangle to the parent view.</span></div><div class="line">        <span class="keyword">final</span> AttachInfo ai = mAttachInfo;</div><div class="line">        <span class="keyword">final</span> ViewParent p = mParent;</div><div class="line">        <span class="keyword">if</span> (p != <span class="keyword">null</span> &amp;&amp; ai != <span class="keyword">null</span> &amp;&amp; l &lt; r &amp;&amp; t &lt; b) &#123;</div><div class="line">            <span class="keyword">final</span> Rect damage = ai.mTmpInvalRect;</div><div class="line">            damage.set(l, t, r, b);</div><div class="line">            p.invalidateChild(<span class="keyword">this</span>, damage);</div><div class="line">        &#125;</div><div class="line">      ...........</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们发现最终调用了当前view父视图的invalidateChid方法，于是查看ViewGroup的invalidateChid方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">    * Don't call or override this method. It is used for the implementation of</div><div class="line">    * the view hierarchy.</div><div class="line">    */</div><div class="line">   <span class="meta">@Override</span></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">invalidateChild</span><span class="params">(View child, <span class="keyword">final</span> Rect dirty)</span> </span>&#123;</div><div class="line">       ViewParent parent = <span class="keyword">this</span>;</div><div class="line">       .............</div><div class="line">           <span class="keyword">do</span> &#123;</div><div class="line">               View view = <span class="keyword">null</span>;</div><div class="line">               <span class="keyword">if</span> (parent <span class="keyword">instanceof</span> View) &#123;</div><div class="line">                   view = (View) parent;</div><div class="line">               &#125;</div><div class="line">               ..........</div><div class="line">               parent = parent.invalidateChildInParent(location, dirty);</div><div class="line">               <span class="keyword">if</span> (view != <span class="keyword">null</span>) &#123;</div><div class="line">                   <span class="comment">// Account for transform on current parent</span></div><div class="line">                   Matrix m = view.getMatrix();</div><div class="line">                   <span class="keyword">if</span> (!m.isIdentity()) &#123;</div><div class="line">                       RectF boundingRect = attachInfo.mTmpTransformRect;</div><div class="line">                       boundingRect.set(dirty);</div><div class="line">                       m.mapRect(boundingRect);</div><div class="line">                       dirty.set((<span class="keyword">int</span>) Math.floor(boundingRect.left),</div><div class="line">                               (<span class="keyword">int</span>) Math.floor(boundingRect.top),</div><div class="line">                               (<span class="keyword">int</span>) Math.ceil(boundingRect.right),</div><div class="line">                               (<span class="keyword">int</span>) Math.ceil(boundingRect.bottom));</div><div class="line">                   &#125;</div><div class="line">               &#125;</div><div class="line">           &#125; <span class="keyword">while</span> (parent != <span class="keyword">null</span>);</div><div class="line">       &#125;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>我们发现invalidateChild方法里面有一个do-while循环，在这个循环里面循环调用invalidateChildInParent方法，到这里我们自然就可以想到最终会调用ViewRootImpl的invalidateChildInParent方法，ViewRootImpl的invalidateChildInParent方法如下所示：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> ViewParent <span class="title">invalidateChildInParent</span><span class="params">(<span class="keyword">int</span>[] location, Rect dirty)</span> </span>&#123;</div><div class="line">      checkThread();</div><div class="line">      <span class="keyword">if</span> (DEBUG_DRAW) Log.v(mTag, <span class="string">"Invalidate child: "</span> + dirty);</div><div class="line"></div><div class="line">      <span class="keyword">if</span> (dirty == <span class="keyword">null</span>) &#123;</div><div class="line">          invalidate();</div><div class="line">          <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (dirty.isEmpty() &amp;&amp; !mIsAnimating) &#123;</div><div class="line">          <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">      &#125;</div><div class="line">      ............</div><div class="line">      <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p>可以看到在这个方法里面调用了invalidate方法，如下所示：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">invalidate</span><span class="params">()</span> </span>&#123;</div><div class="line">       mDirty.set(<span class="number">0</span>, <span class="number">0</span>, mWidth, mHeight);</div><div class="line">       <span class="keyword">if</span> (!mWillDrawSoon) &#123;</div><div class="line">           scheduleTraversals();</div><div class="line">       &#125;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>看到这里是否有一种很熟悉的赶脚（如果看了上一篇博客的话），这个scheduleTraversals方法最终会调用View的三个基本绘制流程来实现整个View树的绘制。</p>
<h2 id="View的postInvalidate方法："><a href="#View的postInvalidate方法：" class="headerlink" title="View的postInvalidate方法："></a>View的postInvalidate方法：</h2><p>当我们想在非ui线程当中刷新View的时候一般都是调用postInvalidate方法，View的postInvalidate方法如下所示：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postInvalidate</span><span class="params">()</span> </span>&#123;</div><div class="line">      postInvalidateDelayed(<span class="number">0</span>);</div><div class="line">  &#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postInvalidateDelayed</span><span class="params">(<span class="keyword">long</span> delayMilliseconds)</span> </span>&#123;</div><div class="line">        <span class="comment">// We try only with the AttachInfo because there's no point in invalidating</span></div><div class="line">        <span class="comment">// if we are not attached to our window</span></div><div class="line">        <span class="keyword">final</span> AttachInfo attachInfo = mAttachInfo;</div><div class="line">        <span class="keyword">if</span> (attachInfo != <span class="keyword">null</span>) &#123;</div><div class="line">            attachInfo.mViewRootImpl.dispatchInvalidateDelayed(<span class="keyword">this</span>, delayMilliseconds);</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>可以看出是调用了ViewRootImpl的dispatchInvalidateDelayed方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dispatchInvalidateDelayed</span><span class="params">(View view, <span class="keyword">long</span> delayMilliseconds)</span> </span>&#123;</div><div class="line">      Message msg = mHandler.obtainMessage(MSG_INVALIDATE, view);</div><div class="line">      mHandler.sendMessageDelayed(msg, delayMilliseconds);</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p>这个方法就是发送一个MSG_INVALIDATE消息到消息队列当中，那肯定是在Handler的handleMessage方法里面对消息进行了处理：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</div><div class="line">          <span class="keyword">switch</span> (msg.what) &#123;</div><div class="line">          <span class="keyword">case</span> MSG_INVALIDATE:</div><div class="line">              ((View) msg.obj).invalidate();</div><div class="line">              <span class="keyword">break</span>;</div></pre></td></tr></table></figure>
<p>在handleMessage方法里面调用了View的invalidate方法,而关于invalidate方法，在上面进行了详细的分析。</p>
<p>到此为止，对View绘制的三个基本流程从源码的角度进行了详细的剖析，谢谢各位的阅读，不足之处欢迎指出。</p>
]]></content>
      
        <categories>
            
            <category> Android源码解析 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android应用层View绘制流程之DecorView与ViewRootImpl]]></title>
      <url>http://easyliu.com/2017/04/22/android/ViewInvalidteProcessOne/</url>
      <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>一直对Android中View的整个绘制流程不是很了解，View是怎么添加到Activity当中去的？当View中的内容发生改变的时候是怎样执行界面的刷新的？因此，今天准备从源码的角度来对View的整个绘制流程来进行分析，源码基于API25。由于篇幅限制，这篇文章只分析顶层视图DecorView的显示逻辑，具体的View树绘制三部曲:measure,layout,draw将在下篇博文进行深入剖析。</p>
<h1 id="从Activity的setContentView方法说起"><a href="#从Activity的setContentView方法说起" class="headerlink" title="从Activity的setContentView方法说起"></a>从Activity的setContentView方法说起</h1><p>我们都知道给Activity设置布局通常就是调用其setContentView方法，这个方法有几个重载的方法，如下所示：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setContentView</span><span class="params">(@LayoutRes <span class="keyword">int</span> layoutResID)</span> </span>&#123;</div><div class="line">     getWindow().setContentView(layoutResID);</div><div class="line">     initWindowDecorActionBar();</div><div class="line"> &#125;</div><div class="line"></div><div class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setContentView</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">       getWindow().setContentView(view);</div><div class="line">       initWindowDecorActionBar();</div><div class="line">   &#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setContentView</span><span class="params">(View view, ViewGroup.LayoutParams params)</span> </span>&#123;</div><div class="line">       getWindow().setContentView(view, params);</div><div class="line">       initWindowDecorActionBar();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>从上面的三个方法可以看出其均调用了getWindow()的相对应的方法，我们来看getWindow()方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> Window <span class="title">getWindow</span><span class="params">()</span> </span>&#123;</div><div class="line">       <span class="keyword">return</span> mWindow;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>可以看出这个方法返回的是一个Window类型的变量mWindow，那么这个mWindow肯定是在Activity某个地方进行初始化,如下所示在attach方法里面进行了初始化：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">attach</span><span class="params">(Context context, ActivityThread aThread,</span></span></div><div class="line">           Instrumentation instr, IBinder token, <span class="keyword">int</span> ident,</div><div class="line">           Application application, Intent intent, ActivityInfo info,</div><div class="line">           CharSequence title, Activity parent, String id,</div><div class="line">           NonConfigurationInstances lastNonConfigurationInstances,</div><div class="line">           Configuration config, String referrer, IVoiceInteractor voiceInteractor,</div><div class="line">           Window window) &#123;</div><div class="line">       attachBaseContext(context);</div><div class="line"></div><div class="line">       mFragments.attachHost(<span class="keyword">null</span> <span class="comment">/*parent*/</span>);</div><div class="line"></div><div class="line">       mWindow = <span class="keyword">new</span> PhoneWindow(<span class="keyword">this</span>, window);</div><div class="line">       mWindow.setWindowControllerCallback(<span class="keyword">this</span>);</div><div class="line">       mWindow.setCallback(<span class="keyword">this</span>);</div><div class="line">       mWindow.setOnWindowDismissedCallback(<span class="keyword">this</span>);</div><div class="line">       mWindow.getLayoutInflater().setPrivateFactory(<span class="keyword">this</span>);</div><div class="line">       ..........</div><div class="line">       ..........</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>mWindow是一个PhoneWindow类型的变量，其实我们通过查看抽象类Window最开始的简介可以知道，PhoneWindow是Window的唯一子类！</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Abstract base class for a top-level window look and behavior policy.  An</div><div class="line"> * instance of this class should be used as the top-level view added to the</div><div class="line"> * window manager. It provides standard UI policies such as a background, title</div><div class="line"> * area, default key processing, etc.</div><div class="line"> *</div><div class="line"> * &lt;p&gt;The only existing implementation of this abstract class is</div><div class="line"> * android.view.PhoneWindow, which you should instantiate when needing a</div><div class="line"> * Window.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Window</span> </span>&#123;</div></pre></td></tr></table></figure>
<p>接下来查看PhoneWindow的setContentView方法，跟Activity对应，也有三个重载的方法：</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"> <span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setContentView</span><span class="params">(<span class="keyword">int</span> layoutResID)</span> </span>&#123;</div><div class="line">    <span class="comment">// Note: FEATURE_CONTENT_TRANSITIONS may be set in the process of installing the window</span></div><div class="line">    <span class="comment">// decor, when theme attributes and the like are crystalized. Do not check the feature</span></div><div class="line">    <span class="comment">// before this happens.</span></div><div class="line">    <span class="keyword">if</span> (mContentParent == <span class="keyword">null</span>) &#123;</div><div class="line">        installDecor();</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!hasFeature(FEATURE_CONTENT_TRANSITIONS)) &#123;</div><div class="line">        mContentParent.removeAllViews();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (hasFeature(FEATURE_CONTENT_TRANSITIONS)) &#123;</div><div class="line">        <span class="keyword">final</span> Scene newScene = Scene.getSceneForLayout(mContentParent, layoutResID,</div><div class="line">                getContext());</div><div class="line">        transitionTo(newScene);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        mLayoutInflater.inflate(layoutResID, mContentParent);</div><div class="line">    &#125;</div><div class="line">    mContentParent.requestApplyInsets();</div><div class="line">    <span class="keyword">final</span> Callback cb = getCallback();</div><div class="line">    <span class="keyword">if</span> (cb != <span class="keyword">null</span> &amp;&amp; !isDestroyed()) &#123;</div><div class="line">        cb.onContentChanged();</div><div class="line">    &#125;</div><div class="line">    mContentParentExplicitlySet = <span class="keyword">true</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setContentView</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">    setContentView(view, <span class="keyword">new</span> ViewGroup.LayoutParams(MATCH_PARENT, MATCH_PARENT));</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setContentView</span><span class="params">(View view, ViewGroup.LayoutParams params)</span> </span>&#123;</div><div class="line">    <span class="comment">// Note: FEATURE_CONTENT_TRANSITIONS may be set in the process of installing the window</span></div><div class="line">    <span class="comment">// decor, when theme attributes and the like are crystalized. Do not check the feature</span></div><div class="line">    <span class="comment">// before this happens.</span></div><div class="line">    <span class="keyword">if</span> (mContentParent == <span class="keyword">null</span>) &#123;</div><div class="line">        installDecor();</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!hasFeature(FEATURE_CONTENT_TRANSITIONS)) &#123;</div><div class="line">        mContentParent.removeAllViews();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (hasFeature(FEATURE_CONTENT_TRANSITIONS)) &#123;</div><div class="line">        view.setLayoutParams(params);</div><div class="line">        <span class="keyword">final</span> Scene newScene = <span class="keyword">new</span> Scene(mContentParent, view);</div><div class="line">        transitionTo(newScene);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        mContentParent.addView(view, params);</div><div class="line">    &#125;</div><div class="line">    mContentParent.requestApplyInsets();</div><div class="line">    <span class="keyword">final</span> Callback cb = getCallback();</div><div class="line">    <span class="keyword">if</span> (cb != <span class="keyword">null</span> &amp;&amp; !isDestroyed()) &#123;</div><div class="line">        cb.onContentChanged();</div><div class="line">    &#125;</div><div class="line">    mContentParentExplicitlySet = <span class="keyword">true</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p> 对setContentView(View view,ViewGroup.LayoutParams)方法进行分析：</p>
<ul>
<li><p>首先判断mContentParent是否为null，如果为null的话就执行方法installDecor，这个mContentParent是一个ViewGroup类型，这个方法如下所示：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"> <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">installDecor</span><span class="params">()</span> </span>&#123;</div><div class="line">        mForceDecorInstall = <span class="keyword">false</span>;</div><div class="line">        <span class="keyword">if</span> (mDecor == <span class="keyword">null</span>) &#123;</div><div class="line">            mDecor = generateDecor(-<span class="number">1</span>);</div><div class="line">            mDecor.setDescendantFocusability(ViewGroup.FOCUS_AFTER_DESCENDANTS);</div><div class="line">            mDecor.setIsRootNamespace(<span class="keyword">true</span>);</div><div class="line">            <span class="keyword">if</span> (!mInvalidatePanelMenuPosted &amp;&amp; mInvalidatePanelMenuFeatures != <span class="number">0</span>) &#123;</div><div class="line">                mDecor.postOnAnimation(mInvalidatePanelMenuRunnable);</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            mDecor.setWindow(<span class="keyword">this</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (mContentParent == <span class="keyword">null</span>) &#123;</div><div class="line">            mContentParent = generateLayout(mDecor);</div><div class="line">        ........</div><div class="line">        .......</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>generateDecor用于产生mDecor,mDecor是DecorView类型，是整个Activity的顶层视图，DecorView是FrameLayout的子类，有兴趣的可以看看DecorView源码，这里只是给个结论。<br>然后是generateLayout方法，这个方法很长，看关键代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"> ViewGroup contentParent = (ViewGroup)findViewById(ID_ANDROID_CONTENT);</div><div class="line">      <span class="keyword">if</span> (contentParent == <span class="keyword">null</span>) &#123;</div><div class="line">          <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Window couldn't find content container view"</span>);</div><div class="line">      &#125;</div><div class="line">....</div><div class="line"><span class="keyword">return</span> contentParent;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>从上述代码可以看出，上面讲到的mContentParent是顶层视图mDecor中的一个子View，这个子View的id为：</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">  * The ID that the main layout in the XML layout file should have.</div><div class="line">  */</div><div class="line"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> ID_ANDROID_CONTENT = com.android.internal.R.id.content;</div></pre></td></tr></table></figure>
<ul>
<li>因此，执行了installDecor方法之后就得到了mDecor和mContentParent，然后是一句很关键的代码，如下所示：<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mContentParent.addView(view, params);</div></pre></td></tr></table></figure>
</li>
</ul>
<p>通过这句代码就把我们在Activity当中设置的布局视图加入了mContentParent里面。<br><strong> 层次关系为：DecorView &gt; contentParent &gt; Activity中的布局。</strong><br>由于mContentParent是ViewGroup类型，查看ViewGroup#addView方法，如下所示：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">    * Adds a child view with the specified layout parameters.</div><div class="line">    *</div><div class="line">    * &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; do not invoke this method from</div><div class="line">    * &#123;<span class="doctag">@link</span> #draw(android.graphics.Canvas)&#125;, &#123;<span class="doctag">@link</span> #onDraw(android.graphics.Canvas)&#125;,</div><div class="line">    * &#123;<span class="doctag">@link</span> #dispatchDraw(android.graphics.Canvas)&#125; or any related method.&lt;/p&gt;</div><div class="line">    *</div><div class="line">    * <span class="doctag">@param</span> child the child view to add</div><div class="line">    * <span class="doctag">@param</span> index the position at which to add the child or -1 to add last</div><div class="line">    * <span class="doctag">@param</span> params the layout parameters to set on the child</div><div class="line">    */</div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addView</span><span class="params">(View child, <span class="keyword">int</span> index, LayoutParams params)</span> </span>&#123;</div><div class="line">       <span class="keyword">if</span> (DBG) &#123;</div><div class="line">           System.out.println(<span class="keyword">this</span> + <span class="string">" addView"</span>);</div><div class="line">       &#125;</div><div class="line"></div><div class="line">       <span class="keyword">if</span> (child == <span class="keyword">null</span>) &#123;</div><div class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Cannot add a null child view to a ViewGroup"</span>);</div><div class="line">       &#125;</div><div class="line"></div><div class="line">       <span class="comment">// addViewInner() will call child.requestLayout() when setting the new LayoutParams</span></div><div class="line">       <span class="comment">// therefore, we call requestLayout() on ourselves before, so that the child's request</span></div><div class="line">       <span class="comment">// will be blocked at our level</span></div><div class="line">       requestLayout();</div><div class="line">       invalidate(<span class="keyword">true</span>);</div><div class="line">       addViewInner(child, index, params, <span class="keyword">false</span>);</div><div class="line">   &#125;</div></pre></td></tr></table></figure></p>
<p>这个addView方法最后会调用requestLayout()和invalidate()方法，这两个方法会导致整个View树进行重新绘制，这样就把我们在Activity当中自定义的布局文件给显示出来了！</p>
<p>整个过程总结如下：<br>Activity.setContentView -&gt; PhoneWindow.setContentView -&gt;初始化PhoneWindow中的mDecor和mContentParent -&gt; 把Activity当中的布局视图加入mContentParent -&gt; 导致整个View树进行重新绘制，从而把布局文件显示出来！</p>
<h1 id="DecorView是怎么显示出来的"><a href="#DecorView是怎么显示出来的" class="headerlink" title="DecorView是怎么显示出来的"></a>DecorView是怎么显示出来的</h1><p>前面说了DecorView是整个Activity的顶层视图，那么这个DecorView是怎么显示出来了的呢？主要实现过程在ActivityThread的handleResumeActivity方法里面，如下所示：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">handleResumeActivity</span><span class="params">(IBinder token,</span></span></div><div class="line">        <span class="keyword">boolean</span> clearHide, <span class="keyword">boolean</span> isForward, <span class="keyword">boolean</span> reallyResume, <span class="keyword">int</span> seq, String reason) &#123;</div><div class="line">    ActivityClientRecord r = mActivities.get(token);</div><div class="line">    <span class="keyword">if</span> (!checkAndUpdateLifecycleSeq(seq, r, <span class="string">"resumeActivity"</span>)) &#123;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// If we are getting ready to gc after going to the background, well</span></div><div class="line">    <span class="comment">// we are back active so skip it.</span></div><div class="line">    unscheduleGcIdler();</div><div class="line">    mSomeActivitiesChanged = <span class="keyword">true</span>;</div><div class="line"></div><div class="line">    <span class="comment">// TODO Push resumeArgs into the activity for consideration</span></div><div class="line">    r = performResumeActivity(token, clearHide, reason);</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (r != <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">final</span> Activity a = r.activity;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (localLOGV) Slog.v(</div><div class="line">            TAG, <span class="string">"Resume "</span> + r + <span class="string">" started activity: "</span> +</div><div class="line">            a.mStartedActivity + <span class="string">", hideForNow: "</span> + r.hideForNow</div><div class="line">            + <span class="string">", finished: "</span> + a.mFinished);</div><div class="line"></div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> forwardBit = isForward ?</div><div class="line">                WindowManager.LayoutParams.SOFT_INPUT_IS_FORWARD_NAVIGATION : <span class="number">0</span>;</div><div class="line"></div><div class="line">        <span class="comment">// If the window hasn't yet been added to the window manager,</span></div><div class="line">        <span class="comment">// and this guy didn't finish itself or start another activity,</span></div><div class="line">        <span class="comment">// then go ahead and add the window.</span></div><div class="line">        <span class="keyword">boolean</span> willBeVisible = !a.mStartedActivity;</div><div class="line">        <span class="keyword">if</span> (!willBeVisible) &#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                willBeVisible = ActivityManagerNative.getDefault().willActivityBeVisible(</div><div class="line">                        a.getActivityToken());</div><div class="line">            &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</div><div class="line">                <span class="keyword">throw</span> e.rethrowFromSystemServer();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (r.window == <span class="keyword">null</span> &amp;&amp; !a.mFinished &amp;&amp; willBeVisible) &#123;</div><div class="line">            r.window = r.activity.getWindow();</div><div class="line">            View decor = r.window.getDecorView();</div><div class="line">            decor.setVisibility(View.INVISIBLE);</div><div class="line">            ViewManager wm = a.getWindowManager();</div><div class="line">            WindowManager.LayoutParams l = r.window.getAttributes();</div><div class="line">            a.mDecor = decor;</div><div class="line">            l.type = WindowManager.LayoutParams.TYPE_BASE_APPLICATION;</div><div class="line">            l.softInputMode |= forwardBit;</div><div class="line">            <span class="keyword">if</span> (r.mPreserveWindow) &#123;</div><div class="line">                a.mWindowAdded = <span class="keyword">true</span>;</div><div class="line">                r.mPreserveWindow = <span class="keyword">false</span>;</div><div class="line">                <span class="comment">// Normally the ViewRoot sets up callbacks with the Activity</span></div><div class="line">                <span class="comment">// in addView-&gt;ViewRootImpl#setView. If we are instead reusing</span></div><div class="line">                <span class="comment">// the decor view we have to notify the view root that the</span></div><div class="line">                <span class="comment">// callbacks may have changed.</span></div><div class="line">                ViewRootImpl impl = decor.getViewRootImpl();</div><div class="line">                <span class="keyword">if</span> (impl != <span class="keyword">null</span>) &#123;</div><div class="line">                    impl.notifyChildRebuilt();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (a.mVisibleFromClient &amp;&amp; !a.mWindowAdded) &#123;</div><div class="line">                a.mWindowAdded = <span class="keyword">true</span>;</div><div class="line">                wm.addView(decor, l);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">        ................................</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>如上述方法所示，首先从ActivityThread保存的mActivities列表里面得到一个ActivityClientRecord对象，这个对象保存了Activity的一些信息。</p>
<ul>
<li>得到Activity之后调用View decor = r.window.getDecorView();方法得到顶层视图DecorView，这个视图前面说过是保存在PhoneWindow里面，也就是一个Activity对应一个 PhoneWindow，从而对应一个DecorView。</li>
<li>然后是调用ViewManager wm = a.getWindowManager();方法得到Activity当中的WindowManager对象，那为什么返回的是ViewManager对象呢？查看WindowManager接口，如下所示，发现WindowManager是继承自ViewManager接口的。</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">WindowManager</span> <span class="keyword">extends</span> <span class="title">ViewManager</span> </span>&#123;</div></pre></td></tr></table></figure>
<p>ViewManager接口如下所示，从注释可以看出这个接口主要是用来往Activity当中添加或者移除View。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/** Interface to let you add and remove child views to an Activity. To get an instance</span></div><div class="line">  * of this class, call &#123;<span class="doctag">@link</span> android.content.Context#getSystemService(java.lang.String) Context.getSystemService()&#125;.</div><div class="line">  */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ViewManager</span></span></div><div class="line">&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Assign the passed LayoutParams to the passed View and add the view to the window.</div><div class="line">     * &lt;p&gt;Throws &#123;<span class="doctag">@link</span> android.view.WindowManager.BadTokenException&#125; for certain programming</div><div class="line">     * errors, such as adding a second view to a window without removing the first view.</div><div class="line">     * &lt;p&gt;Throws &#123;<span class="doctag">@link</span> android.view.WindowManager.InvalidDisplayException&#125; if the window is on a</div><div class="line">     * secondary &#123;<span class="doctag">@link</span> Display&#125; and the specified display can't be found</div><div class="line">     * (see &#123;<span class="doctag">@link</span> android.app.Presentation&#125;).</div><div class="line">     * <span class="doctag">@param</span> view The view to be added to this window.</div><div class="line">     * <span class="doctag">@param</span> params The LayoutParams to assign to view.</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addView</span><span class="params">(View view, ViewGroup.LayoutParams params)</span></span>;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateViewLayout</span><span class="params">(View view, ViewGroup.LayoutParams params)</span></span>;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeView</span><span class="params">(View view)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<ul>
<li>得到Activity当中的WindowManager之后，调用wm.addView(decor, l);方法，就把DecorView加入了WindowManager。我们知道WindowManager只是一个接口，具体的实现类是WindowManagerImpl,看下其addView方法：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addView</span><span class="params">(@NonNull View view, @NonNull ViewGroup.LayoutParams params)</span> </span>&#123;</div><div class="line">       applyDefaultToken(params);</div><div class="line">       mGlobal.addView(view, params, mContext.getDisplay(), mParentWindow);</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>发现这个addView方法其实是调用了成员变量mGlobal的addVeiw方法，mGlobal是WindowManagerGlobal类型，我们来看下其addView方法，如下所示：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addView</span><span class="params">(View view, ViewGroup.LayoutParams params,</span></span></div><div class="line">           Display display, Window parentWindow) &#123;</div><div class="line">       ........................</div><div class="line">       ViewRootImpl root;</div><div class="line">       View panelParentView = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">      .........................</div><div class="line">           root = <span class="keyword">new</span> ViewRootImpl(view.getContext(), display);</div><div class="line"></div><div class="line">           view.setLayoutParams(wparams);</div><div class="line"></div><div class="line">           mViews.add(view);</div><div class="line">           mRoots.add(root);</div><div class="line">           mParams.add(wparams);</div><div class="line">      ...........................</div><div class="line"></div><div class="line">       <span class="comment">// do this last because it fires off messages to start doing things</span></div><div class="line">       <span class="keyword">try</span> &#123;</div><div class="line">           root.setView(view, wparams, panelParentView);</div><div class="line">       &#125; <span class="keyword">catch</span> (RuntimeException e) &#123;</div><div class="line">           <span class="comment">// BadTokenException or InvalidDisplayException, clean up.</span></div><div class="line">           <span class="keyword">synchronized</span> (mLock) &#123;</div><div class="line">               <span class="keyword">final</span> <span class="keyword">int</span> index = findViewLocked(view, <span class="keyword">false</span>);</div><div class="line">               <span class="keyword">if</span> (index &gt;= <span class="number">0</span>) &#123;</div><div class="line">                   removeViewLocked(index, <span class="keyword">true</span>);</div><div class="line">               &#125;</div><div class="line">           &#125;</div><div class="line">           <span class="keyword">throw</span> e;</div><div class="line">       &#125;</div><div class="line">   &#125;</div></pre></td></tr></table></figure></p>
<p>通过上述代码可以发现顶层视图DecorView最终被加入到了ViewRootImpl里面，且应该是在其setView方法里面执行了某些操作，导致DecorView被显示出来。这个方法比较长，大家可以自行查看，在里面有一句关键的代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Schedule the first layout -before- adding to the window</span></div><div class="line"><span class="comment">// manager, to make sure we do the relayout before receiving</span></div><div class="line"><span class="comment">// any other events from the system.</span></div><div class="line">requestLayout();</div></pre></td></tr></table></figure>
<p>requestLayout方法如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">requestLayout</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (!mHandlingLayoutInLayoutRequest) &#123;</div><div class="line">        checkThread();</div><div class="line">        mLayoutRequested = <span class="keyword">true</span>;</div><div class="line">        scheduleTraversals();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在这个方法当中调用了scheduleTraversals方法，如下所示：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">scheduleTraversals</span><span class="params">()</span> </span>&#123;</div><div class="line">       <span class="keyword">if</span> (!mTraversalScheduled) &#123;</div><div class="line">           mTraversalScheduled = <span class="keyword">true</span>;</div><div class="line">           mTraversalBarrier = mHandler.getLooper().getQueue().postSyncBarrier();</div><div class="line">           mChoreographer.postCallback(</div><div class="line">                   Choreographer.CALLBACK_TRAVERSAL, mTraversalRunnable, <span class="keyword">null</span>);</div><div class="line">           <span class="keyword">if</span> (!mUnbufferedInputDispatch) &#123;</div><div class="line">               scheduleConsumeBatchedInput();</div><div class="line">           &#125;</div><div class="line">           notifyRendererOfFramePending();</div><div class="line">           pokeDrawLockIfNeeded();</div><div class="line">       &#125;</div><div class="line">   &#125;</div></pre></td></tr></table></figure></p>
<p>在这个方法当中把mTraversalRunnable给post到了消息队列里面，来看看这个Runnable里面执行了什么操作：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">TraversalRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</div><div class="line">       <span class="meta">@Override</span></div><div class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">           doTraversal();</div><div class="line">       &#125;</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">final</span> TraversalRunnable mTraversalRunnable = <span class="keyword">new</span> TraversalRunnable();</div></pre></td></tr></table></figure></p>
<p>从上面可以看出在TraversalRunnable里面执行了doTraversal方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">doTraversal</span><span class="params">()</span> </span>&#123;</div><div class="line">       <span class="keyword">if</span> (mTraversalScheduled) &#123;</div><div class="line">           mTraversalScheduled = <span class="keyword">false</span>;</div><div class="line">           mHandler.getLooper().getQueue().removeSyncBarrier(mTraversalBarrier);</div><div class="line"></div><div class="line">           <span class="keyword">if</span> (mProfile) &#123;</div><div class="line">               Debug.startMethodTracing(<span class="string">"ViewAncestor"</span>);</div><div class="line">           &#125;</div><div class="line"></div><div class="line">           performTraversals();</div><div class="line"></div><div class="line">           <span class="keyword">if</span> (mProfile) &#123;</div><div class="line">               Debug.stopMethodTracing();</div><div class="line">               mProfile = <span class="keyword">false</span>;</div><div class="line">           &#125;</div><div class="line">       &#125;</div><div class="line">   &#125;</div></pre></td></tr></table></figure></p>
<p>在这个方法当中又执行了performTraversals方法，这个方法最终负责整个View树的绘制流程，因此这个方法比较关键。这个方法比较长，其负责绘制的View树的核心语句如下，其中mView就是顶层视图DecorView。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">performTraversals</span><span class="params">()</span> </span>&#123;</div><div class="line">        ......</div><div class="line">        <span class="keyword">int</span> childWidthMeasureSpec = getRootMeasureSpec(mWidth, lp.width);</div><div class="line">        <span class="keyword">int</span> childHeightMeasureSpec = getRootMeasureSpec(mHeight, lp.height);</div><div class="line">        ......</div><div class="line">        mView.measure(childWidthMeasureSpec, childHeightMeasureSpec);</div><div class="line">        ......</div><div class="line">        mView.layout(<span class="number">0</span>, <span class="number">0</span>, mView.getMeasuredWidth(), mView.getMeasuredHeight());</div><div class="line">        ......</div><div class="line">        mView.draw(canvas);</div><div class="line">        ......</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>上面对顶层视图DecorView的显示机制进行了深入剖析，通过一层层分析，最终得出ViewRootImpl负责整个View树的绘制。measure,layout,draw是View树绘制三个主要流程，只有理解了这三个基本流程的原理，在自定义View的时候才能做到游刃有余（当然还有View事件分发机制也很关键）！关于这三个流程的具体细节剖析将在下一篇博客中进行讲解。感谢大家的阅读！</p>
]]></content>
      
        <categories>
            
            <category> Android源码解析 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>http://easyliu.com/2017/03/18/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
      
        <categories>
            
            <category> 杂项 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 其他 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[自定义圆形进度条的实现]]></title>
      <url>http://easyliu.com/2017/03/16/android/CustomizeProgressBar/</url>
      <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>Android中自带有进度条，但是有的时候自带的进度条不能满足我们的需求，这时候就需要自定义进度条了，今天带来的就是一个自定义的圆形进度条首先来看效果，效果如下所示。</p>
<p><img src="/2017/03/16/android/CustomizeProgressBar/RoundProgressBar.gif" alt="自定义圆形进度条"></p>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p><strong>从上面的效果可以看出，主要有以下几个自定义属性：</strong></p>
<ul>
<li>背景颜色</li>
<li>进度扇形颜色</li>
<li>半径</li>
<li>起始角度</li>
</ul>
<p><strong>因此，在attrs.xml中定义如下属性：</strong></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">declare-styleable</span> <span class="attr">name</span>=<span class="string">"SimpleRoundProgressBar"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">attr</span> <span class="attr">format</span>=<span class="string">"color"</span> <span class="attr">name</span>=<span class="string">"roundColor"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">attr</span> <span class="attr">format</span>=<span class="string">"color"</span> <span class="attr">name</span>=<span class="string">"roundProgressColor"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">attr</span> <span class="attr">format</span>=<span class="string">"dimension"</span> <span class="attr">name</span>=<span class="string">"circleRadius"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">attr</span> <span class="attr">format</span>=<span class="string">"integer"</span> <span class="attr">name</span>=<span class="string">"startAngle"</span>/&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">declare-styleable</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></div></pre></td></tr></table></figure>
<p><strong>下面是SimpleRoundProgressBar代码，在onMeasure当中确定view的大小，在onDraw来进行绘制。</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.easyliu.demo.customizeview;</div><div class="line"></div><div class="line"><span class="keyword">import</span> android.content.Context;</div><div class="line"><span class="keyword">import</span> android.content.res.TypedArray;</div><div class="line"><span class="keyword">import</span> android.graphics.Canvas;</div><div class="line"><span class="keyword">import</span> android.graphics.Color;</div><div class="line"><span class="keyword">import</span> android.graphics.Paint;</div><div class="line"><span class="keyword">import</span> android.graphics.RectF;</div><div class="line"><span class="keyword">import</span> android.util.AttributeSet;</div><div class="line"><span class="keyword">import</span> android.view.View;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">* Created by easyliu on 2017/2/24.</div><div class="line">*/</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleRoundProgressBar</span> <span class="keyword">extends</span> <span class="title">View</span> </span>&#123;</div><div class="line">  <span class="keyword">private</span> Paint mPaint;<span class="comment">//画笔</span></div><div class="line">  <span class="keyword">private</span> RectF mRectF;<span class="comment">//扇形绘制的矩形范围</span></div><div class="line">  <span class="keyword">private</span> <span class="keyword">int</span> mRoundColor;<span class="comment">//圆环的颜色</span></div><div class="line">  <span class="keyword">private</span> <span class="keyword">int</span> mRoundProgressColor; <span class="comment">//进度条的颜色</span></div><div class="line">  <span class="keyword">private</span> <span class="keyword">float</span> mRadius;<span class="comment">//半径</span></div><div class="line">  <span class="keyword">private</span> <span class="keyword">int</span> mWidth;  <span class="comment">//宽度</span></div><div class="line">  <span class="keyword">private</span> <span class="keyword">int</span> mHeight; <span class="comment">//高度</span></div><div class="line">  <span class="keyword">private</span> <span class="keyword">int</span> mCenterX; <span class="comment">//中心X坐标</span></div><div class="line">  <span class="keyword">private</span> <span class="keyword">int</span> mCenterY; <span class="comment">//中心Y坐标</span></div><div class="line">  <span class="keyword">private</span> <span class="keyword">int</span> mStartAngle; <span class="comment">//初始角度</span></div><div class="line">  <span class="keyword">private</span> <span class="keyword">int</span> mSweepAngle; <span class="comment">//扫过的角度</span></div><div class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_INIT_ANGLE = <span class="number">0</span>;<span class="comment">//默认的初始化角度</span></div><div class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_RADIUS = <span class="number">10</span>;<span class="comment">//默认的半径</span></div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="title">SimpleRoundProgressBar</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>(context, <span class="keyword">null</span>);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="title">SimpleRoundProgressBar</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>(context, attrs, <span class="number">0</span>);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="title">SimpleRoundProgressBar</span><span class="params">(Context context, AttributeSet attrs, <span class="keyword">int</span> defStyleAttr)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>(context, attrs, defStyleAttr);</div><div class="line">    mPaint = <span class="keyword">new</span> Paint();</div><div class="line">    mRectF = <span class="keyword">new</span> RectF();</div><div class="line">    TypedArray typedArray =</div><div class="line">        context.obtainStyledAttributes(attrs, R.styleable.SimpleRoundProgressBar);</div><div class="line">    mRoundColor = typedArray.getColor(R.styleable.SimpleRoundProgressBar_roundColor, Color.GRAY);</div><div class="line">    mRoundProgressColor =</div><div class="line">        typedArray.getColor(R.styleable.SimpleRoundProgressBar_roundProgressColor, Color.RED);</div><div class="line">    mRadius =</div><div class="line">        typedArray.getDimension(R.styleable.SimpleRoundProgressBar_circleRadius, DEFAULT_RADIUS);</div><div class="line">    mStartAngle =</div><div class="line">        typedArray.getInteger(R.styleable.SimpleRoundProgressBar_startAngle, DEFAULT_INIT_ANGLE);</div><div class="line">    typedArray.recycle();</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="meta">@Override</span> <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onMeasure</span><span class="params">(<span class="keyword">int</span> widthMeasureSpec, <span class="keyword">int</span> heightMeasureSpec)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.onMeasure(widthMeasureSpec, heightMeasureSpec);</div><div class="line">    <span class="comment">//获取测量模式</span></div><div class="line">    <span class="keyword">int</span> widthMode = MeasureSpec.getMode(widthMeasureSpec);</div><div class="line">    <span class="keyword">int</span> heightMode = MeasureSpec.getMode(heightMeasureSpec);</div><div class="line">    <span class="comment">//获取测量大小</span></div><div class="line">    <span class="keyword">int</span> widthSize = MeasureSpec.getSize(widthMeasureSpec);</div><div class="line">    <span class="keyword">int</span> heightSize = MeasureSpec.getSize(heightMeasureSpec);</div><div class="line"></div><div class="line">    <span class="comment">//如果为确定值</span></div><div class="line">    <span class="keyword">if</span> (heightMode == MeasureSpec.EXACTLY) &#123;</div><div class="line">      mHeight = heightSize;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      <span class="comment">//如果为wrap_content，高度为半径大小乘以2，注意padding</span></div><div class="line">      mHeight = (<span class="keyword">int</span>) (mRadius * <span class="number">2</span>) + getPaddingTop() + getPaddingBottom();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//如果为确定值</span></div><div class="line">    <span class="keyword">if</span> (widthMode == MeasureSpec.EXACTLY) &#123;</div><div class="line">      mWidth = widthSize;</div><div class="line">      mHeight=mWidth;<span class="comment">//宽和高相等</span></div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      <span class="comment">//如果为wrap_content，宽度为半径大小乘以2,注意padding</span></div><div class="line">      mWidth = (<span class="keyword">int</span>) (mRadius * <span class="number">2</span>) + getPaddingLeft() + getPaddingRight();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//设置视图的大小</span></div><div class="line">    setMeasuredDimension(mWidth, mHeight);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="meta">@Override</span> <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas canvas)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.onDraw(canvas);</div><div class="line">    mPaint.setColor(mRoundColor);</div><div class="line">    mPaint.setAntiAlias(<span class="keyword">true</span>);</div><div class="line">    mCenterX = mWidth / <span class="number">2</span>;</div><div class="line">    mCenterY = mHeight / <span class="number">2</span>;</div><div class="line">    <span class="comment">//注意处理padding</span></div><div class="line">    mRadius = (mWidth - getPaddingLeft() - getPaddingRight()) / <span class="number">2</span>;</div><div class="line">    <span class="comment">//画圆</span></div><div class="line">    canvas.drawCircle(mCenterX, mCenterY, mRadius, mPaint);</div><div class="line">    mPaint.setColor(mRoundProgressColor);</div><div class="line">    <span class="comment">//注意处理padding</span></div><div class="line">    mRectF.left = getPaddingLeft();</div><div class="line">    mRectF.right = mWidth - getPaddingRight();</div><div class="line">    mRectF.top = getPaddingTop();</div><div class="line">    mRectF.bottom = mHeight - getPaddingBottom();</div><div class="line">    <span class="comment">//画扇形</span></div><div class="line">    canvas.drawArc(mRectF, (<span class="keyword">float</span>) mStartAngle, mSweepAngle, <span class="keyword">true</span>, mPaint);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getRoundColor</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> mRoundColor;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRoundColor</span><span class="params">(<span class="keyword">int</span> roundColor)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.mRoundColor = roundColor;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">/**</span></div><div class="line">   * 得到初始角度</div><div class="line">   */</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">int</span> <span class="title">getStartAngle</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> mStartAngle;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">/**</span></div><div class="line">   * 设置初始角度</div><div class="line">   */</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">setStartAngle</span><span class="params">(<span class="keyword">int</span> startAngle)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (startAngle &lt; -<span class="number">360</span>) &#123;</div><div class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"the angle can not less than -360"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (startAngle &gt; <span class="number">360</span>) &#123;</div><div class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"the angle can not larger than 360"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">this</span>.mStartAngle = startAngle;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">/**</span></div><div class="line">   * 得到扫过的角度</div><div class="line">   */</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">int</span> <span class="title">getSweepAngle</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> mSweepAngle;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">/**</span></div><div class="line">   * 设置扫过的角度,相对于起始点</div><div class="line">   *</div><div class="line">   * <span class="doctag">@param</span> sweepAngle 0~360</div><div class="line">   */</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">setSweepAngle</span><span class="params">(<span class="keyword">int</span> sweepAngle)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (sweepAngle &lt; <span class="number">0</span>) &#123;</div><div class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"the angle can not less than 0"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (sweepAngle &gt; <span class="number">360</span>) &#123;</div><div class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"the angle can not larger than 360"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">this</span>.mSweepAngle = sweepAngle;</div><div class="line">    postInvalidate();</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>定义好了之后就可以使用了，首先是xml文件：</strong></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">RelativeLayout</span></span></div><div class="line">    <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></div><div class="line">    <span class="attr">xmlns:easyliu</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></div><div class="line">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">tools:context</span>=<span class="string">"com.easyliu.demo.customizeview.RoundProgressBarActivity"</span></div><div class="line">    &gt;</div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">com.easyliu.demo.customizeview.SimpleRoundProgressBar</span></span></div><div class="line">      <span class="attr">android:id</span>=<span class="string">"@+id/progress_demo"</span></div><div class="line">      <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">      <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">      <span class="attr">android:layout_centerHorizontal</span>=<span class="string">"true"</span></div><div class="line">      <span class="attr">android:padding</span>=<span class="string">"10dp"</span></div><div class="line">      <span class="attr">easyliu:circleRadius</span>=<span class="string">"50dp"</span></div><div class="line">      <span class="attr">easyliu:roundColor</span>=<span class="string">"#5F000000"</span></div><div class="line">      <span class="attr">easyliu:roundProgressColor</span>=<span class="string">"#ff8d33"</span></div><div class="line">      /&gt;</div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">com.easyliu.demo.customizeview.SimpleRoundProgressBar</span></span></div><div class="line">      <span class="attr">android:id</span>=<span class="string">"@+id/progress_demo2"</span></div><div class="line">      <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">      <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">      <span class="attr">android:layout_below</span>=<span class="string">"@id/progress_demo"</span></div><div class="line">      <span class="attr">android:layout_centerHorizontal</span>=<span class="string">"true"</span></div><div class="line">      <span class="attr">android:padding</span>=<span class="string">"10dp"</span></div><div class="line">      <span class="attr">easyliu:circleRadius</span>=<span class="string">"60dp"</span></div><div class="line">      <span class="attr">easyliu:roundColor</span>=<span class="string">"@color/colorPrimary"</span></div><div class="line">      <span class="attr">easyliu:roundProgressColor</span>=<span class="string">"@color/colorAccent"</span></div><div class="line">      /&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<p><strong>然后是Activity代码，在代码中使用定时器来定时更新进度即可。</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.easyliu.demo.customizeview;</div><div class="line"></div><div class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity;</div><div class="line"><span class="keyword">import</span> android.os.Bundle;</div><div class="line"><span class="keyword">import</span> java.util.Timer;</div><div class="line"><span class="keyword">import</span> java.util.TimerTask;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RoundProgressBarActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line">  <span class="keyword">private</span> <span class="keyword">int</span> mCurrentAngle = <span class="number">0</span>;</div><div class="line">  <span class="keyword">private</span> SimpleRoundProgressBar mRoundProgressBar1;</div><div class="line">  <span class="keyword">private</span> SimpleRoundProgressBar mRoundProgressBar2;</div><div class="line"></div><div class="line">  <span class="meta">@Override</span> <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">    setContentView(R.layout.activity_progress_bar);</div><div class="line">    initViews();</div><div class="line">    Timer timer = <span class="keyword">new</span> Timer();</div><div class="line">    timer.schedule(<span class="keyword">new</span> TimerTask() &#123;</div><div class="line">      <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">        mCurrentAngle++;</div><div class="line">        mRoundProgressBar1.setSweepAngle(mCurrentAngle);</div><div class="line">        mRoundProgressBar2.setSweepAngle(mCurrentAngle);</div><div class="line">        <span class="keyword">if</span> (mCurrentAngle &gt;= <span class="number">360</span>) &#123;</div><div class="line">          mCurrentAngle = <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;, <span class="number">0</span>, <span class="number">20</span>);</div><div class="line">  &#125;</div><div class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initViews</span><span class="params">()</span></span>&#123;</div><div class="line">    mRoundProgressBar1 =</div><div class="line">        (SimpleRoundProgressBar) findViewById(R.id.progress_demo);</div><div class="line">    mRoundProgressBar1.setStartAngle(-<span class="number">90</span>);</div><div class="line">    mRoundProgressBar2= (SimpleRoundProgressBar) findViewById(R.id.progress_demo2);</div><div class="line">    mRoundProgressBar2.setStartAngle(<span class="number">0</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>这样就完成了一个简单的圆形进度条的自定义。</strong></p>
]]></content>
      
        <categories>
            
            <category> Android自定义控件 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hexo搭建个人博客]]></title>
      <url>http://easyliu.com/2017/03/15/first/</url>
      <content type="html"><![CDATA[<p>您好，欢迎来到easyliu的技术博客！</p>
<p>相关链接：</p>
<p><a href="http://www.tuicool.com/articles/umEBVfI" target="_blank" rel="external">在 hexo 中无痛使用本地图片</a></p>
<p><a href="http://www.jianshu.com/p/96a13401b0ca" target="_blank" rel="external">程序猿修炼之道(4)-技能篇之Markdown（附：工具推荐）</a></p>
<p><a href="https://hexo.io" target="_blank" rel="external">hexo官网</a></p>
<p><a href="https://www.haomwei.com/technology/maupassant-hexo.html" target="_blank" rel="external">大道至简——Hexo简洁主题推荐</a></p>
<p><a href="https://github.com/maximegris/angular-electron/issues/298" target="_blank" rel="external">npm install reports error “npm ERR! Unexpected end of JSON input while parsing near </a></p>
<p><a href="https://github.com/ppoffice/hexo-theme-hueman" target="_blank" rel="external">hueman-theme</a></p>
<p>相关笔记：</p>
<ul>
<li><p>代码块高亮的方式为三个```之后加上语言，记得之间的空格，不然无效</p>
</li>
<li><p>对于引用图片，在同一目录下面新建asset文件夹，把图片放入其中，然后引用即可</p>
</li>
<li><p>在_post下面的ios目录下面新建xcode_shortcut.md文件：hexo new –path ios/xcode_shortcut “xcode_shortcut”</p>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> hexo </category>
            
        </categories>
        
        
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
